========================= CLASS #1 =============================
(5) {1070} [1148]: See Chapter 19, Server Configuration, in the documentation for details.
(5594) {891224} [891302]: See Chapter 19, Server Configuration, in the documentation for details.
*****************************************************************
========================= CLASS #2 =============================
(7) {1273} [1364]: PARAMETERS configuration_parameter Name of a settable run-time parameter.
(3813) {605108} [605181]: configuration_parameter Name of a settable run-time parameter.
(5566) {886946} [887042]: PARAMETERS configuration_parameter Name of a settable configuration parameter.
*****************************************************************
========================= CLASS #3 =============================
(8) {1365} [1514]: Available parameters are documented in Chapter 19, Server Configuration, in the documentation and on the SET(7) reference page.
(3814) {605182} [605308]: Available parameters are documented in Chapter 19, Server Configuration, in the documentation and below.
(5567) {887043} [887159]: Available parameters are documented in Chapter 19, Server Configuration, in the documentation.
(5596) {891372} [891521]: Available parameters are documented in Chapter 19, Server Configuration, in the documentation and on the SET(7) reference page.
*****************************************************************
========================= CLASS #4 =============================
(10) {1598} [1758]: EXAMPLES Set the timezone configuration variable to its default value: RESET timezone; COMPATIBILITY RESET is a PostgreSQL extension.
(196) {32254} [32309]: COMPATIBILITY DISCARD is a PostgreSQL extension.
(1570) {246995} [247038]: CLOSE ALL is a PostgreSQL extension.
(3224) {510609} [510661]: COMPATIBILITY LOAD is a PostgreSQL extension.
*****************************************************************
========================= CLASS #5 =============================
(11) {1760} [3662]: SEE ALSO SET(7), SHOW(7) PostgreSQL 9.6.1 2016 RESET(7) ALTER EXTENSION(7) PostgreSQL 9.6.1 Documentation ALTER EXTENSION(7) NAME ALTER_EXTENSION - change the definition of an extension SYNOPSIS ALTER EXTENSION name UPDATE [ TO new_version ] ALTER EXTENSION name SET SCHEMA new_schema ALTER EXTENSION name ADD member_object ALTER EXTENSION name DROP member_object where member_object is: ACCESS METHOD object_name | AGGREGATE aggregate_name ( aggregate_signature ) | CAST (source_type AS target_type) | COLLATION object_name | CONVERSION object_name | DOMAIN object_name | EVENT TRIGGER object_name | FOREIGN DATA WRAPPER object_name | FOREIGN TABLE object_name | FUNCTION function_name ( [ [ argmode ] [ argname ] argtype [, ...] ] ) | MATERIALIZED VIEW object_name | OPERATOR operator_name (left_type, right_type) | OPERATOR CLASS object_name USING index_method | OPERATOR FAMILY object_name USING index_method | [ PROCEDURAL ] LANGUAGE object_name | SCHEMA object_name | SEQUENCE object_name | SERVER object_name | TABLE object_name | TEXT SEARCH CONFIGURATION object_name | TEXT SEARCH DICTIONARY object_name | TEXT SEARCH PARSER object_name | TEXT SEARCH TEMPLATE object_name | TRANSFORM FOR type_name LANGUAGE lang_name | TYPE object_name | VIEW object_name and aggregate_signature is: * | [ argmode ] [ argname ] argtype [ , ... ] | [ [ argmode ] [ argname ] argtype [ , ... ] ] ORDER BY [ argmode ] [ argname ] argtype [ , ... ] DESCRIPTION ALTER EXTENSION changes the definition of an installed extension.
(72) {11263} [12528]: PostgreSQL 9.6.1 2016 SET CONSTRAINTS(7) SECURITY LABEL(7) PostgreSQL 9.6.1 Documentation SECURITY LABEL(7) NAME SECURITY_LABEL - define or change a security label applied to an object SYNOPSIS SECURITY LABEL [ FOR provider ] ON { TABLE object_name | COLUMN table_name.column_name | AGGREGATE aggregate_name ( aggregate_signature ) | DATABASE object_name | DOMAIN object_name | EVENT TRIGGER object_name | FOREIGN TABLE object_name FUNCTION function_name ( [ [ argmode ] [ argname ] argtype [, ...] ] ) | LARGE OBJECT large_object_oid | MATERIALIZED VIEW object_name | [ PROCEDURAL ] LANGUAGE object_name | ROLE object_name | SCHEMA object_name | SEQUENCE object_name | TABLESPACE object_name | TYPE object_name | VIEW object_name } IS 'label' where aggregate_signature is: * | [ argmode ] [ argname ] argtype [ , ... ] | [ [ argmode ] [ argname ] argtype [ , ... ] ] ORDER BY [ argmode ] [ argname ] argtype [ , ... ] DESCRIPTION SECURITY LABEL applies a security label to a database object.
(2843) {445168} [447428]: SEE ALSO ALTER LANGUAGE (ALTER_LANGUAGE(7)), CREATE LANGUAGE (CREATE_LANGUAGE(7)), droplang(1) PostgreSQL 9.6.1 2016 DROP LANGUAGE(7) COMMENT(7) PostgreSQL 9.6.1 Documentation COMMENT(7) NAME COMMENT - define or change the comment of an object SYNOPSIS COMMENT ON { ACCESS METHOD object_name | AGGREGATE aggregate_name ( aggregate_signature ) | CAST (source_type AS target_type) | COLLATION object_name | COLUMN relation_name.column_name | CONSTRAINT constraint_name ON table_name | CONSTRAINT constraint_name ON DOMAIN domain_name | CONVERSION object_name | DATABASE object_name | DOMAIN object_name | EXTENSION object_name | EVENT TRIGGER object_name | FOREIGN DATA WRAPPER object_name | FOREIGN TABLE object_name | FUNCTION function_name ( [ [ argmode ] [ argname ] argtype [, ...] ] ) | INDEX object_name | LARGE OBJECT large_object_oid | MATERIALIZED VIEW object_name | OPERATOR operator_name (left_type, right_type) | OPERATOR CLASS object_name USING index_method | OPERATOR FAMILY object_name USING index_method | POLICY policy_name ON table_name | [ PROCEDURAL ] LANGUAGE object_name | ROLE object_name | RULE rule_name ON table_name | SCHEMA object_name | SEQUENCE object_name | SERVER object_name | TABLE object_name | TABLESPACE object_name | TEXT SEARCH CONFIGURATION object_name | TEXT SEARCH DICTIONARY object_name | TEXT SEARCH PARSER object_name | TEXT SEARCH TEMPLATE object_name | TRANSFORM FOR type_name LANGUAGE lang_name | TRIGGER trigger_name ON table_name | TYPE object_name | VIEW object_name } IS 'text' where aggregate_signature is: * | [ argmode ] [ argname ] argtype [ , ... ] | [ [ argmode ] [ argname ] argtype [ , ... ] ] ORDER BY [ argmode ] [ argname ] argtype [ , ... ] DESCRIPTION COMMENT stores a comment about a database object.
*****************************************************************
========================= CLASS #6 =============================
(14) {3967} [4049]: SET SCHEMA This form moves the extension's objects into another schema.
(360) {57886} [57954]: SET SCHEMA This form moves the table into another schema.
(650) {104278} [104345]: SET SCHEMA This form moves the type into another schema.
(1171) {182518} [182594]: SET SCHEMA This form moves the foreign table into another schema.
*****************************************************************
========================= CLASS #7 =============================
(17) {4215} [4276]: This is mainly useful in extension update scripts.
(20) {4520} [4581]: This is mainly useful in extension update scripts.
*****************************************************************
========================= CLASS #8 =============================
(22) {4666} [4804]: See Section 36.15, "Packaging Related Objects into an Extension", in the documentation for more information about these operations.
(991) {153721} [153861]: For information about writing new extensions, see Section 36.15, "Packaging Related Objects into an Extension", in the documentation.
*****************************************************************
========================= CLASS #9 =============================
(23) {4813} [4863]: You must own the extension to use ALTER EXTENSION.
(2481) {385750} [385799]: You must own the extension to use DROP EXTENSION.
*****************************************************************
========================= CLASS #10 =============================
(25) {4946} [5015]: PARAMETERS name The name of an installed extension.
(2484) {385947} [385998]: name The name of an installed extension.
*****************************************************************
========================= CLASS #11 =============================
(27) {5089} [5164]: This can be written as either an identifier or a string literal.
(977) {151655} [151730]: This can be written as either an identifier or a string literal.
(3067) {487377} [487457]: The user name can be written as either an identifier or a string literal.
(4890) {776712} [776792]: The role name can be written as either an identifier or a string literal.
*****************************************************************
========================= CLASS #12 =============================
(29) {5332} [5387]: new_schema The new schema for the extension.
(561) {89774} [89840]: new_schema The new schema for the text search template.
(600) {95337} [95391]: new_schema The new schema for the sequence.
(670) {106361} [106411]: new_schema The new schema for the type.
(1032) {160570} [160641]: new_schema The new schema for the text search configuration.
(1220) {188415} [188471]: new_schema The new schema for the conversion.
(1602) {251783} [251833]: new_schema The new schema for the view.
(1619) {254826} [254880]: new_schema The new schema for the operator.
(1903) {297135} [297198]: new_schema The new schema for the materialized view.
(2477) {384970} [385030]: new_schema The new schema for the operator class.
(2707) {422751} [422806]: new_schema The new schema for the collation.
(2793) {436551} [436612]: new_schema The new schema for the operator family.
(4609) {731339} [731403]: new_schema The new schema for the text search parser.
(4637) {735420} [735484]: new_schema The new schema for the aggregate function.
(4965) {788729} [788797]: new_schema The new schema for the text search dictionary.
(5300) {844684} [844738]: new_schema The new schema for the function.
(5380) {856721} [856773]: new_schema The new schema for the domain.
*****************************************************************
========================= CLASS #13 =============================
(31) {5562} [5770]: Names of tables, aggregates, domains, foreign tables, functions, operators, operator classes, operator families, sequences, text search objects, types, and views can be schema-qualified.
(82) {13812} [13951]: Names of tables, aggregates, domains, foreign tables, functions, sequences, types, and views can be schema-qualified.
(2854) {448734} [448998]: Names of tables, aggregates, collations, conversions, domains, foreign tables, functions, indexes, operators, operator classes, operator families, sequences, text search objects, types, and views can be schema-qualified.
*****************************************************************
========================= CLASS #14 =============================
(32) {5779} [5847]: source_type The name of the source data type of the cast.
(33) {5856} [5924]: target_type The name of the target data type of the cast.
(1046) {162668} [162736]: source_type The name of the source data type of the cast.
(1047) {162745} [162813]: target_type The name of the target data type of the cast.
(2857) {449356} [449424]: source_type The name of the source data type of the cast.
(2858) {449433} [449501]: target_type The name of the target data type of the cast.
(3007) {478252} [478338]: PARAMETERS source_type The name of the source data type of the cast.
(3008) {478347} [478415]: target_type The name of the target data type of the cast.
*****************************************************************
========================= CLASS #15 =============================
(34) {5933} [6037]: argmode The mode of a function or aggregate argument: IN, OUT, INOUT, or VARIADIC.
(38) {6348} [6412]: argname The name of a function or aggregate argument.
(40) {6619} [6688]: argtype The data type of a function or aggregate argument.
(86) {14257} [14361]: argmode The mode of a function or aggregate argument: IN, OUT, INOUT, or VARIADIC.
(90) {14671} [14735]: argname The name of a function or aggregate argument.
(92) {14941} [15010]: argtype The data type of a function or aggregate argument.
(1911) {298485} [298557]: argmode The mode of an argument: IN, OUT, INOUT, or VARIADIC.
(1915) {298866} [298909]: argname The name of an argument.
(2041) {319430} [319502]: argmode The mode of an argument: IN, OUT, INOUT, or VARIADIC.
(2045) {319708} [319751]: argname The name of an argument.
(2859) {449510} [449614]: argmode The mode of a function or aggregate argument: IN, OUT, INOUT, or VARIADIC.
(2863) {449906} [449970]: argname The name of a function or aggregate argument.
(2865) {450169} [450238]: argtype The data type of a function or aggregate argument.
(2890) {456596} [456655]: argmode The mode of an argument: IN or VARIADIC.
(2892) {456706} [456749]: argname The name of an argument.
(4628) {734552} [734611]: argmode The mode of an argument: IN or VARIADIC.
(4630) {734662} [734705]: argname The name of an argument.
(5290) {843712} [843784]: argmode The mode of an argument: IN, OUT, INOUT, or VARIADIC.
(5294) {844094} [844137]: argname The name of an argument.
(5438) {868525} [868584]: argmode The mode of an argument: IN or VARIADIC.
(5442) {868745} [868788]: argname The name of an argument.
*****************************************************************
========================= CLASS #16 =============================
(35) {6038} [6068]: If omitted, the default is IN.
(87) {14362} [14392]: If omitted, the default is IN.
(106) {16559} [16605]: If omitted, the default is plpgsql.
(1912) {298558} [298599]: If omitted, the default is IN.
(2042) {319503} [319544]: If omitted, the default is IN.
(2860) {449615} [449645]: If omitted, the default is IN.
(2891) {456656} [456697]: If omitted, the default is IN.
(4629) {734612} [734653]: If omitted, the default is IN.
(5291) {843785} [843826]: If omitted, the default is IN.
(5440) {868648} [868678]: If omitted, the default is IN.
*****************************************************************
========================= CLASS #17 =============================
(36) {6069} [6261]: Note that ALTER EXTENSION does not actually pay any attention to OUT arguments, since only the input arguments are needed to determine the function's identity.
(39) {6413} [6610]: Note that ALTER EXTENSION does not actually pay any attention to argument names, since only the argument data types are needed to determine the function's identity.
(88) {14393} [14584]: Note that SECURITY LABEL does not actually pay any attention to OUT arguments, since only the input arguments are needed to determine the function's identity.
(91) {14736} [14932]: Note that SECURITY LABEL does not actually pay any attention to argument names, since only the argument data types are needed to determine the function's identity.
(1913) {298600} [298779]: Note that DROP FUNCTION does not actually pay any attention to OUT arguments, since only the input arguments are needed to determine the function's identity.
(1916) {298910} [299094]: Note that DROP FUNCTION does not actually pay any attention to argument names, since only the argument data types are needed to determine the function's identity.
(2861) {449646} [449819]: Note that COMMENT does not actually pay any attention to OUT arguments, since only the input arguments are needed to determine the function's identity.
(2864) {449971} [450160]: Note that COMMENT does not actually pay any attention to argument names, since only the argument data types are needed to determine the function's identity.
(2893) {456750} [456945]: Note that DROP AGGREGATE does not actually pay any attention to argument names, since only the argument data types are needed to determine the aggregate function's identity.
(4631) {734706} [734913]: Note that ALTER AGGREGATE does not actually pay any attention to argument names, since only the argument data types are needed to determine the aggregate function's identity.
(5292) {843827} [844007]: Note that ALTER FUNCTION does not actually pay any attention to OUT arguments, since only the input arguments are needed to determine the function's identity.
(5295) {844138} [844323]: Note that ALTER FUNCTION does not actually pay any attention to argument names, since only the argument data types are needed to determine the function's identity.
*****************************************************************
========================= CLASS #18 =============================
(37) {6262} [6339]: So it is sufficient to list the IN, INOUT, and VARIADIC arguments.
(89) {14585} [14662]: So it is sufficient to list the IN, INOUT, and VARIADIC arguments.
(1914) {298780} [298857]: So it is sufficient to list the IN, INOUT, and VARIADIC arguments.
(2862) {449820} [449897]: So it is sufficient to list the IN, INOUT, and VARIADIC arguments.
(5293) {844008} [844085]: So it is sufficient to list the IN, INOUT, and VARIADIC arguments.
*****************************************************************
========================= CLASS #19 =============================
(41) {6697} [6822]: left_type right_type The data type(s) of the operator's arguments (optionally schema-qualified).
(1917) {299103} [299216]: argtype The data type(s) of the function's arguments (optionally schema-qualified), if any.
(2050) {320427} [320540]: argtype The data type(s) of the function's arguments (optionally schema-qualified), if any.
(2060) {321579} [321649]: rettype The return data type (optionally schema-qualified).
(2237) {348710} [348778]: argument_type The parameter data type(s) of the function.
(2790) {436342} [436410]: argument_type The parameter data type(s) of the function.
(2867) {450312} [450437]: left_type right_type The data type(s) of the operator's arguments (optionally schema-qualified).
(5296) {844332} [844445]: argtype The data type(s) of the function's arguments (optionally schema-qualified), if any.
*****************************************************************
========================= CLASS #20 =============================
(42) {6823} [6902]: Write NONE for the missing argument of a prefix or postfix operator.
(2868) {450438} [450517]: Write NONE for the missing argument of a prefix or postfix operator.
*****************************************************************
========================= CLASS #21 =============================
(43) {6911} [6954]: PROCEDURAL This is a noise word.
(94) {15084} [15127]: PROCEDURAL This is a noise word.
(1986) {310907} [310950]: PROCEDURAL This is a noise word.
(2869) {450526} [450569]: PROCEDURAL This is a noise word.
*****************************************************************
========================= CLASS #22 =============================
(44) {6963} [7027]: type_name The name of the data type of the transform.
(45) {7036} [7099]: lang_name The name of the language of the transform.
(514) {82500} [82582]: PARAMETERS type_name The name of the data type of the transform.
(515) {82591} [82654]: lang_name The name of the language of the transform.
(2195) {342789} [342853]: type_name The name of the data type of the transform.
(2196) {342862} [342925]: lang_name The name of the language of the transform.
(2870) {450578} [450642]: type_name The name of the data type of the transform.
(2871) {450651} [450714]: lang_name The name of the language of the transform.
*****************************************************************
========================= CLASS #23 =============================
(46) {7101} [7542]: EXAMPLES To update the hstore extension to version 2.0: ALTER EXTENSION hstore UPDATE TO '2.0'; To change the schema of the hstore extension to utils: ALTER EXTENSION hstore SET SCHEMA utils; To add an existing function to the hstore extension: ALTER EXTENSION hstore ADD FUNCTION populate_record(anyelement, hstore); COMPATIBILITY ALTER EXTENSION is a PostgreSQL extension.
(993) {154210} [154274]: COMPATIBILITY CREATE EXTENSION is a PostgreSQL extension.
(2490) {386793} [386855]: COMPATIBILITY DROP EXTENSION is a PostgreSQL extension.
*****************************************************************
========================= CLASS #24 =============================
(55) {8857} [8909]: Each constraint name can be schema-qualified.
(1227) {189570} [189624]: The collation name can be schema-qualified.
(1632) {256978} [257022]: The name can be schema-qualified.
(1880) {293203} [293247]: The name can be schema-qualified.
(2220) {346236} [346280]: The name can be schema-qualified.
(3010) {478511} [478564]: The function name can be schema-qualified.
(3175) {503181} [503225]: The name can be schema-qualified.
(3205) {508079} [508123]: The name can be schema-qualified.
(3789) {601382} [601426]: The name can be schema-qualified.
(4047) {640040} [640095]: The conversion name can be schema-qualified.
(4053) {640425} [640478]: The function name can be schema-qualified.
(4989) {792770} [792824]: The collation name can be schema-qualified.
(5579) {888712} [888767]: The conversion name can be schema-qualified.
*****************************************************************
========================= CLASS #25 =============================
(62) {9795} [9940]: NOT NULL and CHECK constraints are always checked immediately when a row is inserted or modified (not at the end of the statement).
(5164) {820314} [820375]: NOT NULL and CHECK constraints are not deferrable.
*****************************************************************
========================= CLASS #26 =============================
(69) {10815} [10910]: Issuing this outside of a transaction block emits a warning and otherwise has no effect.
(3812) {605000} [605099]: Issuing this outside of a transaction block emits a warning and otherwise has no effect.
(4037) {638506} [638605]: Issuing ROLLBACK outside of a transaction block emits a warning and otherwise has no effect.
(5554) {884986} [885082]: Issuing ABORT outside of a transaction block emits a warning and otherwise has no effect.
*****************************************************************
========================= CLASS #27 =============================
(93) {15019} [15075]: large_object_oid The OID of the large object.
(2866) {450247} [450303]: large_object_oid The OID of the large object.
*****************************************************************
========================= CLASS #28 =============================
(95) {15136} [15252]: label The new security label, written as a string literal; or NULL to drop the security label.
(2872) {450723} [450824]: text The new comment, written as a string literal; or NULL to drop the comment.
*****************************************************************
========================= CLASS #29 =============================
(97) {15369} [15533]: SECURITY LABEL FOR selinux ON TABLE mytable IS 'system_u:object_r:sepgsql_table_t:s0'; COMPATIBILITY There is no SECURITY LABEL command in the SQL standard.
(2958) {470897} [470976]: COMPATIBILITY There is no EXPLAIN statement defined in the SQL standard.
*****************************************************************
========================= CLASS #30 =============================
(103) {16329} [16411]: This must be specified as a string literal, just as in CREATE FUNCTION.
(473) {76688} [76738]: This must be specified as a simple string literal.
*****************************************************************
========================= CLASS #31 =============================
(112) {17445} [17602]: || quote_ident(r.table_name) || ' TO webuser'; END LOOP; END$$; COMPATIBILITY There is no DO statement in the SQL standard.
(491) {79001} [79071]: COMPATIBILITY There is no NOTIFY statement in the SQL standard.
(540) {86516} [86603]: COMPATIBILITY There is no DROP TEXT SEARCH PARSER statement in the SQL standard.
(620) {98281} [98372]: COMPATIBILITY There is no DROP TEXT SEARCH DICTIONARY statement in the SQL standard.
(1020) {158184} [158254]: COMPATIBILITY There is no LISTEN statement in the SQL standard.
(1847) {288108} [288185]: COMPATIBILITY There is no DROP DATABASE statement in the SQL standard.
(2698) {421346} [421435]: COMPATIBILITY There is no DROP TEXT SEARCH TEMPLATE statement in the SQL standard.
(3098) {493092} [493193]: COMPATIBILITY There is no DROP TEXT SEARCH CONFIGURATION statement in the SQL standard.
(3215) {508997} [509086]: COMPATIBILITY There is no CREATE TEXT SEARCH PARSER statement in the SQL standard.
(3631) {575787} [575858]: COMPATIBILITY There is no ANALYZE statement in the SQL standard.
(3793) {601776} [601879]: COMPATIBILITY There is no CREATE TEXT SEARCH CONFIGURATION statement in the SQL standard.
(4199) {665377} [665451]: COMPATIBILITY There is no DROP GROUP statement in the SQL standard.
(4610) {731405} [731493]: COMPATIBILITY There is no ALTER TEXT SEARCH PARSER statement in the SQL standard.
(4973) {789832} [789924]: COMPATIBILITY There is no ALTER TEXT SEARCH DICTIONARY statement in the SQL standard.
(5009) {795865} [795941]: COMPATIBILITY There is no CREATE GROUP statement in the SQL standard.
(5591) {890430} [890506]: COMPATIBILITY There is no ALTER SCHEMA statement in the SQL standard.
(5679) {903189} [903268]: COMPATIBILITY There is no CREATE DATABASE statement in the SQL standard.
*****************************************************************
========================= CLASS #32 =============================
(115) {18316} [18364]: The user who defines a domain becomes its owner.
(622) {99064} [99133]: The user who defines a foreign-data wrapper becomes its owner.
(906) {143170} [143228]: The user who defines an operator becomes its owner.
(1572) {247557} [247614]: The user who defines the server becomes its owner.
(1629) {256724} [256788]: The user who defines a text search dictionary becomes its owner.
(2210) {345118} [345175]: The user who defines an operator class becomes its owner.
(2266) {355195} [355241]: The user who defines a type becomes its owner.
(3170) {502732} [502790]: The user who defines an operator family becomes its owner.
(3786) {601122} [601189]: The user who defines a text search configuration becomes its owner.
*****************************************************************
========================= CLASS #33 =============================
(116) {18373} [18508]: If a schema name is given (for example, CREATE DOMAIN myschema.mydomain ...) then the domain is created in the specified schema.
(907) {143229} [143315]: If a schema name is given then the operator is created in the specified schema.
(1627) {256568} [256668]: If a schema name is given then the text search dictionary is created in the specified schema.
(1872) {292346} [292444]: If a schema name is given then the text search template is created in the specified schema.
(2022) {317376} [317466]: If a schema name is included, then the function is created in the specified schema.
(2207) {344847} [344939]: If a schema name is given then the operator class is created in the specified schema.
(2267) {355250} [355332]: If a schema name is given then the type is created in the specified schema.
(3167) {502459} [502552]: If a schema name is given then the operator family is created in the specified schema.
(3199) {507552} [507648]: If a schema name is given then the text search parser is created in the specified schema.
(3530) {561590} [561737]: If a schema name is given (for example, CREATE FOREIGN TABLE myschema.mytable ...) then the table is created in the specified schema.
(3784) {600963} [601066]: If a schema name is given then the text search configuration is created in the specified schema.
(4689) {743514} [743600]: If a schema name is given then the sequence is created in the specified schema.
(4745) {752603} [752732]: If a schema name is given (for example, CREATE VIEW myschema.myview ...) then the view is created in the specified schema.
(5012) {798963} [799095]: If a schema name is given (for example, CREATE TABLE myschema.mytable ...) then the table is created in the specified schema.
(5388) {860919} [861066]: If a schema name is given (for example, CREATE AGGREGATE myschema.myagg ...) then the aggregate function is created in the specified schema.
*****************************************************************
========================= CLASS #34 =============================
(117) {18509} [18562]: Otherwise it is created in the current schema.
(908) {143316} [143369]: Otherwise it is created in the current schema.
(1628) {256669} [256715]: Otherwise it is created in the current schema.
(1873) {292445} [292491]: Otherwise it is created in the current schema.
(2023) {317467} [317513]: Otherwise it is created in the current schema.
(2208) {344940} [344986]: Otherwise it is created in the current schema.
(2268) {355333} [355379]: Otherwise it is created in the current schema.
(3168) {502553} [502599]: Otherwise it is created in the current schema.
(3200) {507649} [507695]: Otherwise it is created in the current schema.
(3531) {561738} [561784]: Otherwise it is created in the current schema.
(3785) {601067} [601113]: Otherwise it is created in the current schema.
(4690) {743601} [743647]: Otherwise it is created in the current schema.
(4746) {752733} [752786]: Otherwise it is created in the current schema.
(5013) {799096} [799149]: Otherwise it is created in the current schema.
(5389) {861074} [861120]: Otherwise it is created in the current schema.
*****************************************************************
========================= CLASS #35 =============================
(122) {19013} [19104]: To be able to create a domain, you must have USAGE privilege on the underlying type.
(2281) {356771} [356870]: To be able to create a composite type, you must have USAGE privilege on all attribute types.
*****************************************************************
========================= CLASS #36 =============================
(123) {19106} [19205]: PARAMETERS name The name (optionally schema-qualified) of a domain to be created.
(374) {59372} [59468]: name The name (optionally schema-qualified) of an existing table to alter.
(534) {85760} [85860]: name The name (optionally schema-qualified) of an existing text search parser.
(559) {89575} [89695]: PARAMETERS name The name (optionally schema-qualified) of an existing text search template.
(570) {91618} [91719]: PARAMETERS name The name (optionally schema-qualified) of a sequence to be altered.
(614) {97501} [97605]: name The name (optionally schema-qualified) of an existing text search dictionary.
(667) {106124} [106224]: PARAMETERS name The name (possibly schema-qualified) of an existing type to alter.
(694) {111001} [111101]: PARAMETERS table_name The name (optionally schema-qualified) of an existing table.
(1024) {159726} [159851]: PARAMETERS name The name (optionally schema-qualified) of an existing text search configuration.
(1054) {163801} [163902]: name The name (optionally schema-qualified) of the materialized view to remove.
(1182) {183680} [183800]: PARAMETERS name The name (possibly schema-qualified) of an existing foreign table to alter.
(1217) {188185} [188284]: PARAMETERS name The name (optionally schema-qualified) of an existing conversion.
(1368) {214314} [214416]: table_name The name (optionally schema-qualified) of a specific table to vacuum.
(1594) {251034} [251127]: PARAMETERS name The name (optionally schema-qualified) of an existing view.
(1615) {254389} [254486]: PARAMETERS name The name (optionally schema-qualified) of an existing operator.
(1693) {267178} [267264]: table_name The name (possibly schema-qualified) of the table to be indexed.
(1897) {296607} [296724]: PARAMETERS name The name (optionally schema-qualified) of an existing materialized view.
(1910) {298397} [298476]: name The name (optionally schema-qualified) of an existing function.
(1926) {300510} [300605]: name The name (optionally schema-qualified) of the foreign table to drop.
(2040) {319322} [319421]: PARAMETERS name The name (optionally schema-qualified) of the function to create.
(2406) {373822} [373919]: PARAMETERS name The name (optionally schema-qualified) of a type to be created.
(2473) {384628} [384742]: PARAMETERS name The name (optionally schema-qualified) of an existing operator class.
(2519) {391561} [391643]: table_name The name (optionally schema-qualified) of an existing table.
(2631) {411427} [411540]: PARAMETERS name The name (optionally schema-qualified) of an existing table to lock.
(2663) {415808} [415885]: name The name (optionally schema-qualified) of the view to remove.
(2692) {420580} [420682]: name The name (optionally schema-qualified) of an existing text search template.
(2704) {422524} [422622]: PARAMETERS name The name (optionally schema-qualified) of an existing collation.
(2723) {425263} [425351]: table_name The name (optionally schema-qualified) of the table to be created.
(2776) {434248} [434363]: PARAMETERS name The name (optionally schema-qualified) of an existing operator family.
(2889) {456487} [456587]: name The name (optionally schema-qualified) of an existing aggregate function.
(2963) {471542} [471624]: name The name (optionally schema-qualified) of the data type to remove.
(3061) {486031} [486108]: name The name (optionally schema-qualified) of an existing domain.
(3092) {492272} [492379]: name The name (optionally schema-qualified) of an existing text search configuration.
(3233) {511807} [511883]: name The name (optionally schema-qualified) of the table to drop.
(3506) {556705} [556793]: PARAMETERS table_name The name (possibly schema-qualified) of a table.
(3539) {562717} [562805]: table_name The name (optionally schema-qualified) of the table to be created.
(3590) {570044} [570145]: table_name The name (possibly schema-qualified) of a specific table to analyze.
(3643) {577854} [577956]: name The name (optionally schema-qualified) of the materialized view to refresh.
(3745) {594978} [595061]: name The name (possibly schema-qualified) of an existing index to alter.
(3766) {598057} [598168]: table_name The name (optionally schema-qualified) of the materialized view to be created.
(4065) {642633} [642730]: name The name (optionally schema-qualified) of an existing operator family.
(4079) {644733} [644829]: name The name (optionally schema-qualified) of an existing operator class.
(4101) {648528} [648612]: table_name The name (optionally schema-qualified) of the table to update.
(4164) {659875} [659980]: table_name The name (optionally schema-qualified) of the table to delete rows from.
(4607) {731144} [731262]: PARAMETERS name The name (optionally schema-qualified) of an existing text search parser.
(4627) {734425} [734543]: PARAMETERS name The name (optionally schema-qualified) of an existing aggregate function.
(4680) {742029} [742106]: name The name (optionally schema-qualified) of an index to remove.
(4703) {745310} [745406]: name The name (optionally schema-qualified) of the sequence to be created.
(4757) {754037} [754116]: name The name (optionally schema-qualified) of a view to be created.
(4959) {788087} [788209]: PARAMETERS name The name (optionally schema-qualified) of an existing text search dictionary.
(5042) {802659} [802747]: table_name The name (optionally schema-qualified) of the table to be created.
(5289) {843606} [843703]: PARAMETERS name The name (optionally schema-qualified) of an existing function.
(5335) {850658} [850745]: new_table The name (optionally schema-qualified) of the table to be created.
(5370) {855786} [855899]: PARAMETERS name The name (possibly schema-qualified) of an existing domain to alter.
(5437) {868396} [868516]: PARAMETERS name The name (optionally schema-qualified) of the aggregate function to create.
(5704) {906946} [907042]: PARAMETERS name The name (optionally schema-qualified) of a table to truncate.
(5750) {913444} [913523]: name The name (optionally schema-qualified) of an existing operator.
(5763) {915265} [915334]: name The name (optionally schema-qualified) of a sequence.
*****************************************************************
========================= CLASS #37 =============================
(125) {19275} [19320]: This can include array specifiers.
(3542) {562948} [562982]: This can include array specifiers.
(5049) {803532} [803566]: This can include array specifiers.
*****************************************************************
========================= CLASS #38 =============================
(127) {19388} [19482]: If no collation is specified, the underlying data type's default collation is used.
(3545) {563267} [563345]: If not specified, the column data type's default collation is used.
(5052) {803851} [803929]: If not specified, the column data type's default collation is used.
*****************************************************************
========================= CLASS #39 =============================
(131) {19776} [19866]: The data type of the default expression must match the data type of the domain.
(3565) {565683} [565773]: The data type of the default expression must match the data type of the column.
(5109) {811492} [811582]: The data type of the default expression must match the data type of the column.
*****************************************************************
========================= CLASS #40 =============================
(133) {19966} [20082]: The default expression will be used in any insert operation that does not specify a value for the column.
(3566) {565786} [565902]: The default expression will be used in any insert operation that does not specify a value for the column.
(5110) {811595} [811711]: The default expression will be used in any insert operation that does not specify a value for the column.
*****************************************************************
========================= CLASS #41 =============================
(136) {20330} [20402]: CONSTRAINT constraint_name An optional name for a constraint.
(3549) {563692} [563780]: CONSTRAINT constraint_name An optional name for a column or table constraint.
(5089) {809063} [809151]: CONSTRAINT constraint_name An optional name for a column or table constraint.
*****************************************************************
========================= CLASS #42 =============================
(137) {20403} [20460]: If not specified, the system generates a name.
(3552) {564121} [564199]: If a constraint name is not specified, the system generates a name.
(5092) {809492} [809570]: If a constraint name is not specified, the system generates a name.
*****************************************************************
========================= CLASS #43 =============================
(140) {20645} [20665]: This is the default.
(386) {60638} [60667]: This is the default behavior.
(499) {80127} [80158]: This is the default.
(537) {86200} [86220]: This is the default.
(617) {97953} [97973]: This is the default.
(658) {105185} [105205]: This is the default.
(1057) {164304} [164324]: This is the default.
(1194) {184980} [185009]: This is the default behavior.
(1230) {189935} [189966]: This is the default.
(1865) {291191} [291211]: This is the default.
(1920) {299568} [299599]: This is the default.
(1929) {300940} [300971]: This is the default.
(1942) {303400} [303431]: This is the default.
(2108) {328449} [328469]: That is the default.
(2112) {329012} [329032]: This is the default.
(2199) {343236} [343267]: This is the default.
(2487) {386420} [386440]: This is the default.
(2666) {416208} [416239]: This is the default.
(2695) {421026} [421046]: This is the default.
(2733) {426581} [426625]: This is the default behavior.
(2762) {430900} [430931]: This is the default.
(2841) {444948} [444979]: This is the default.
(2899) {457681} [457701]: This is the default.
(2966) {471986} [472017]: This is the default.
(3064) {486437} [486468]: This is the default.
(3095) {492733} [492753]: This is the default.
(3236) {512202} [512233]: This is the default.
(3260) {516022} [516041]: ALL is the default.
(3555) {564348} [564368]: This is the default.
(3713) {589745} [589776]: This is the default.
(3928) {622610} [622641]: This is the default.
(3977) {630179} [630206]: NOBYPASSRLS is the default.
(4069) {643160} [643180]: This is the default.
(4083) {645263} [645294]: This is the default.
(4666) {740197} [740228]: This is the default.
(4683) {742409} [742440]: This is the default.
(4838) {767997} [768028]: This is the default.
(4847) {769364} [769390]: Read/write is the default.
(4880) {775238} [775258]: This is the default.
(5095) {809719} [809739]: This is the default.
(5151) {818672} [818714]: This is the default action.
(5162) {820153} [820194]: NOT DEFERRABLE is the default.
(5168) {820800} [820820]: This is the default.
(5184) {823082} [823126]: This is the default behavior.
(5376) {856479} [856508]: This is the default behavior.
(5710) {907573} [907593]: This is the default.
(5713) {907945} [907976]: This is the default.
(5755) {914139} [914170]: This is the default.
(5766) {915643} [915674]: This is the default.
*****************************************************************
========================= CLASS #44 =============================
(142) {20768} [20811]: Its use is discouraged in new applications.
(3557) {564472} [564515]: Its use is discouraged in new applications.
(5097) {809843} [809886]: Its use is discouraged in new applications.
*****************************************************************
========================= CLASS #45 =============================
(146) {21112} [21173]: Expressions evaluating to TRUE or UNKNOWN succeed.
(5099) {810117} [810178]: Expressions evaluating to TRUE or UNKNOWN succeed.
*****************************************************************
========================= CLASS #46 =============================
(148) {21337} [21443]: Currently, CHECK expressions cannot contain subqueries nor refer to variables other than VALUE.
(3560) {565060} [565187]: Currently, CHECK expressions cannot contain subqueries nor refer to variables other than columns of the current row.
(5102) {810580} [810707]: Currently, CHECK expressions cannot contain subqueries nor refer to variables other than columns of the current row.
*****************************************************************
========================= CLASS #47 =============================
(150) {21564} [21672]: (PostgreSQL versions before 9.5 did not honor any particular firing order for CHECK constraints.)
(5106) {811073} [811181]: (PostgreSQL versions before 9.5 did not honor any particular firing order for CHECK constraints.)
*****************************************************************
========================= CLASS #48 =============================
(158) {22892} [23487]: A regular expression test is used to verify that the value looks like a valid US postal code: CREATE DOMAIN us_postal_code AS TEXT CHECK( VALUE ~ '^\d{5}$' OR VALUE ~ '^\d{5}-\d{4}$' ); CREATE TABLE us_snail_addy ( address_id SERIAL PRIMARY KEY, street1 TEXT NOT NULL, street2 TEXT, street3 TEXT, city TEXT NOT NULL, postal us_postal_code NOT NULL ); COMPATIBILITY The command CREATE DOMAIN conforms to the SQL standard.
(1488) {235758} [235815]: COMPATIBILITY VALUES conforms to the SQL standard.
*****************************************************************
========================= CLASS #49 =============================
(159) {23489} [25773]: SEE ALSO ALTER DOMAIN (ALTER_DOMAIN(7)), DROP DOMAIN (DROP_DOMAIN(7)) PostgreSQL 9.6.1 2016 CREATE DOMAIN(7) ALTER DEFAULT PRIVILEGESPostgreSQL 9.6.1 DocumentatALTER DEFAULT PRIVILEGES(7) NAME ALTER_DEFAULT_PRIVILEGES - define default access privileges SYNOPSIS ALTER DEFAULT PRIVILEGES [ FOR { ROLE | USER } target_role [, ...] ] [ IN SCHEMA schema_name [, ...] ] abbreviated_grant_or_revoke where abbreviated_grant_or_revoke is one of: GRANT { { SELECT | INSERT | UPDATE | DELETE | TRUNCATE | REFERENCES | TRIGGER } [, ...] | ALL [ PRIVILEGES ] } ON TABLES TO { [ GROUP ] role_name | PUBLIC } [, ...] [ WITH GRANT OPTION ] GRANT { { USAGE | SELECT | UPDATE } [, ...] | ALL [ PRIVILEGES ] } ON SEQUENCES TO { [ GROUP ] role_name | PUBLIC } [, ...] [ WITH GRANT OPTION ] GRANT { EXECUTE | ALL [ PRIVILEGES ] } ON FUNCTIONS TO { [ GROUP ] role_name | PUBLIC } [, ...] [ WITH GRANT OPTION ] GRANT { USAGE | ALL [ PRIVILEGES ] } ON TYPES TO { [ GROUP ] role_name | PUBLIC } [, ...] [ WITH GRANT OPTION ] REVOKE [ GRANT OPTION FOR ] { { SELECT | INSERT | UPDATE | DELETE | TRUNCATE | REFERENCES | TRIGGER } [, ...] | ALL [ PRIVILEGES ] } ON TABLES FROM { [ GROUP ] role_name | PUBLIC } [, ...] [ CASCADE | RESTRICT ] REVOKE [ GRANT OPTION FOR ] { { USAGE | SELECT | UPDATE } [, ...] | ALL [ PRIVILEGES ] } ON SEQUENCES FROM { [ GROUP ] role_name | PUBLIC } [, ...] [ CASCADE | RESTRICT ] REVOKE [ GRANT OPTION FOR ] { EXECUTE | ALL [ PRIVILEGES ] } ON FUNCTIONS FROM { [ GROUP ] role_name | PUBLIC } [, ...] [ CASCADE | RESTRICT ] REVOKE [ GRANT OPTION FOR ] { USAGE | ALL [ PRIVILEGES ] } ON TYPES FROM { [ GROUP ] role_name | PUBLIC } [, ...] [ CASCADE | RESTRICT ] DESCRIPTION ALTER DEFAULT PRIVILEGES allows you to set the privileges that will be applied to objects created in the future.
(1412) {218843} [222791]: SEE ALSO vacuumdb(1), Section 19.4.4, "Cost-based Vacuum Delay", in the documentation, Section 24.1.6, "The Autovacuum Daemon", in the documentation PostgreSQL 9.6.1 2016 VACUUM(7) REVOKE(7) PostgreSQL 9.6.1 Documentation REVOKE(7) NAME REVOKE - remove access privileges SYNOPSIS REVOKE [ GRANT OPTION FOR ] { { SELECT | INSERT | UPDATE | DELETE | TRUNCATE | REFERENCES | TRIGGER } [, ...] | ALL [ PRIVILEGES ] } ON { [ TABLE ] table_name [, ...] | ALL TABLES IN SCHEMA schema_name [, ...] } FROM { [ GROUP ] role_name | PUBLIC } [, ...] [ CASCADE | RESTRICT ] REVOKE [ GRANT OPTION FOR ] { { SELECT | INSERT | UPDATE | REFERENCES } ( column_name [, ...] ) [, ...] | ALL [ PRIVILEGES ] ( column_name [, ...] ) } ON [ TABLE ] table_name [, ...] FROM { [ GROUP ] role_name | PUBLIC } [, ...] [ CASCADE | RESTRICT ] REVOKE [ GRANT OPTION FOR ] { { USAGE | SELECT | UPDATE } [, ...] | ALL [ PRIVILEGES ] } ON { SEQUENCE sequence_name [, ...] | ALL SEQUENCES IN SCHEMA schema_name [, ...] } FROM { [ GROUP ] role_name | PUBLIC } [, ...] [ CASCADE | RESTRICT ] REVOKE [ GRANT OPTION FOR ] { { CREATE | CONNECT | TEMPORARY | TEMP } [, ...] | ALL [ PRIVILEGES ] } ON DATABASE database_name [, ...] FROM { [ GROUP ] role_name | PUBLIC } [, ...] [ CASCADE | RESTRICT ] REVOKE [ GRANT OPTION FOR ] { USAGE | ALL [ PRIVILEGES ] } ON DOMAIN domain_name [, ...] FROM { [ GROUP ] role_name | PUBLIC } [, ...] [ CASCADE | RESTRICT ] REVOKE [ GRANT OPTION FOR ] { USAGE | ALL [ PRIVILEGES ] } ON FOREIGN DATA WRAPPER fdw_name [, ...] FROM { [ GROUP ] role_name | PUBLIC } [, ...] [ CASCADE | RESTRICT ] REVOKE [ GRANT OPTION FOR ] { USAGE | ALL [ PRIVILEGES ] } ON FOREIGN SERVER server_name [, ...] FROM { [ GROUP ] role_name | PUBLIC } [, ...] [ CASCADE | RESTRICT ] REVOKE [ GRANT OPTION FOR ] { EXECUTE | ALL [ PRIVILEGES ] } ON { FUNCTION function_name ( [ [ argmode ] [ arg_name ] arg_type [, ...] ] ) [, ...] | ALL FUNCTIONS IN SCHEMA schema_name [, ...] } FROM { [ GROUP ] role_name | PUBLIC } [, ...] [ CASCADE | RESTRICT ] REVOKE [ GRANT OPTION FOR ] { USAGE | ALL [ PRIVILEGES ] } ON LANGUAGE lang_name [, ...] FROM { [ GROUP ] role_name | PUBLIC } [, ...] [ CASCADE | RESTRICT ] REVOKE [ GRANT OPTION FOR ] { { SELECT | UPDATE } [, ...] | ALL [ PRIVILEGES ] } ON LARGE OBJECT loid [, ...] FROM { [ GROUP ] role_name | PUBLIC } [, ...] [ CASCADE | RESTRICT ] REVOKE [ GRANT OPTION FOR ] { { CREATE | USAGE } [, ...] | ALL [ PRIVILEGES ] } ON SCHEMA schema_name [, ...] FROM { [ GROUP ] role_name | PUBLIC } [, ...] [ CASCADE | RESTRICT ] REVOKE [ GRANT OPTION FOR ] { CREATE | ALL [ PRIVILEGES ] } ON TABLESPACE tablespace_name [, ...] FROM { [ GROUP ] role_name | PUBLIC } [, ...] [ CASCADE | RESTRICT ] REVOKE [ GRANT OPTION FOR ] { USAGE | ALL [ PRIVILEGES ] } ON TYPE type_name [, ...] FROM { [ GROUP ] role_name | PUBLIC } [, ...] [ CASCADE | RESTRICT ] REVOKE [ ADMIN OPTION FOR ] role_name [, ...] FROM role_name [, ...] [ CASCADE | RESTRICT ] DESCRIPTION The REVOKE command revokes previously granted privileges from one or more roles.
(3323) {526291} [529703]: SEE ALSO ALTER POLICY (ALTER_POLICY(7)), DROP POLICY (DROP_POLICY(7)), ALTER TABLE (ALTER_TABLE(7)) PostgreSQL 9.6.1 2016 CREATE POLICY(7) GRANT(7) PostgreSQL 9.6.1 Documentation GRANT(7) NAME GRANT - define access privileges SYNOPSIS GRANT { { SELECT | INSERT | UPDATE | DELETE | TRUNCATE | REFERENCES | TRIGGER } [, ...] | ALL [ PRIVILEGES ] } ON { [ TABLE ] table_name [, ...] | ALL TABLES IN SCHEMA schema_name [, ...] } TO role_specification [, ...] [ WITH GRANT OPTION ] GRANT { { SELECT | INSERT | UPDATE | REFERENCES } ( column_name [, ...] ) [, ...] | ALL [ PRIVILEGES ] ( column_name [, ...] ) } ON [ TABLE ] table_name [, ...] TO role_specification [, ...] [ WITH GRANT OPTION ] GRANT { { USAGE | SELECT | UPDATE } [, ...] | ALL [ PRIVILEGES ] } ON { SEQUENCE sequence_name [, ...] | ALL SEQUENCES IN SCHEMA schema_name [, ...] } TO role_specification [, ...] [ WITH GRANT OPTION ] GRANT { { CREATE | CONNECT | TEMPORARY | TEMP } [, ...] | ALL [ PRIVILEGES ] } ON DATABASE database_name [, ...] TO role_specification [, ...] [ WITH GRANT OPTION ] GRANT { USAGE | ALL [ PRIVILEGES ] } ON DOMAIN domain_name [, ...] TO role_specification [, ...] [ WITH GRANT OPTION ] GRANT { USAGE | ALL [ PRIVILEGES ] } ON FOREIGN DATA WRAPPER fdw_name [, ...] TO role_specification [, ...] [ WITH GRANT OPTION ] GRANT { USAGE | ALL [ PRIVILEGES ] } ON FOREIGN SERVER server_name [, ...] TO role_specification [, ...] [ WITH GRANT OPTION ] GRANT { EXECUTE | ALL [ PRIVILEGES ] } ON { FUNCTION function_name ( [ [ argmode ] [ arg_name ] arg_type [, ...] ] ) [, ...] | ALL FUNCTIONS IN SCHEMA schema_name [, ...] } TO role_specification [, ...] [ WITH GRANT OPTION ] GRANT { USAGE | ALL [ PRIVILEGES ] } ON LANGUAGE lang_name [, ...] TO role_specification [, ...] [ WITH GRANT OPTION ] GRANT { { SELECT | UPDATE } [, ...] | ALL [ PRIVILEGES ] } ON LARGE OBJECT loid [, ...] TO role_specification [, ...] [ WITH GRANT OPTION ] GRANT { { CREATE | USAGE } [, ...] | ALL [ PRIVILEGES ] } ON SCHEMA schema_name [, ...] TO role_specification [, ...] [ WITH GRANT OPTION ] GRANT { CREATE | ALL [ PRIVILEGES ] } ON TABLESPACE tablespace_name [, ...] TO role_specification [, ...] [ WITH GRANT OPTION ] GRANT { USAGE | ALL [ PRIVILEGES ] } ON TYPE type_name [, ...] TO role_specification [, ...] [ WITH GRANT OPTION ] where role_specification can be: [ GROUP ] role_name | PUBLIC | CURRENT_USER | SESSION_USER GRANT role_name [, ...] TO role_name [, ...] [ WITH ADMIN OPTION ] DESCRIPTION The GRANT command has two basic variants: one that grants privileges on a database object (table, column, view, foreign table, sequence, database, foreign-data wrapper, foreign server, function, procedural language, schema, or tablespace), and one that grants membership in a role.
*****************************************************************
========================= CLASS #50 =============================
(167) {26791} [26899]: Parameters target_role The name of an existing role of which the current role is a member.
(169) {26972} [27026]: schema_name The name of an existing schema.
(391) {61378} [61430]: index_name The name of an existing index.
(3507) {556802} [556845]: index_name The name of an index.
(5587) {890155} [890220]: PARAMETERS name The name of an existing schema.
*****************************************************************
========================= CLASS #51 =============================
(177) {28036} [29025]: EXAMPLES Grant SELECT privilege to everyone for all tables (and views) you subsequently create in schema myschema, and allow role webuser to INSERT into them too: ALTER DEFAULT PRIVILEGES IN SCHEMA myschema GRANT SELECT ON TABLES TO PUBLIC; ALTER DEFAULT PRIVILEGES IN SCHEMA myschema GRANT INSERT ON TABLES TO webuser; Undo the above, so that subsequently-created tables won't have any more permissions than normal: ALTER DEFAULT PRIVILEGES IN SCHEMA myschema REVOKE SELECT ON TABLES FROM PUBLIC; ALTER DEFAULT PRIVILEGES IN SCHEMA myschema REVOKE INSERT ON TABLES FROM webuser; Remove the public EXECUTE permission that is normally granted on functions, for all functions subsequently created by role admin: ALTER DEFAULT PRIVILEGES FOR ROLE admin REVOKE EXECUTE ON FUNCTIONS FROM PUBLIC; COMPATIBILITY There is no ALTER DEFAULT PRIVILEGES statement in the SQL standard.
(186) {30193} [30276]: COMPATIBILITY There is no ALTER EVENT TRIGGER statement in the SQL standard.
(562) {89842} [89932]: COMPATIBILITY There is no ALTER TEXT SEARCH TEMPLATE statement in the SQL standard.
(1887) {293744} [293835]: COMPATIBILITY There is no CREATE TEXT SEARCH TEMPLATE statement in the SQL standard.
(2252) {351308} [351379]: There is no CREATE OPERATOR CLASS statement in the SQL standard.
(2478) {385032} [385116]: COMPATIBILITY There is no ALTER OPERATOR CLASS statement in the SQL standard.
(3178) {503388} [503460]: There is no CREATE OPERATOR FAMILY statement in the SQL standard.
(4072) {643496} [643580]: COMPATIBILITY There is no DROP OPERATOR FAMILY statement in the SQL standard.
(4088) {646056} [646139]: COMPATIBILITY There is no DROP OPERATOR CLASS statement in the SQL standard.
(5758) {914499} [914593]: (bigint, none); COMPATIBILITY There is no DROP OPERATOR statement in the SQL standard.
*****************************************************************
========================= CLASS #52 =============================
(180) {29696} [29771]: PARAMETERS name The name of an existing trigger to alter.
(496) {79684} [79738]: name The name of an existing access method.
(888) {140167} [140246]: PARAMETERS name The name of an existing foreign-data wrapper.
(1115) {173523} [173592]: PARAMETERS name The name of an existing tablespace.
(1852) {289099} [289174]: PARAMETERS name The name of an existing trigger to alter.
(1862) {290738} [290799]: name The name of an existing foreign-data wrapper.
(2821) {442731} [442805]: PARAMETERS name The name of an existing policy to alter.
(2837) {444450} [444510]: name The name of an existing procedural language.
(2881) {455098} [455170]: PARAMETERS name The name of an existing rule to alter.
(3925) {622234} [622281]: name The name of an existing server.
(4648) {737972} [738037]: PARAMETERS name The name of an existing server.
*****************************************************************
========================= CLASS #53 =============================
(181) {29780} [29853]: new_owner The user name of the new owner of the event trigger.
(182) {29862} [29916]: new_name The new name of the event trigger.
(396) {61750} [61815]: new_owner The user name of the new owner of the table.
(560) {89704} [89765]: new_name The new name of the text search template.
(598) {95201} [95269]: new_owner The user name of the new owner of the sequence.
(599) {95278} [95328]: new_name The new name for the sequence.
(668) {106233} [106279]: new_name The new name for the type.
(669) {106288} [106352]: new_owner The user name of the new owner of the type.
(902) {141811} [141891]: new_owner The user name of the new owner of the foreign-data wrapper.
(903) {141900} [141962]: new_name The new name for the foreign-data wrapper.
(1030) {160418} [160484]: new_name The new name of the text search configuration.
(1031) {160493} [160561]: new_owner The new owner of the text search configuration.
(1116) {173601} [173652]: new_name The new name of the tablespace.
(1118) {173759} [173812]: new_owner The new owner of the tablespace.
(1201) {185652} [185717]: new_owner The user name of the new owner of the table.
(1218) {188293} [188344]: new_name The new name of the conversion.
(1219) {188353} [188406]: new_owner The new owner of the conversion.
(1600) {251655} [251719]: new_owner The user name of the new owner of the view.
(1601) {251728} [251774]: new_name The new name for the view.
(1618) {254766} [254817]: new_owner The new owner of the operator.
(1823) {285447} [285496]: new_name The new name of the database.
(1824) {285505} [285556]: new_owner The new owner of the database.
(1854) {289263} [289312]: new_name The new name for the trigger.
(1901) {296981} [297058]: new_owner The user name of the new owner of the materialized view.
(1902) {297067} [297126]: new_name The new name for the materialized view.
(2475) {384840} [384895]: new_name The new name of the operator class.
(2476) {384904} [384961]: new_owner The new owner of the operator class.
(2705) {422631} [422681]: new_name The new name of the collation.
(2706) {422690} [422742]: new_owner The new owner of the collation.
(2791) {436419} [436475]: new_name The new name of the operator family.
(2792) {436484} [436542]: new_owner The new owner of the operator family.
(2823) {442930} [442978]: new_name The new name for the policy.
(2883) {455306} [455352]: new_name The new name for the rule.
(3686) {585324} [585369]: new_name The new name of the role.
(3746) {595070} [595117]: new_name The new name for the index.
(4046) {639996} [640039]: name The name of the conversion.
(4608) {731271} [731330]: new_name The new name of the text search parser.
(4635) {735282} [735341]: new_name The new name of the aggregate function.
(4636) {735350} [735411]: new_owner The new owner of the aggregate function.
(4654) {738466} [738540]: new_owner The user name of the new owner of the foreign server.
(4655) {738549} [738605]: new_name The new name for the foreign server.
(4963) {788583} [788646]: new_name The new name of the text search dictionary.
(4964) {788655} [788720]: new_owner The new owner of the text search dictionary.
(4984) {791651} [791697]: new_name The new name of the group.
(5297) {844454} [844503]: new_name The new name of the function.
(5298) {844512} [844563]: new_owner The new owner of the function.
(5377) {856517} [856565]: new_name The new name for the domain.
(5378) {856574} [856637]: new_constraint_name The new name for the constraint.
(5379) {856646} [856712]: new_owner The user name of the new owner of the domain.
(5578) {888668} [888711]: name The name of the conversion.
(5588) {890229} [890276]: new_name The new name of the schema.
(5590) {890379} [890428]: new_owner The new owner of the schema.
*****************************************************************
========================= CLASS #54 =============================
(183) {29925} [30031]: DISABLE/ENABLE [ REPLICA | ALWAYS ] TRIGGER These forms configure the firing of event triggers.
(285) {48035} [48171]: DISABLE/ENABLE [ REPLICA | ALWAYS ] TRIGGER These forms configure the firing of trigger(s) belonging to the table.
(294) {49568} [49704]: DISABLE/ENABLE [ REPLICA | ALWAYS ] RULE These forms configure the firing of rewrite rules belonging to the table.
(1153) {180421} [180565]: DISABLE/ENABLE [ REPLICA | ALWAYS ] TRIGGER These forms configure the firing of trigger(s) belonging to the foreign table.
*****************************************************************
========================= CLASS #55 =============================
(184) {30032} [30156]: A disabled trigger is still known to the system, but is not executed when its triggering event occurs.
(286) {48172} [48285]: A disabled trigger is still known to the system, but is not executed when its triggering event occurs.
(295) {49705} [49804]: A disabled rule is still known to the system, but is not applied during query rewriting.
*****************************************************************
========================= CLASS #56 =============================
(195) {31769} [32252]: Currently, this has the same effect as executing the following sequence of statements: SET SESSION AUTHORIZATION DEFAULT; RESET ALL; DEALLOCATE ALL; CLOSE ALL; UNLISTEN *; SELECT pg_advisory_unlock_all(); DISCARD PLANS; DISCARD SEQUENCES; DISCARD TEMP; NOTES DISCARD ALL cannot be executed inside a transaction block.
(1379) {215266} [215319]: VACUUM cannot be executed inside a transaction block.
(1844) {287827} [287900]: NOTES DROP DATABASE cannot be executed inside a transaction block.
(2686) {419333} [419397]: CREATE TABLESPACE cannot be executed inside a transaction block.
(3126) {496690} [496768]: This form of REINDEX cannot be executed inside a transaction block.
(3129) {496912} [496990]: This form of REINDEX cannot be executed inside a transaction block.
(3133) {497198} [497276]: This form of REINDEX cannot be executed inside a transaction block.
(3503) {556403} [556477]: This form of CLUSTER cannot be executed inside a transaction block.
(3651) {579769} [579828]: This command cannot be executed inside a transaction block.
(3935) {623720} [623779]: This command cannot be executed inside a transaction block.
(4619) {732664} [732739]: NOTES DROP TABLESPACE cannot be executed inside a transaction block.
(5658) {899809} [899884]: NOTES CREATE DATABASE cannot be executed inside a transaction block.
*****************************************************************
========================= CLASS #57 =============================
(201) {33114} [33263]: Use RELEASE SAVEPOINT (RELEASE_SAVEPOINT(7)) to destroy a savepoint, keeping the effects of commands executed after it was established.
(1948) {304408} [304580]: NOTES Use RELEASE SAVEPOINT (RELEASE_SAVEPOINT(7)) to destroy a savepoint without discarding the effects of commands executed after it was established.
*****************************************************************
========================= CLASS #58 =============================
(204) {33411} [33875]: EXAMPLES To establish a savepoint and later undo the effects of all commands executed after it was established: BEGIN; INSERT INTO table1 VALUES (1); SAVEPOINT my_savepoint; INSERT INTO table1 VALUES (2); ROLLBACK TO SAVEPOINT my_savepoint; INSERT INTO table1 VALUES (3); COMMIT; The above transaction will insert the values 1 and 3, but not 2.
(205) {33884} [34199]: To establish and later destroy a savepoint: BEGIN; INSERT INTO table1 VALUES (3); SAVEPOINT my_savepoint; INSERT INTO table1 VALUES (4); RELEASE SAVEPOINT my_savepoint; COMMIT; The above transaction will insert both 3 and 4.
(5546) {883644} [883975]: EXAMPLES To establish and later destroy a savepoint: BEGIN; INSERT INTO table1 VALUES (3); SAVEPOINT my_savepoint; INSERT INTO table1 VALUES (4); RELEASE SAVEPOINT my_savepoint; COMMIT; The above transaction will insert both 3 and 4.
*****************************************************************
========================= CLASS #59 =============================
(210) {34698} [38226]: SEE ALSO BEGIN(7), COMMIT(7), RELEASE SAVEPOINT (RELEASE_SAVEPOINT(7)), ROLLBACK(7), ROLLBACK TO SAVEPOINT (ROLLBACK_TO_SAVEPOINT(7)) PostgreSQL 9.6.1 2016 SAVEPOINT(7) ALTER TABLE(7) PostgreSQL 9.6.1 Documentation ALTER TABLE(7) NAME ALTER_TABLE - change the definition of a table SYNOPSIS ALTER TABLE [ IF EXISTS ] [ ONLY ] name [ * ] action [, ... ] ALTER TABLE [ IF EXISTS ] [ ONLY ] name [ * ] RENAME [ COLUMN ] column_name TO new_column_name ALTER TABLE [ IF EXISTS ] [ ONLY ] name [ * ] RENAME CONSTRAINT constraint_name TO new_constraint_name ALTER TABLE [ IF EXISTS ] name RENAME TO new_name ALTER TABLE [ IF EXISTS ] name SET SCHEMA new_schema ALTER TABLE ALL IN TABLESPACE name [ OWNED BY role_name [, ... ] ] SET TABLESPACE new_tablespace [ NOWAIT ] where action is one of: ADD [ COLUMN ] [ IF NOT EXISTS ] column_name data_type [ COLLATE collation ] [ column_constraint [ ... ] ] DROP [ COLUMN ] [ IF EXISTS ] column_name [ RESTRICT | CASCADE ] ALTER [ COLUMN ] column_name [ SET DATA ] TYPE data_type [ COLLATE collation ] [ USING expression ] ALTER [ COLUMN ] column_name SET DEFAULT expression ALTER [ COLUMN ] column_name DROP DEFAULT ALTER [ COLUMN ] column_name { SET | DROP } NOT NULL ALTER [ COLUMN ] column_name SET STATISTICS integer ALTER [ COLUMN ] column_name SET ( attribute_option = value [, ... ] ) ALTER [ COLUMN ] column_name RESET ( attribute_option [, ... ] ) ALTER [ COLUMN ] column_name SET STORAGE { PLAIN | EXTERNAL | EXTENDED | MAIN } ADD table_constraint [ NOT VALID ] ADD table_constraint_using_index ALTER CONSTRAINT constraint_name [ DEFERRABLE | NOT DEFERRABLE ] [ INITIALLY DEFERRED | INITIALLY IMMEDIATE ] VALIDATE CONSTRAINT constraint_name DROP CONSTRAINT [ IF EXISTS ] constraint_name [ RESTRICT | CASCADE ] DISABLE TRIGGER [ trigger_name | ALL | USER ] ENABLE TRIGGER [ trigger_name | ALL | USER ] ENABLE REPLICA TRIGGER trigger_name ENABLE ALWAYS TRIGGER trigger_name DISABLE RULE rewrite_rule_name ENABLE RULE rewrite_rule_name ENABLE REPLICA RULE rewrite_rule_name ENABLE ALWAYS RULE rewrite_rule_name DISABLE ROW LEVEL SECURITY ENABLE ROW LEVEL SECURITY FORCE ROW LEVEL SECURITY NO FORCE ROW LEVEL SECURITY CLUSTER ON index_name SET WITHOUT CLUSTER SET WITH OIDS SET WITHOUT OIDS SET TABLESPACE new_tablespace SET { LOGGED | UNLOGGED } SET ( storage_parameter = value [, ... ] ) RESET ( storage_parameter [, ... ] ) INHERIT parent_table NO INHERIT parent_table OF type_name NOT OF OWNER TO { new_owner | CURRENT_USER | SESSION_USER } REPLICA IDENTITY { DEFAULT | USING INDEX index_name | FULL | NOTHING } and table_constraint_using_index is: [ CONSTRAINT constraint_name ] { UNIQUE | PRIMARY KEY } USING INDEX index_name [ DEFERRABLE | NOT DEFERRABLE ] [ INITIALLY DEFERRED | INITIALLY IMMEDIATE ] DESCRIPTION ALTER TABLE changes the definition of an existing table.
(235) {41080} [41223]: SET ( attribute_option = value [, ... ] ) RESET ( attribute_option [, ... ] ) This form sets or resets per-attribute options.
(327) {53481} [53598]: SET ( storage_parameter = value [, ... ] ) This form changes one or more storage parameters for the table.
(334) {54437} [54551]: RESET ( storage_parameter [, ... ] ) This form resets one or more storage parameters to their defaults.
(1124) {174746} [177082]: SEE ALSO CREATE TABLESPACE (CREATE_TABLESPACE(7)), DROP TABLESPACE (DROP_TABLESPACE(7)) PostgreSQL 9.6.1 2016 ALTER TABLESPACE(7) ALTER FOREIGN TABLE(7) PostgreSQL 9.6.1 Documentation ALTER FOREIGN TABLE(7) NAME ALTER_FOREIGN_TABLE - change the definition of a foreign table SYNOPSIS ALTER FOREIGN TABLE [ IF EXISTS ] [ ONLY ] name [ * ] action [, ... ] ALTER FOREIGN TABLE [ IF EXISTS ] [ ONLY ] name [ * ] RENAME [ COLUMN ] column_name TO new_column_name ALTER FOREIGN TABLE [ IF EXISTS ] name RENAME TO new_name ALTER FOREIGN TABLE [ IF EXISTS ] name SET SCHEMA new_schema where action is one of: ADD [ COLUMN ] column_name data_type [ COLLATE collation ] [ column_constraint [ ... ] ] DROP [ COLUMN ] [ IF EXISTS ] column_name [ RESTRICT | CASCADE ] ALTER [ COLUMN ] column_name [ SET DATA ] TYPE data_type [ COLLATE collation ] ALTER [ COLUMN ] column_name SET DEFAULT expression ALTER [ COLUMN ] column_name DROP DEFAULT ALTER [ COLUMN ] column_name { SET | DROP } NOT NULL ALTER [ COLUMN ] column_name SET STATISTICS integer ALTER [ COLUMN ] column_name SET ( attribute_option = value [, ... ] ) ALTER [ COLUMN ] column_name RESET ( attribute_option [, ... ] ) ALTER [ COLUMN ] column_name SET STORAGE { PLAIN | EXTERNAL | EXTENDED | MAIN } ALTER [ COLUMN ] column_name OPTIONS ( [ ADD | SET | DROP ] option ['value'] [, ... ]) ADD table_constraint [ NOT VALID ] VALIDATE CONSTRAINT constraint_name DROP CONSTRAINT [ IF EXISTS ] constraint_name [ RESTRICT | CASCADE ] DISABLE TRIGGER [ trigger_name | ALL | USER ] ENABLE TRIGGER [ trigger_name | ALL | USER ] ENABLE REPLICA TRIGGER trigger_name ENABLE ALWAYS TRIGGER trigger_name SET WITH OIDS SET WITHOUT OIDS INHERIT parent_table NO INHERIT parent_table OWNER TO { new_owner | CURRENT_USER | SESSION_USER } OPTIONS ( [ ADD | SET | DROP ] option ['value'] [, ... ]) DESCRIPTION ALTER FOREIGN TABLE changes the definition of an existing foreign table.
(1138) {178658} [178801]: SET ( attribute_option = value [, ... ] ) RESET ( attribute_option [, ... ] ) This form sets or resets per-attribute options.
(1888) {293837} [295542]: SEE ALSO ALTER TEXT SEARCH TEMPLATE (ALTER_TEXT_SEARCH_TEMPLATE(7)), DROP TEXT SEARCH TEMPLATE (DROP_TEXT_SEARCH_TEMPLATE(7)) PostgreSQL 9.6.1 2016 CREATE TEXT SEARCH TEMPLATE(7) ALTER MATERIALIZED VIEW(PostgreSQL 9.6.1 DocumentatiALTER MATERIALIZED VIEW(7) NAME ALTER_MATERIALIZED_VIEW - change the definition of a materialized view SYNOPSIS ALTER MATERIALIZED VIEW [ IF EXISTS ] name action [, ... ] ALTER MATERIALIZED VIEW name DEPENDS ON EXTENSION extension_name ALTER MATERIALIZED VIEW [ IF EXISTS ] name RENAME [ COLUMN ] column_name TO new_column_name ALTER MATERIALIZED VIEW [ IF EXISTS ] name RENAME TO new_name ALTER MATERIALIZED VIEW [ IF EXISTS ] name SET SCHEMA new_schema ALTER MATERIALIZED VIEW ALL IN TABLESPACE name [ OWNED BY role_name [, ... ] ] SET TABLESPACE new_tablespace [ NOWAIT ] where action is one of: ALTER [ COLUMN ] column_name SET STATISTICS integer ALTER [ COLUMN ] column_name SET ( attribute_option = value [, ... ] ) ALTER [ COLUMN ] column_name RESET ( attribute_option [, ... ] ) ALTER [ COLUMN ] column_name SET STORAGE { PLAIN | EXTERNAL | EXTENDED | MAIN } CLUSTER ON index_name SET WITHOUT CLUSTER SET ( storage_parameter = value [, ... ] ) RESET ( storage_parameter [, ... ] ) OWNER TO { new_owner | CURRENT_USER | SESSION_USER } SET TABLESPACE new_tablespace DESCRIPTION ALTER MATERIALIZED VIEW changes various auxiliary properties of an existing materialized view.
(3727) {591959} [592774]: SEE ALSO LISTEN(7), NOTIFY(7) PostgreSQL 9.6.1 2016 UNLISTEN(7) ALTER INDEX(7) PostgreSQL 9.6.1 Documentation ALTER INDEX(7) NAME ALTER_INDEX - change the definition of an index SYNOPSIS ALTER INDEX [ IF EXISTS ] name RENAME TO new_name ALTER INDEX [ IF EXISTS ] name SET TABLESPACE tablespace_name ALTER INDEX name DEPENDS ON EXTENSION extension_name ALTER INDEX [ IF EXISTS ] name SET ( storage_parameter = value [, ... ] ) ALTER INDEX [ IF EXISTS ] name RESET ( storage_parameter [, ... ] ) ALTER INDEX ALL IN TABLESPACE name [ OWNED BY role_name [, ... ] ] SET TABLESPACE new_tablespace [ NOWAIT ] DESCRIPTION ALTER INDEX changes the definition of an existing index.
(3738) {594142} [594292]: SET ( storage_parameter = value [, ... ] ) This form changes one or more index-method-specific storage parameters for the index.
(3741) {594607} [594754]: RESET ( storage_parameter [, ... ] ) This form resets one or more index-method-specific storage parameters to their defaults.
(4642) {736764} [737428]: SEE ALSO CREATE AGGREGATE (CREATE_AGGREGATE(7)), DROP AGGREGATE (DROP_AGGREGATE(7)) PostgreSQL 9.6.1 2016 ALTER AGGREGATE(7) ALTER SERVER(7) PostgreSQL 9.6.1 Documentation ALTER SERVER(7) NAME ALTER_SERVER - change the definition of a foreign server SYNOPSIS ALTER SERVER name [ VERSION 'new_version' ] [ OPTIONS ( [ ADD | SET | DROP ] option ['value'] [, ... ] ) ] ALTER SERVER name OWNER TO { new_owner | CURRENT_USER | SESSION_USER } ALTER SERVER name RENAME TO new_name DESCRIPTION ALTER SERVER changes the definition of a foreign server.
(5651) {899055} [899132]: See CREATE TABLESPACE (CREATE_TABLESPACE(7)) for more information.
*****************************************************************
========================= CLASS #60 =============================
(217) {38799} [38874]: DROP COLUMN [ IF EXISTS ] This form drops a column from a table.
(1127) {177510} [177593]: DROP COLUMN [ IF EXISTS ] This form drops a column from a foreign table.
*****************************************************************
========================= CLASS #61 =============================
(219) {38987} [39136]: You will need to say CASCADE if anything outside the table depends on the column, for example, foreign key references or views.
(1128) {177594} [177717]: You will need to say CASCADE if anything outside the table depends on the column; for example, views.
*****************************************************************
========================= CLASS #62 =============================
(220) {39137} [39224]: If IF EXISTS is specified and the column does not exist, no error is thrown.
(283) {47883} [47974]: If IF EXISTS is specified and the constraint does not exist, no error is thrown.
(645) {103828} [103918]: If IF EXISTS is specified and the attribute does not exist, no error is thrown.
(1129) {177718} [177805]: If IF EXISTS is specified and the column does not exist, no error is thrown.
(1151) {180269} [180371]: If IF EXISTS is specified and the constraint does not exist, no error is thrown.
(5357) {854477} [854568]: If IF EXISTS is specified and the constraint does not exist, no error is thrown.
*****************************************************************
========================= CLASS #63 =============================
(221) {39225} [39265]: In this case a notice is issued instead.
(284) {47986} [48026]: In this case a notice is issued instead.
(646) {103919} [103970]: In this case a notice is issued instead.
(1130) {177806} [177846]: In this case a notice is issued instead.
(1152) {180372} [180412]: In this case a notice is issued instead.
(5358) {854569} [854620]: In this case a notice is issued instead.
*****************************************************************
========================= CLASS #64 =============================
(222) {39274} [39349]: SET DATA TYPE This form changes the type of a column of a table.
(647) {103979} [104067]: SET DATA TYPE This form changes the type of an attribute of a composite type.
(1131) {177855} [177938]: SET DATA TYPE This form changes the type of a column of a foreign table.
*****************************************************************
========================= CLASS #65 =============================
(227) {40038} [40123]: SET/DROP DEFAULT These forms set or remove the default value for a column.
(1133) {178103} [178188]: SET/DROP DEFAULT These forms set or remove the default value for a column.
(1597) {251259} [251344]: SET/DROP DEFAULT These forms set or remove the default value for a column.
(5347) {853179} [853308]: There are several sub-forms: SET/DROP DEFAULT These forms set or remove the default value for a domain.
*****************************************************************
========================= CLASS #66 =============================
(228) {40124} [40267]: Default values only apply in subsequent INSERT or UPDATE commands; they do not cause rows already in the table to change.
(1134) {178189} [178332]: Default values only apply in subsequent INSERT or UPDATE commands; they do not cause rows already in the table to change.
*****************************************************************
========================= CLASS #67 =============================
(229) {40276} [40408]: SET/DROP NOT NULL These forms change whether a column is marked to allow null values or to reject null values.
(5349) {853461} [853593]: SET/DROP NOT NULL These forms change whether a domain is marked to allow NULL values or to reject NULL values.
*****************************************************************
========================= CLASS #68 =============================
(231) {40499} [40631]: SET STATISTICS This form sets the per-column statistics-gathering target for subsequent ANALYZE(7) operations.
(1136) {178435} [178567]: SET STATISTICS This form sets the per-column statistics-gathering target for subsequent ANALYZE(7) operations.
*****************************************************************
========================= CLASS #69 =============================
(233) {40825} [41004]: For more information on the use of statistics by the PostgreSQL query planner, refer to Section 14.2, "Statistics Used by the Planner", in the documentation.
(243) {42626} [42805]: For more information on the use of statistics by the PostgreSQL query planner, refer to Section 14.2, "Statistics Used by the Planner", in the documentation.
*****************************************************************
========================= CLASS #70 =============================
(234) {41017} [41071]: SET STATISTICS acquires a SHARE UPDATE EXCLUSIVE lock.
(244) {42818} [42899]: Changing per-attribute options acquires a SHARE UPDATE EXCLUSIVE lock.
(308) {51189} [51253]: Changing cluster options acquires a SHARE UPDATE EXCLUSIVE lock.
(311) {51483} [51547]: Changing cluster options acquires a SHARE UPDATE EXCLUSIVE lock.
*****************************************************************
========================= CLASS #71 =============================
(245) {42908} [42976]: SET STORAGE This form sets the storage mode for a column.
(1140) {178892} [178960]: SET STORAGE This form sets the storage mode for a column.
*****************************************************************
========================= CLASS #72 =============================
(253) {43801} [43881]: See Section 65.2, "TOAST", in the documentation for more information.
(3114) {495566} [495670]: See Section 24.2, "Routine Reindexing", in the documentation for more information.
(5666) {900931} [901020]: See Section 22.3, "Template Databases", in the documentation for more information.
*****************************************************************
========================= CLASS #73 =============================
(282) {47789} [47882]: DROP CONSTRAINT [ IF EXISTS ] This form drops the specified constraint on a table.
(1150) {180167} [180268]: DROP CONSTRAINT [ IF EXISTS ] This form drops the specified constraint on a foreign table.
(5356) {854395} [854476]: DROP CONSTRAINT [ IF EXISTS ] This form drops constraints on a domain.
*****************************************************************
========================= CLASS #74 =============================
(288) {48436} [48785]: One can disable or enable a single trigger specified by name, or all triggers on the table, or only user triggers (this option excludes internally generated constraint triggers such as those that are used to implement foreign key constraints or deferrable uniqueness and exclusion constraints).
(389) {60825} [61089]: (This requires superuser privilege if any of the triggers are internally generated constraint triggers such as those that are used to implement foreign key constraints or deferrable uniqueness and exclusion constraints.)
(390) {61098} [61369]: USER Disable or enable all triggers belonging to the table except for internally generated constraint triggers such as those that are used to implement foreign key constraints or deferrable uniqueness and exclusion constraints.
(1197) {185186} [185289]: (This requires superuser privilege if any of the triggers are internally generated triggers.
(1199) {185401} [185531]: USER Disable or enable all triggers belonging to the foreign table except for internally generated triggers.
*****************************************************************
========================= CLASS #75 =============================
(298) {50082} [50222]: DISABLE/ENABLE ROW LEVEL SECURITY These forms control the application of row security policies belonging to the table.
(302) {50568} [50741]: NO FORCE/FORCE ROW LEVEL SECURITY These forms control the application of row security policies belonging to the table when the user is the table owner.
*****************************************************************
========================= CLASS #76 =============================
(301) {50517} [50559]: See also CREATE POLICY (CREATE_POLICY(7)).
(305) {50969} [51022]: See also CREATE POLICY (CREATE_POLICY(7)).
(2828) {443235} [443295]: See CREATE POLICY (CREATE_POLICY(7)) for details.
(2830) {443374} [443434]: See CREATE POLICY (CREATE_POLICY(7)) for details.
*****************************************************************
========================= CLASS #77 =============================
(312) {51556} [51699]: SET WITH OIDS This form adds an oid system column to the table (see Section 5.4, "System Columns", in the documentation).
(1155) {180656} [180799]: SET WITH OIDS This form adds an oid system column to the table (see Section 5.4, "System Columns", in the documentation).
*****************************************************************
========================= CLASS #78 =============================
(313) {51700} [51757]: It does nothing if the table already has OIDs.
(1156) {180800} [180857]: It does nothing if the table already has OIDs.
*****************************************************************
========================= CLASS #79 =============================
(314) {51770} [51930]: Note that this is not equivalent to ADD COLUMN oid oid; that would add a normal column that happened to be named oid, not a system column.
(1158) {180976} [181136]: Note that this is not equivalent to ADD COLUMN oid oid; that would add a normal column that happened to be named oid, not a system column.
*****************************************************************
========================= CLASS #80 =============================
(315) {51939} [52022]: SET WITHOUT OIDS This form removes the oid system column from the table.
(1159) {181145} [181228]: SET WITHOUT OIDS This form removes the oid system column from the table.
*****************************************************************
========================= CLASS #81 =============================
(316) {52023} [52168]: This is exactly equivalent to DROP COLUMN oid RESTRICT, except that it will not complain if there is already no oid column.
(1160) {181229} [181374]: This is exactly equivalent to DROP COLUMN oid RESTRICT, except that it will not complain if there is already no oid column.
*****************************************************************
========================= CLASS #82 =============================
(317) {52177} [52369]: SET TABLESPACE This form changes the table's tablespace to the specified tablespace and moves the data file(s) associated with the table to the new tablespace.
(3730) {592941} [593133]: SET TABLESPACE This form changes the index's tablespace to the specified tablespace and moves the data file(s) associated with the index to the new tablespace.
*****************************************************************
========================= CLASS #83 =============================
(319) {52511} [52702]: All tables in the current database in a tablespace can be moved by using the ALL IN TABLESPACE form, which will lock all tables to be moved first and then move each one.
(3732) {593255} [593453]: All indexes in the current database in a tablespace can be moved by using the ALL IN TABLESPACE form, which will lock all indexes to be moved and then move each one.
*****************************************************************
========================= CLASS #84 =============================
(320) {52703} [52816]: This form also supports OWNED BY, which will only move tables owned by the roles specified.
(3733) {593454} [593557]: This form also supports OWNED BY, which will only move indexes owned by the roles specified.
*****************************************************************
========================= CLASS #85 =============================
(321) {52817} [52965]: If the NOWAIT option is specified then the command will fail if it is unable to acquire all of the locks required immediately.
(3734) {593558} [593706]: If the NOWAIT option is specified then the command will fail if it is unable to acquire all of the locks required immediately.
*****************************************************************
========================= CLASS #86 =============================
(322) {52966} [53119]: Note that system catalogs are not moved by this command, use ALTER DATABASE or explicit ALTER TABLE invocations instead if desired.
(3735) {593707} [593864]: Note that system catalogs will not be moved by this command, use ALTER DATABASE or explicit ALTER INDEX invocations instead if desired.
*****************************************************************
========================= CLASS #87 =============================
(324) {53230} [53291]: See also CREATE TABLESPACE (CREATE_TABLESPACE(7)).
(3736) {593876} [593926]: See also CREATE TABLESPACE (CREATE_TABLESPACE(7)).
*****************************************************************
========================= CLASS #88 =============================
(329) {53674} [53876]: Note that the table contents will not be modified immediately by this command; depending on the parameter you might need to rewrite the table to get the desired effects.
(3740) {594380} [594598]: Note that the index contents will not be modified immediately by this command; depending on the parameter you might need to rebuild the index with REINDEX(7) to get the desired effects.
*****************************************************************
========================= CLASS #89 =============================
(335) {54563} [54648]: As with SET, a table rewrite might be needed to update the table entirely.
(3742) {594755} [594834]: As with SET, a REINDEX might be needed to update the index entirely.
*****************************************************************
========================= CLASS #90 =============================
(336) {54657} [54777]: INHERIT parent_table This form adds the target table as a new child of the specified parent table.
(1161) {181383} [181511]: INHERIT parent_table This form adds the target foreign table as a new child of the specified parent table.
*****************************************************************
========================= CLASS #91 =============================
(340) {55221} [55569]: There must also be matching child-table constraints for all CHECK constraints of the parent, except those marked non-inheritable (that is, created with ALTER TABLE ... ADD CONSTRAINT ... NO INHERIT) in the parent, which are ignored; all child-table constraints matched must not be marked non-inheritable.
(1451) {229457} [229472]: ALTER TABLE ...
*****************************************************************
========================= CLASS #92 =============================
(342) {55716} [55853]: NO INHERIT parent_table This form removes the target table from the list of children of the specified parent table.
(1163) {181602} [181747]: NO INHERIT parent_table This form removes the target foreign table from the list of children of the specified parent table.
*****************************************************************
========================= CLASS #93 =============================
(349) {56511} [56655]: OWNER This form changes the owner of the table, sequence, view, materialized view, or foreign table to the specified user.
(648) {104076} [104133]: OWNER This form changes the owner of the type.
(1164) {181756} [181855]: OWNER This form changes the owner of the foreign table to the specified user.
(1805) {283547} [283596]: The third form changes the owner of the database.
(5361) {854939} [855020]: OWNER This form changes the owner of the domain to the specified user.
*****************************************************************
========================= CLASS #94 =============================
(358) {57589} [57838]: RENAME The RENAME forms change the name of a table (or an index, sequence, view, materialized view, or foreign table), the name of an individual column in a table, or the name of a constraint of the table.
(1170) {182373} [182509]: RENAME The RENAME forms change the name of a foreign table or the name of an individual column in a foreign table.
*****************************************************************
========================= CLASS #95 =============================
(359) {57839} [57877]: There is no effect on the stored data.
(3729) {592883} [592932]: There is no effect on the stored data.
*****************************************************************
========================= CLASS #96 =============================
(362) {58074} [58215]: All the actions except RENAME, SET TABLESPACE and SET SCHEMA can be combined into a list of multiple alterations to apply in parallel.
(659) {105214} [105357]: The ADD ATTRIBUTE, DROP ATTRIBUTE, and ALTER ATTRIBUTE actions can be combined into a list of multiple alterations to apply in parallel.
(1172) {182603} [182728]: All the actions except RENAME and SET SCHEMA can be combined into a list of multiple alterations to apply in parallel.
*****************************************************************
========================= CLASS #97 =============================
(363) {58216} [58342]: For example, it is possible to add several columns and/or alter the type of several columns in a single command.
(660) {105358} [105490]: For example, it is possible to add several attributes and/or alter the type of several attributes in a single command.
(1173) {182729} [182855]: For example, it is possible to add several columns and/or alter the type of several columns in a single command.
*****************************************************************
========================= CLASS #98 =============================
(365) {58454} [58496]: You must own the table to use ALTER TABLE.
(1176) {183041} [183091]: You must own the table to use ALTER FOREIGN TABLE.
*****************************************************************
========================= CLASS #99 =============================
(366) {58497} [58626]: To change the schema or tablespace of a table, you must also have CREATE privilege on the new schema or tablespace.
(566) {91138} [91230]: To change a sequence's schema, you must also have CREATE privilege on the new schema.
(662) {105540} [105633]: To change the schema of a type, you must also have CREATE privilege on the new schema.
(1177) {183092} [183201]: To change the schema of a foreign table, you must also have CREATE privilege on the new schema.
(1590) {250570} [250658]: To change a view's schema, you must also have CREATE privilege on the new schema.
(1890) {295618} [295726]: To change a materialized view's schema, you must also have CREATE privilege on the new schema.
(4623) {733892} [734007]: To change the schema of an aggregate function, you must also have CREATE privilege on the new schema.
(5285) {843126} [843218]: To change a function's schema, you must also have CREATE privilege on the new schema.
(5366) {855309} [855404]: To change the schema of a domain, you must also have CREATE privilege on the new schema.
*****************************************************************
========================= CLASS #100 =============================
(368) {58724} [58890]: To alter the owner, you must also be a direct or indirect member of the new owning role, and that role must have CREATE privilege on the table's schema.
(567) {91231} [91407]: To alter the owner, you must also be a direct or indirect member of the new owning role, and that role must have CREATE privilege on the sequence's schema.
(663) {105634} [105806]: To alter the owner, you must also be a direct or indirect member of the new owning role, and that role must have CREATE privilege on the type's schema.
(1113) {173359} [173454]: To alter the owner, you must also be a direct or indirect member of the new owning role.
(1178) {183202} [183368]: To alter the owner, you must also be a direct or indirect member of the new owning role, and that role must have CREATE privilege on the table's schema.
(1214) {187792} [187970]: To alter the owner, you must also be a direct or indirect member of the new owning role, and that role must have CREATE privilege on the conversion's schema.
(1591) {250659} [250824]: To alter the owner, you must also be a direct or indirect member of the new owning role, and that role must have CREATE privilege on the view's schema.
(1612) {254002} [254171]: To alter the owner, you must also be a direct or indirect member of the new owning role, and that role must have CREATE privilege on the operator's schema.
(1806) {283597} [283762]: To alter the owner, you must own the database and also be a direct or indirect member of the new owning role, and you must have the CREATEDB privilege.
(1891) {295727} [295905]: To alter the owner, you must also be a direct or indirect member of the new owning role, and that role must have CREATE privilege on the materialized view's schema.
(2470) {384216} [384398]: To alter the owner, you must also be a direct or indirect member of the new owning role, and that role must have CREATE privilege on the operator class's schema.
(2701) {422134} [422304]: To alter the owner, you must also be a direct or indirect member of the new owning role, and that role must have CREATE privilege on the collation's schema.
(4624) {734008} [734187]: To alter the owner, you must also be a direct or indirect member of the new owning role, and that role must have CREATE privilege on the aggregate function's schema.
(4646) {737685} [737898]: Additionally to alter the owner, you must own the server and also be a direct or indirect member of the new owning role, and you must have USAGE privilege on the server's foreign-data wrapper.
(5286) {843219} [843395]: To alter the owner, you must also be a direct or indirect member of the new owning role, and that role must have CREATE privilege on the function's schema.
(5367) {855405} [855579]: To alter the owner, you must also be a direct or indirect member of the new owning role, and that role must have CREATE privilege on the domain's schema.
(5585) {889923} [890082]: To alter the owner, you must also be a direct or indirect member of the new owning role, and you must have the CREATE privilege for the database.
*****************************************************************
========================= CLASS #101 =============================
(369) {58891} [59030]: (These restrictions enforce that altering the owner doesn't do anything you couldn't do by dropping and recreating the table.
(568) {91408} [91543]: (These restrictions enforce that altering the owner doesn't do anything you couldn't do by dropping and recreating the sequence.
(664) {105807} [105938]: (These restrictions enforce that altering the owner doesn't do anything you couldn't do by dropping and recreating the type.
(1179) {183369} [183508]: (These restrictions enforce that altering the owner doesn't do anything you couldn't do by dropping and recreating the table.
(1215) {187971} [188108]: (These restrictions enforce that altering the owner doesn't do anything you couldn't do by dropping and recreating the conversion.
(1592) {250825} [250963]: (These restrictions enforce that altering the owner doesn't do anything you couldn't do by dropping and recreating the view.
(1613) {254179} [254314]: (These restrictions enforce that altering the owner doesn't do anything you couldn't do by dropping and recreating the operator.
(1892) {295906} [296057]: (These restrictions enforce that altering the owner doesn't do anything you couldn't do by dropping and recreating the materialized view.
(2471) {384399} [384547]: (These restrictions enforce that altering the owner doesn't do anything you couldn't do by dropping and recreating the operator class.
(2702) {422312} [422448]: (These restrictions enforce that altering the owner doesn't do anything you couldn't do by dropping and recreating the collation.
(4625) {734188} [734340]: (These restrictions enforce that altering the owner doesn't do anything you couldn't do by dropping and recreating the aggregate function.
(5287) {843396} [843531]: (These restrictions enforce that altering the owner doesn't do anything you couldn't do by dropping and recreating the function.
(5368) {855580} [855713]: (These restrictions enforce that altering the owner doesn't do anything you couldn't do by dropping and recreating the domain.
*****************************************************************
========================= CLASS #102 =============================
(370) {59031} [59100]: However, a superuser can alter ownership of any table anyway.)
(569) {91551} [91616]: However, a superuser can alter ownership of any sequence anyway.)
(665) {105939} [106007]: However, a superuser can alter ownership of any type anyway.)
(1180) {183509} [183578]: However, a superuser can alter ownership of any table anyway.)
(1216) {188116} [188183]: However, a superuser can alter ownership of any conversion anyway.)
(1593) {250964} [251032]: However, a superuser can alter ownership of any view anyway.)
(1614) {254315} [254387]: However, a superuser can alter ownership of any operator anyway.)
(1893) {296058} [296126]: However, a superuser can alter ownership of any view anyway.)
(2472) {384548} [384626]: However, a superuser can alter ownership of any operator class anyway.)
(2703) {422449} [422522]: However, a superuser can alter ownership of any collation anyway.)
(4626) {734341} [734423]: However, a superuser can alter ownership of any aggregate function anyway.)
(5288) {843539} [843604]: However, a superuser can alter ownership of any function anyway.)
(5369) {855721} [855784]: However, a superuser can alter ownership of any domain anyway.)
*****************************************************************
========================= CLASS #103 =============================
(371) {59101} [59228]: To add a column or alter a column type or use the OF clause, you must also have USAGE privilege on the data type.
(666) {106008} [106122]: To add an attribute or alter an attribute type, you must also have USAGE privilege on the data type.
(1181) {183579} [183678]: To add a column or alter a column type, you must also have USAGE privilege on the data type.
*****************************************************************
========================= CLASS #104 =============================
(372) {59230} [59319]: PARAMETERS IF EXISTS Do not throw an error if the table does not exist.
(494) {79534} [79631]: PARAMETERS IF EXISTS Do not throw an error if the access method does not exist.
(532) {85605} [85707]: PARAMETERS IF EXISTS Do not throw an error if the text search parser does not exist.
(571) {91728} [91802]: IF EXISTS Do not throw an error if the sequence does not exist.
(612) {97342} [97448]: PARAMETERS IF EXISTS Do not throw an error if the text search dictionary does not exist.
(997) {155050} [155146]: PARAMETERS IF EXISTS Do not throw an error if the user mapping does not exist.
(1044) {162527} [162615]: PARAMETERS IF EXISTS Do not throw an error if the cast does not exist.
(1052) {163647} [163748]: PARAMETERS IF EXISTS Do not throw an error if the materialized view does not exist.
(1224) {189381} [189474]: PARAMETERS IF EXISTS Do not throw an error if the collation does not exist.
(1453) {229615} [229705]: PARAMETERS IF EXISTS Do not throw an error if the policy does not exist.
(1595) {251136} [251206]: IF EXISTS Do not throw an error if the view does not exist.
(1841) {287629} [287721]: PARAMETERS IF EXISTS Do not throw an error if the database does not exist.
(1860) {290581} [290685]: PARAMETERS IF EXISTS Do not throw an error if the foreign-data wrapper does not exist.
(1908) {298252} [298344]: PARAMETERS IF EXISTS Do not throw an error if the function does not exist.
(1924) {300360} [300457]: PARAMETERS IF EXISTS Do not throw an error if the foreign table does not exist.
(1936) {302786} [302874]: PARAMETERS IF EXISTS Do not throw an error if the rule does not exist.
(2193) {342643} [342736]: PARAMETERS IF EXISTS Do not throw an error if the transform does not exist.
(2260) {352879} [352967]: PARAMETERS IF EXISTS Do not throw an error if the role does not exist.
(2482) {385801} [385894]: PARAMETERS IF EXISTS Do not throw an error if the extension does not exist.
(2661) {415667} [415755]: PARAMETERS IF EXISTS Do not throw an error if the view does not exist.
(2690) {420423} [420527]: PARAMETERS IF EXISTS Do not throw an error if the text search template does not exist.
(2757) {430387} [430484]: PARAMETERS IF EXISTS Do not throw an error if the event trigger does not exist.
(2835) {444305} [444397]: PARAMETERS IF EXISTS Do not throw an error if the language does not exist.
(2887) {456341} [456434]: PARAMETERS IF EXISTS Do not throw an error if the aggregate does not exist.
(2961) {471401} [471489]: PARAMETERS IF EXISTS Do not throw an error if the type does not exist.
(3059) {485888} [485978]: PARAMETERS IF EXISTS Do not throw an error if the domain does not exist.
(3090) {492110} [492230]: PARAMETERS IF EXISTS Do not throw an error if the text search configuration does not exist.
(3231) {511665} [511754]: PARAMETERS IF EXISTS Do not throw an error if the table does not exist.
(3707) {589217} [589307]: PARAMETERS IF EXISTS Do not throw an error if the schema does not exist.
(3743) {594836} [594925]: PARAMETERS IF EXISTS Do not throw an error if the index does not exist.
(3923) {622091} [622181]: PARAMETERS IF EXISTS Do not throw an error if the server does not exist.
(4063) {642481} [642580]: PARAMETERS IF EXISTS Do not throw an error if the operator family does not exist.
(4077) {644582} [644680]: PARAMETERS IF EXISTS Do not throw an error if the operator class does not exist.
(4616) {732474} [732568]: PARAMETERS IF EXISTS Do not throw an error if the tablespace does not exist.
(4660) {739569} [739660]: PARAMETERS IF EXISTS Do not throw an error if the trigger does not exist.
(4678) {741905} [741976]: IF EXISTS Do not throw an error if the index does not exist.
(5576) {888521} [888615]: PARAMETERS IF EXISTS Do not throw an error if the conversion does not exist.
(5748) {913299} [913391]: PARAMETERS IF EXISTS Do not throw an error if the operator does not exist.
(5761) {915120} [915212]: PARAMETERS IF EXISTS Do not throw an error if the sequence does not exist.
*****************************************************************
========================= CLASS #105 =============================
(373) {59320} [59363]: A notice is issued in this case.
(495) {79632} [79675]: A notice is issued in this case.
(533) {85708} [85751]: A notice is issued in this case.
(572) {91803} [91846]: A notice is issued in this case.
(613) {97460} [97492]: A notice is issued in this case.
(963) {149980} [150012]: A notice is issued in this case.
(998) {155147} [155190]: A notice is issued in this case.
(1045) {162616} [162659]: A notice is issued in this case.
(1053) {163749} [163792]: A notice is issued in this case.
(1175) {182993} [183032]: A notice is issued in this case.
(1225) {189475} [189518]: A notice is issued in this case.
(1454) {229706} [229749]: A notice is issued in this case.
(1596) {251207} [251250]: A notice is issued in this case.
(1687) {266614} [266646]: A notice is issued in this case.
(1842) {287722} [287765]: A notice is issued in this case.
(1861) {290686} [290729]: A notice is issued in this case.
(1909) {298345} [298388]: A notice is issued in this case.
(1925) {300458} [300501]: A notice is issued in this case.
(1937) {302875} [302918]: A notice is issued in this case.
(2194) {342737} [342780]: A notice is issued in this case.
(2261) {352968} [353011]: A notice is issued in this case.
(2483) {385895} [385938]: A notice is issued in this case.
(2662) {415756} [415799]: A notice is issued in this case.
(2691) {420528} [420571]: A notice is issued in this case.
(2721) {425158} [425190]: A notice is issued in this case.
(2758) {430485} [430528]: A notice is issued in this case.
(2836) {444398} [444441]: A notice is issued in this case.
(2888) {456435} [456478]: A notice is issued in this case.
(2962) {471490} [471533]: A notice is issued in this case.
(3060) {485979} [486022]: A notice is issued in this case.
(3091) {492231} [492263]: A notice is issued in this case.
(3232) {511755} [511798]: A notice is issued in this case.
(3537) {562540} [562572]: A notice is issued in this case.
(3708) {589308} [589351]: A notice is issued in this case.
(3744) {594926} [594969]: A notice is issued in this case.
(3764) {597871} [597903]: A notice is issued in this case.
(3924) {622182} [622225]: A notice is issued in this case.
(4064) {642581} [642624]: A notice is issued in this case.
(4078) {644681} [644724]: A notice is issued in this case.
(4617) {732569} [732612]: A notice is issued in this case.
(4661) {739661} [739704]: A notice is issued in this case.
(4679) {741977} [742020]: A notice is issued in this case.
(4701) {745094} [745126]: A notice is issued in this case.
(5040) {802482} [802514]: A notice is issued in this case.
(5577) {888616} [888659]: A notice is issued in this case.
(5749) {913392} [913435]: A notice is issued in this case.
(5762) {915213} [915256]: A notice is issued in this case.
*****************************************************************
========================= CLASS #106 =============================
(375) {59469} [59551]: If ONLY is specified before the table name, only that table is altered.
(1183) {183801} [183883]: If ONLY is specified before the table name, only that table is altered.
(2632) {411541} [411622]: If ONLY is specified before the table name, only that table is locked.
(4273) {674974} [675056]: If ONLY is specified before the table name, only that table is scanned.
(5705) {907043} [907138]: If ONLY is specified before the table name, only that table is truncated.
*****************************************************************
========================= CLASS #107 =============================
(376) {59552} [59650]: If ONLY is not specified, the table and all its descendant tables (if any) are altered.
(1184) {183884} [183982]: If ONLY is not specified, the table and all its descendant tables (if any) are altered.
(2633) {411623} [411720]: If ONLY is not specified, the table and all its descendant tables (if any) are locked.
(4274) {675057} [675155]: If ONLY is not specified, the table and all its descendant tables (if any) are scanned.
(5706) {907139} [907239]: If ONLY is not specified, the table and all its descendant tables (if any) are truncated.
*****************************************************************
========================= CLASS #108 =============================
(377) {59651} [59784]: Optionally, * can be specified after the table name to explicitly indicate that descendant tables are included.
(1185) {183983} [184116]: Optionally, * can be specified after the table name to explicitly indicate that descendant tables are included.
(2634) {411721} [411854]: Optionally, * can be specified after the table name to explicitly indicate that descendant tables are included.
(4104) {648856} [648978]: Optionally, * can be specified after the table name to explicitly indicate that descendant tables are included.
(4167) {660217} [660339]: Optionally, * can be specified after the table name to explicitly indicate that descendant tables are included.
(4275) {675156} [675289]: Optionally, * can be specified after the table name to explicitly indicate that descendant tables are included.
(5707) {907240} [907373]: Optionally, * can be specified after the table name to explicitly indicate that descendant tables are included.
*****************************************************************
========================= CLASS #109 =============================
(378) {59793} [59849]: column_name Name of a new or existing column.
(383) {60160} [60224]: constraint_name Name of a new or existing constraint.
(1186) {184125} [184181]: column_name Name of a new or existing column.
(1898) {296733} [296789]: column_name Name of a new or existing column.
*****************************************************************
========================= CLASS #110 =============================
(379) {59858} [59917]: new_column_name New name for an existing column.
(1187) {184190} [184249]: new_column_name New name for an existing column.
(1900) {296913} [296972]: new_column_name New name for an existing column.
*****************************************************************
========================= CLASS #111 =============================
(380) {59926} [59969]: new_name New name for the table.
(1188) {184258} [184301]: new_name New name for the table.
*****************************************************************
========================= CLASS #112 =============================
(381) {59978} [60079]: data_type Data type of the new column, or new data type for an existing column.
(1189) {184310} [184411]: data_type Data type of the new column, or new data type for an existing column.
*****************************************************************
========================= CLASS #113 =============================
(382) {60088} [60151]: table_constraint New table constraint for the table.
(1190) {184420} [184491]: table_constraint New table constraint for the foreign table.
*****************************************************************
========================= CLASS #114 =============================
(384) {60233} [60522]: CASCADE Automatically drop objects that depend on the dropped column or constraint (for example, views referencing the column), and in turn all objects that depend on those objects (see Section 5.13, "Dependency Tracking", in the documentation).
(497) {79747} [80036]: CASCADE Automatically drop objects that depend on the access method (such as operator classes, operator families, and indexes), and in turn all objects that depend on those objects (see Section 5.13, "Dependency Tracking", in the documentation).
(535) {85869} [86093]: CASCADE Automatically drop objects that depend on the text search parser, and in turn all objects that depend on those objects (see Section 5.13, "Dependency Tracking", in the documentation).
(615) {97614} [97842]: CASCADE Automatically drop objects that depend on the text search dictionary, and in turn all objects that depend on those objects (see Section 5.13, "Dependency Tracking", in the documentation).
(1055) {163911} [164198]: CASCADE Automatically drop objects that depend on the materialized view (such as other materialized views, or regular views), and in turn all objects that depend on those objects (see Section 5.13, "Dependency Tracking", in the documentation).
(1192) {184575} [184864]: CASCADE Automatically drop objects that depend on the dropped column or constraint (for example, views referencing the column), and in turn all objects that depend on those objects (see Section 5.13, "Dependency Tracking", in the documentation).
(1228) {189633} [189848]: CASCADE Automatically drop objects that depend on the collation, and in turn all objects that depend on those objects (see Section 5.13, "Dependency Tracking", in the documentation).
(1863) {290808} [291082]: CASCADE Automatically drop objects that depend on the foreign-data wrapper (such as foreign tables and servers), and in turn all objects that depend on those objects (see Section 5.13, "Dependency Tracking", in the documentation).
(1918) {299225} [299482]: CASCADE Automatically drop objects that depend on the function (such as operators or triggers), and in turn all objects that depend on those objects (see Section 5.13, "Dependency Tracking", in the documentation).
(1927) {300614} [300849]: CASCADE Automatically drop objects that depend on the foreign table (such as views), and in turn all objects that depend on those objects (see Section 5.13, "Dependency Tracking", in the documentation).
(1940) {303108} [303318]: CASCADE Automatically drop objects that depend on the rule, and in turn all objects that depend on those objects (see Section 5.13, "Dependency Tracking", in the documentation).
(2197) {342934} [343149]: CASCADE Automatically drop objects that depend on the transform, and in turn all objects that depend on those objects (see Section 5.13, "Dependency Tracking", in the documentation).
(2485) {386007} [386222]: CASCADE Automatically drop objects that depend on the extension, and in turn all objects that depend on those objects (see Section 5.13, "Dependency Tracking", in the documentation).
(2664) {415894} [416126]: CASCADE Automatically drop objects that depend on the view (such as other views), and in turn all objects that depend on those objects (see Section 5.13, "Dependency Tracking", in the documentation).
(2693) {420691} [420917]: CASCADE Automatically drop objects that depend on the text search template, and in turn all objects that depend on those objects (see Section 5.13, "Dependency Tracking", in the documentation).
(2760) {430602} [430815]: CASCADE Automatically drop objects that depend on the trigger, and in turn all objects that depend on those objects (see Section 5.13, "Dependency Tracking", in the documentation).
(2839) {444601} [444862]: CASCADE Automatically drop objects that depend on the language (such as functions in the language), and in turn all objects that depend on those objects (see Section 5.13, "Dependency Tracking", in the documentation).
(2897) {457314} [457574]: CASCADE Automatically drop objects that depend on the aggregate function (such as views using it), and in turn all objects that depend on those objects (see Section 5.13, "Dependency Tracking", in the documentation).
(2964) {471633} [471904]: CASCADE Automatically drop objects that depend on the type (such as table columns, functions, and operators), and in turn all objects that depend on those objects (see Section 5.13, "Dependency Tracking", in the documentation).
(3062) {486117} [486353]: CASCADE Automatically drop objects that depend on the domain (such as table columns), and in turn all objects that depend on those objects (see Section 5.13, "Dependency Tracking", in the documentation).
(3093) {492388} [492619]: CASCADE Automatically drop objects that depend on the text search configuration, and in turn all objects that depend on those objects (see Section 5.13, "Dependency Tracking", in the documentation).
(3234) {511892} [512119]: CASCADE Automatically drop objects that depend on the table (such as views), and in turn all objects that depend on those objects (see Section 5.13, "Dependency Tracking", in the documentation).
(3711) {589478} [589662]: that are contained in the schema, and in turn all objects that depend on those objects (see Section 5.13, "Dependency Tracking", in the documentation).
(3926) {622290} [622526]: CASCADE Automatically drop objects that depend on the server (such as user mappings), and in turn all objects that depend on those objects (see Section 5.13, "Dependency Tracking", in the documentation).
(4067) {642835} [643056]: CASCADE Automatically drop objects that depend on the operator family, and in turn all objects that depend on those objects (see Section 5.13, "Dependency Tracking", in the documentation).
(4081) {644933} [645171]: CASCADE Automatically drop objects that depend on the operator class (such as indexes), and in turn all objects that depend on those objects (see Section 5.13, "Dependency Tracking", in the documentation).
(4664) {739899} [740112]: CASCADE Automatically drop objects that depend on the trigger, and in turn all objects that depend on those objects (see Section 5.13, "Dependency Tracking", in the documentation).
(4681) {742115} [742326]: CASCADE Automatically drop objects that depend on the index, and in turn all objects that depend on those objects (see Section 5.13, "Dependency Tracking", in the documentation).
(4878) {774864} [775086]: CASCADE Automatically drop objects that depend on the affected objects, and in turn all objects that depend on those objects (see Section 5.13, "Dependency Tracking", in the documentation).
(5374) {856157} [856373]: CASCADE Automatically drop objects that depend on the constraint, and in turn all objects that depend on those objects (see Section 5.13, "Dependency Tracking", in the documentation).
(5753) {913803} [914053]: CASCADE Automatically drop objects that depend on the operator (such as views using it), and in turn all objects that depend on those objects (see Section 5.13, "Dependency Tracking", in the documentation).
(5764) {915343} [915557]: CASCADE Automatically drop objects that depend on the sequence, and in turn all objects that depend on those objects (see Section 5.13, "Dependency Tracking", in the documentation).
*****************************************************************
========================= CLASS #115 =============================
(385) {60531} [60637]: RESTRICT Refuse to drop the column or constraint if there are any dependent objects.
(1193) {184873} [184979]: RESTRICT Refuse to drop the column or constraint if there are any dependent objects.
(5375) {856382} [856467]: RESTRICT Refuse to drop the constraint if there are any dependent objects.
*****************************************************************
========================= CLASS #116 =============================
(387) {60676} [60746]: trigger_name Name of a single trigger to disable or enable.
(1195) {185018} [185088]: trigger_name Name of a single trigger to disable or enable.
*****************************************************************
========================= CLASS #117 =============================
(388) {60755} [60824]: ALL Disable or enable all triggers belonging to the table.
(1196) {185097} [185174]: ALL Disable or enable all triggers belonging to the foreign table.
*****************************************************************
========================= CLASS #118 =============================
(393) {61515} [61576]: value The new value for a table storage parameter.
(3750) {595395} [595473]: value The new value for an index-method-specific storage parameter.
*****************************************************************
========================= CLASS #119 =============================
(394) {61577} [61648]: This might be a number or a word depending on the parameter.
(3751) {595474} [595545]: This might be a number or a word depending on the parameter.
*****************************************************************
========================= CLASS #120 =============================
(395) {61657} [61741]: parent_table A parent table to associate or de-associate with this table.
(1200) {185540} [185643]: parent_table A parent table to associate or de-associate with this foreign table.
*****************************************************************
========================= CLASS #121 =============================
(397) {61824} [61910]: new_tablespace The name of the tablespace to which the table will be moved.
(398) {61919} [61997]: new_schema The name of the schema to which the table will be moved.
(1202) {185726} [185804]: new_schema The name of the schema to which the table will be moved.
*****************************************************************
========================= CLASS #122 =============================
(399) {61999} [62060]: NOTES The key word COLUMN is noise and can be omitted.
(1203) {185806} [185867]: NOTES The key word COLUMN is noise and can be omitted.
*****************************************************************
========================= CLASS #123 =============================
(416) {64542} [64698]: After a table rewrite, the table will appear empty to concurrent transactions, if they are using a snapshot taken before the rewrite occurred.
(5726) {909498} [909652]: After truncation, the table will appear empty to concurrent transactions, if they are using a snapshot taken before the truncation occurred.
*****************************************************************
========================= CLASS #124 =============================
(417) {64699} [64773]: See Section 13.5, "Caveats", in the documentation for more details.
(5727) {909653} [909727]: See Section 13.5, "Caveats", in the documentation for more details.
*****************************************************************
========================= CLASS #125 =============================
(431) {66729} [66790]: Changing any part of a system catalog table is not permitted.
(3757) {595994} [596055]: Changing any part of a system catalog index is not permitted.
*****************************************************************
========================= CLASS #126 =============================
(432) {66799} [66892]: Refer to CREATE TABLE (CREATE_TABLE(7)) for a further description of valid parameters.
(1206) {186211} [186320]: Refer to CREATE FOREIGN TABLE (CREATE_FOREIGN_TABLE(7)) for a further description of valid parameters.
(2728) {425972} [426028]: See CREATE TABLE (CREATE_TABLE(7)) for more information.
(3003) {477860} [477925]: See CREATE TYPE (CREATE_TYPE(7)) for more information.
(3771) {598707} [598774]: See CREATE TABLE (CREATE_TABLE(7)) for more information.
(5304) {845247} [845320]: See CREATE FUNCTION (CREATE_FUNCTION(7)) for more information.
(5306) {845444} [845508]: See CREATE FUNCTION (CREATE_FUNCTION(7)) for details.
(5309) {845718} [845813]: See CREATE FUNCTION (CREATE_FUNCTION(7)) for more information about this capability.
(5311) {845902} [845966]: See CREATE FUNCTION (CREATE_FUNCTION(7)) for details.
(5313) {846056} [846162]: See CREATE FUNCTION (CREATE_FUNCTION(7)) for more information about this capability.
(5315) {846255} [846328]: See CREATE FUNCTION (CREATE_FUNCTION(7)) for more information.
(5317) {846450} [846523]: See CREATE FUNCTION (CREATE_FUNCTION(7)) for more information.
(5332) {850437} [850500]: Refer to CREATE TABLE (CREATE_TABLE(7)) for details.
(5334) {850586} [850649]: Refer to CREATE TABLE (CREATE_TABLE(7)) for details.
*****************************************************************
========================= CLASS #127 =============================
(437) {71094} [71163]: The other forms are PostgreSQL extensions of the SQL standard.
(1208) {186713} [186775]: The other forms are PostgreSQL extensions of the SQL standard.
(2465) {383026} [383075]: The other forms are PostgreSQL extensions.
*****************************************************************
========================= CLASS #128 =============================
(438) {71164} [71282]: Also, the ability to specify more than one manipulation in a single ALTER TABLE command is an extension.
(1209) {186776} [186902]: Also, the ability to specify more than one manipulation in a single ALTER FOREIGN TABLE command is an extension.
*****************************************************************
========================= CLASS #129 =============================
(439) {71291} [71398]: ALTER TABLE DROP COLUMN can be used to drop the only column of a table, leaving a zero-column table.
(1210) {186911} [187034]: ALTER FOREIGN TABLE DROP COLUMN can be used to drop the only column of a foreign table, leaving a zero-column table.
*****************************************************************
========================= CLASS #130 =============================
(440) {71399} [71470]: This is an extension of SQL, which disallows zero-column tables.
(1211) {187035} [187114]: This is an extension of SQL, which disallows zero-column foreign tables.
*****************************************************************
========================= CLASS #131 =============================
(471) {76478} [76580]: PARAMETERS channel Name of the notification channel to be signaled (any identifier).
(1015) {157567} [157652]: PARAMETERS channel Name of a notification channel (any identifier).
(3720) {591061} [591146]: PARAMETERS channel Name of a notification channel (any identifier).
*****************************************************************
========================= CLASS #132 =============================
(484) {77983} [78069]: A transaction that has executed NOTIFY cannot be prepared for two-phase commit.
(1018) {157875} [157961]: A transaction that has executed LISTEN cannot be prepared for two-phase commit.
(3724) {591422} [591510]: A transaction that has executed UNLISTEN cannot be prepared for two-phase commit.
*****************************************************************
========================= CLASS #133 =============================
(488) {78410} [78629]: EXAMPLES Configure and execute a listen/notify sequence from psql: LISTEN virtual; NOTIFY virtual; Asynchronous notification "virtual" received from server process with PID 8448.
(1019) {157963} [158182]: EXAMPLES Configure and execute a listen/notify sequence from psql: LISTEN virtual; NOTIFY virtual; Asynchronous notification "virtual" received from server process with PID 8448.
(3725) {591512} [591697]: EXAMPLES To make a registration: LISTEN virtual; NOTIFY virtual; Asynchronous notification "virtual" received from server process with PID 8448.
*****************************************************************
========================= CLASS #134 =============================
(498) {80045} [80126]: RESTRICT Refuse to drop the access method if any objects depend on it.
(536) {86102} [86188]: RESTRICT Refuse to drop the text search parser if any objects depend on it.
(616) {97851} [97952]: RESTRICT Refuse to drop the text search dictionary if any objects depend on it.
(1056) {164207} [164292]: RESTRICT Refuse to drop the materialized view if any objects depend on it.
(1229) {189857} [189934]: RESTRICT Refuse to drop the collation if any objects depend on it.
(1864) {291091} [291190]: RESTRICT Refuse to drop the foreign-data wrapper if any objects depend on it.
(1919) {299491} [299567]: RESTRICT Refuse to drop the function if any objects depend on it.
(1928) {300858} [300939]: RESTRICT Refuse to drop the foreign table if any objects depend on it.
(1941) {303327} [303399]: RESTRICT Refuse to drop the rule if any objects depend on it.
(2198) {343158} [343235]: RESTRICT Refuse to drop the transform if any objects depend on it.
(2665) {416135} [416207]: RESTRICT Refuse to drop the view if any objects depend on it.
(2694) {420926} [421025]: RESTRICT Refuse to drop the text search template if any objects depend on it.
(2761) {430824} [430899]: RESTRICT Refuse to drop the trigger if any objects depend on it.
(2840) {444871} [444947]: RESTRICT Refuse to drop the language if any objects depend on it.
(2898) {457583} [457669]: RESTRICT Refuse to drop the aggregate function if any objects depend on it.
(2965) {471913} [471985]: RESTRICT Refuse to drop the type if any objects depend on it.
(3063) {486362} [486436]: RESTRICT Refuse to drop the domain if any objects depend on it.
(3094) {492628} [492732]: RESTRICT Refuse to drop the text search configuration if any objects depend on it.
(3235) {512128} [512201]: RESTRICT Refuse to drop the table if any objects depend on it.
(3927) {622535} [622609]: RESTRICT Refuse to drop the server if any objects depend on it.
(4068) {643065} [643148]: RESTRICT Refuse to drop the operator family if any objects depend on it.
(4082) {645180} [645262]: RESTRICT Refuse to drop the operator class if any objects depend on it.
(4665) {740121} [740196]: RESTRICT Refuse to drop the trigger if any objects depend on it.
(4682) {742335} [742408]: RESTRICT Refuse to drop the index if any objects depend on it.
(5754) {914062} [914138]: RESTRICT Refuse to drop the operator if any objects depend on it.
(5765) {915566} [915642]: RESTRICT Refuse to drop the sequence if any objects depend on it.
*****************************************************************
========================= CLASS #135 =============================
(502) {80914} [81019]: CREATE OR REPLACE TRANSFORM will either create a new transform, or replace an existing definition.
(1979) {309676} [309779]: CREATE OR REPLACE LANGUAGE will either create a new language, or replace an existing definition.
(2020) {317161} [317264]: CREATE OR REPLACE FUNCTION will either create a new function, or replace an existing definition.
*****************************************************************
========================= CLASS #136 =============================
(506) {81490} [81636]: A transform specifies two functions: o A "from SQL" function that converts the type from the SQL environment to the language.
(508) {81742} [81841]: o A "to SQL" function that converts the type from the language to the SQL environment.
*****************************************************************
========================= CLASS #137 =============================
(507) {81637} [81733]: This function will be invoked on the arguments of a function written in the language.
(509) {81842} [81941]: This function will be invoked on the return value of a function written in the language.
*****************************************************************
========================= CLASS #138 =============================
(516) {82663} [82821]: from_sql_function_name(argument_type [, ...]) The name of the function for converting the type from the SQL environment to the language.
(521) {83279} [83435]: to_sql_function_name(argument_type [, ...]) The name of the function for converting the type from the language to the SQL environment.
*****************************************************************
========================= CLASS #139 =============================
(520) {83177} [83270]: The actual return value will be something specific to the language implementation.
(523) {83546} [83652]: The actual argument value will be something specific to the language implementation.
*****************************************************************
========================= CLASS #140 =============================
(530) {84986} [85551]: SEE ALSO CREATE FUNCTION (CREATE_FUNCTION(7)), CREATE LANGUAGE (CREATE_LANGUAGE(7)), CREATE TYPE (CREATE_TYPE(7)), DROP TRANSFORM (DROP_TRANSFORM(7)) PostgreSQL 9.6.1 2016 CREATE TRANSFORM(7) DROP TEXT SEARCH PARSER(PostgreSQL 9.6.1 DocumentatiDROP TEXT SEARCH PARSER(7) NAME DROP_TEXT_SEARCH_PARSER - remove a text search parser SYNOPSIS DROP TEXT SEARCH PARSER [ IF EXISTS ] name [ CASCADE | RESTRICT ] DESCRIPTION DROP TEXT SEARCH PARSER drops an existing text search parser.
(610) {96767} [97268]: SEE ALSO CREATE SEQUENCE (CREATE_SEQUENCE(7)), DROP SEQUENCE (DROP_SEQUENCE(7)) PostgreSQL 9.6.1 2016 ALTER SEQUENCE(7) DROP TEXT SEARCH DICTIONPostgreSQL 9.6.1 DocumenDROPoTEXT SEARCH DICTIONARY(7) NAME DROP_TEXT_SEARCH_DICTIONARY - remove a text search dictionary SYNOPSIS DROP TEXT SEARCH DICTIONARY [ IF EXISTS ] name [ CASCADE | RESTRICT ] DESCRIPTION DROP TEXT SEARCH DICTIONARY drops an existing text search dictionary.
(3057) {485394} [485844]: SEE ALSO CREATE FUNCTION (CREATE_FUNCTION(7)), CREATE TYPE (CREATE_TYPE(7)), DROP CAST (DROP_CAST(7)) PostgreSQL 9.6.1 2016 CREATE CAST(7) DROP DOMAIN(7) PostgreSQL 9.6.1 Documentation DROP DOMAIN(7) NAME DROP_DOMAIN - remove a domain SYNOPSIS DROP DOMAIN [ IF EXISTS ] name [, ...] [ CASCADE | RESTRICT ] DESCRIPTION DROP DOMAIN removes a domain.
(5768) {915985} [916175]: SEE ALSO CREATE SEQUENCE (CREATE_SEQUENCE(7)), ALTER SEQUENCE (ALTER_SEQUENCE(7)) PostgreSQL 9.6.1 2016 DROP SEQUENCE(7) </plainxml>
*****************************************************************
========================= CLASS #141 =============================
(531) {85552} [85603]: You must be a superuser to use this command.
(558) {89515} [89573]: You must be a superuser to use ALTER TEXT SEARCH TEMPLATE.
(1874) {292500} [292559]: You must be a superuser to use CREATE TEXT SEARCH TEMPLATE.
(2689) {420370} [420421]: You must be a superuser to use this command.
(2771) {433614} [433667]: You must be a superuser to use ALTER OPERATOR FAMILY.
(3201) {507704} [507761]: You must be a superuser to use CREATE TEXT SEARCH PARSER.
(4606) {731086} [731142]: You must be a superuser to use ALTER TEXT SEARCH PARSER.
*****************************************************************
========================= CLASS #142 =============================
(538) {86222} [86444]: EXAMPLES Remove the text search parser my_parser: DROP TEXT SEARCH PARSER my_parser; This command will not succeed if there are any existing text search configurations that use the parser.
(618) {97975} [98205]: EXAMPLES Remove the text search dictionary english: DROP TEXT SEARCH DICTIONARY english; This command will not succeed if there are any existing text search configurations that use the dictionary.
(2696) {421048} [421274]: EXAMPLES Remove the text search template thesaurus: DROP TEXT SEARCH TEMPLATE thesaurus; This command will not succeed if there are any existing text search dictionaries that use the template.
*****************************************************************
========================= CLASS #143 =============================
(539) {86445} [86514]: Add CASCADE to drop such configurations along with the parser.
(619) {98206} [98279]: Add CASCADE to drop such configurations along with the dictionary.
*****************************************************************
========================= CLASS #144 =============================
(541) {86605} [87258]: SEE ALSO ALTER TEXT SEARCH PARSER (ALTER_TEXT_SEARCH_PARSER(7)), CREATE TEXT SEARCH PARSER (CREATE_TEXT_SEARCH_PARSER(7)) PostgreSQL 9.6.1 2016 DROP TEXT SEARCH PARSER(7) ALTER USER MAPPING(7) PostgreSQL 9.6.1 Documentation ALTER USER MAPPING(7) NAME ALTER_USER_MAPPING - change the definition of a user mapping SYNOPSIS ALTER USER MAPPING FOR { user_name | USER | CURRENT_USER | SESSION_USER | PUBLIC } SERVER server_name OPTIONS ( [ ADD | SET | DROP ] option ['value'] [, ... ] ) DESCRIPTION ALTER USER MAPPING changes the definition of a user mapping.
(548) {87783} [87889]: OPTIONS ( [ ADD | SET | DROP ] option ['value'] [, ... ] ) Change options for the user mapping.
(898) {141405} [141519]: OPTIONS ( [ ADD | SET | DROP ] option ['value'] [, ... ] ) Change options for the foreign-data wrapper.
(1165) {181864} [181993]: OPTIONS ( [ ADD | SET | DROP ] option ['value'] [, ... ] ) Change options for the foreign table or one of its columns.
(4650) {738097} [738197]: OPTIONS ( [ ADD | SET | DROP ] option ['value'] [, ... ] ) Change options for the server.
*****************************************************************
========================= CLASS #145 =============================
(542) {87267} [87357]: The owner of a foreign server can alter user mappings for that server for any user.
(995) {154828} [154917]: The owner of a foreign server can drop user mappings for that server for any user.
(1238) {192421} [192512]: The owner of a foreign server can create user mappings for that server for any user.
*****************************************************************
========================= CLASS #146 =============================
(543) {87358} [87489]: Also, a user can alter a user mapping for their own user name if USAGE privilege on the server has been granted to the user.
(996) {154918} [155048]: Also, a user can drop a user mapping for their own user name if USAGE privilege on the server has been granted to the user.
(1239) {192513} [192645]: Also, a user can create a user mapping for their own user name if USAGE privilege on the server has been granted to the user.
*****************************************************************
========================= CLASS #147 =============================
(544) {87491} [87555]: PARAMETERS user_name User name of the mapping.
(999) {155199} [155245]: user_name User name of the mapping.
*****************************************************************
========================= CLASS #148 =============================
(545) {87557} [87625]: CURRENT_USER and USER match the name of the current user.
(1000) {155247} [155315]: CURRENT_USER and USER match the name of the current user.
(1241) {192760} [192817]: CURRENT_USER and USER match the name of the current user.
*****************************************************************
========================= CLASS #149 =============================
(546) {87627} [87710]: PUBLIC is used to match all present and future user names in the system.
(1001) {155317} [155400]: PUBLIC is used to match all present and future user names in the system.
*****************************************************************
========================= CLASS #150 =============================
(547) {87719} [87774]: server_name Server name of the user mapping.
(1002) {155409} [155464]: server_name Server name of the user mapping.
*****************************************************************
========================= CLASS #151 =============================
(550) {87961} [88026]: ADD, SET, and DROP specify the action to be performed.
(899) {141521} [141586]: ADD, SET, and DROP specify the action to be performed.
(1166) {181995} [182060]: ADD, SET, and DROP specify the action to be performed.
(4651) {738199} [738264]: ADD, SET, and DROP specify the action to be performed.
*****************************************************************
========================= CLASS #152 =============================
(551) {88028} [88094]: ADD is assumed if no operation is explicitly specified.
(900) {141588} [141654]: ADD is assumed if no operation is explicitly specified.
(1167) {182062} [182128]: ADD is assumed if no operation is explicitly specified.
(4652) {738266} [738332]: ADD is assumed if no operation is explicitly specified.
*****************************************************************
========================= CLASS #153 =============================
(552) {88095} [88199]: Option names must be unique; options are also validated by the server's foreign-data wrapper.
(636) {101152} [101180]: Option names must be unique.
(1246) {193291} [193319]: Option names must be unique.
*****************************************************************
========================= CLASS #154 =============================
(553) {88201} [88432]: EXAMPLES Change the password for user mapping bob, server foo: ALTER USER MAPPING FOR bob SERVER foo OPTIONS (SET password 'public'); COMPATIBILITY ALTER USER MAPPING conforms to ISO/IEC 9075-9 (SQL/MED).
(1586) {249258} [249330]: COMPATIBILITY CREATE SERVER conforms to ISO/IEC 9075-9 (SQL/MED).
*****************************************************************
========================= CLASS #155 =============================
(556) {88819} [89421]: SEE ALSO CREATE USER MAPPING (CREATE_USER_MAPPING(7)), DROP USER MAPPING (DROP_USER_MAPPING(7)) PostgreSQL 9.6.1 2016 ALTER USER MAPPING(7) ALTER TEXT SEARCH TEMPLAPostgreSQL 9.6.1 DocumentALTER TEXT SEARCH TEMPLATE(7) NAME ALTER_TEXT_SEARCH_TEMPLATE - change the definition of a text search template SYNOPSIS ALTER TEXT SEARCH TEMPLATE name RENAME TO new_name ALTER TEXT SEARCH TEMPLATE name SET SCHEMA new_schema DESCRIPTION ALTER TEXT SEARCH TEMPLATE changes the definition of a text search template.
(4604) {730517} [730994]: PostgreSQL 9.6.1 2016 SELECT(7) ALTER TEXT SEARCH PARSERPostgreSQL 9.6.1 DocumentatALTER TEXT SEARCH PARSER(7) NAME ALTER_TEXT_SEARCH_PARSER - change the definition of a text search parser SYNOPSIS ALTER TEXT SEARCH PARSER name RENAME TO new_name ALTER TEXT SEARCH PARSER name SET SCHEMA new_schema DESCRIPTION ALTER TEXT SEARCH PARSER changes the definition of a text search parser.
*****************************************************************
========================= CLASS #156 =============================
(557) {89422} [89506]: Currently, the only supported functionality is to change the template's name.
(4605) {730995} [731077]: Currently, the only supported functionality is to change the parser's name.
*****************************************************************
========================= CLASS #157 =============================
(563) {89934} [90978]: SEE ALSO CREATE TEXT SEARCH TEMPLATE (CREATE_TEXT_SEARCH_TEMPLATE(7)), DROP TEXT SEARCH TEMPLATE (DROP_TEXT_SEARCH_TEMPLATE(7)) PostgreSQL 9.6.1 2016 ALTER TEXT SEARCH TEMPLATE(7) ALTER SEQUENCE(7) PostgreSQL 9.6.1 Documentation ALTER SEQUENCE(7) NAME ALTER_SEQUENCE - change the definition of a sequence generator SYNOPSIS ALTER SEQUENCE [ IF EXISTS ] name [ INCREMENT [ BY ] increment ] [ MINVALUE minvalue | NO MINVALUE ] [ MAXVALUE maxvalue | NO MAXVALUE ] [ START [ WITH ] start ] [ RESTART [ [ WITH ] restart ] ] [ CACHE cache ] [ [ NO ] CYCLE ] [ OWNED BY { table_name.column_name | NONE } ] ALTER SEQUENCE [ IF EXISTS ] name OWNER TO { new_owner | CURRENT_USER | SESSION_USER } ALTER SEQUENCE [ IF EXISTS ] name RENAME TO new_name ALTER SEQUENCE [ IF EXISTS ] name SET SCHEMA new_schema DESCRIPTION ALTER SEQUENCE changes the parameters of an existing sequence generator.
(2699) {421437} [422074]: SEE ALSO ALTER TEXT SEARCH TEMPLATE (ALTER_TEXT_SEARCH_TEMPLATE(7)), CREATE TEXT SEARCH TEMPLATE (CREATE_TEXT_SEARCH_TEMPLATE(7)) PostgreSQL 9.6.1 2016 DROP TEXT SEARCH TEMPLATE(7) ALTER COLLATION(7) PostgreSQL 9.6.1 Documentation ALTER COLLATION(7) NAME ALTER_COLLATION - change the definition of a collation SYNOPSIS ALTER COLLATION name RENAME TO new_name ALTER COLLATION name OWNER TO { new_owner | CURRENT_USER | SESSION_USER } ALTER COLLATION name SET SCHEMA new_schema DESCRIPTION ALTER COLLATION changes the definition of a collation.
(4686) {742672} [743339]: SEE ALSO CREATE INDEX (CREATE_INDEX(7)) PostgreSQL 9.6.1 2016 DROP INDEX(7) CREATE SEQUENCE(7) PostgreSQL 9.6.1 Documentation CREATE SEQUENCE(7) NAME CREATE_SEQUENCE - define a new sequence generator SYNOPSIS CREATE [ TEMPORARY | TEMP ] SEQUENCE [ IF NOT EXISTS ] name [ INCREMENT [ BY ] increment ] [ MINVALUE minvalue | NO MINVALUE ] [ MAXVALUE maxvalue | NO MAXVALUE ] [ START [ WITH ] start ] [ CACHE cache ] [ [ NO ] CYCLE ] [ OWNED BY { table_name.column_name | NONE } ] DESCRIPTION CREATE SEQUENCE creates a new sequence number generator.
*****************************************************************
========================= CLASS #158 =============================
(574) {91923} [92032]: A positive value will make an ascending sequence, a negative one a descending sequence.
(4705) {745574} [745683]: A positive value will make an ascending sequence, a negative one a descending sequence.
*****************************************************************
========================= CLASS #159 =============================
(575) {92033} [92103]: If unspecified, the old increment value will be maintained.
(589) {93867} [93933]: If unspecified, the old cache value will be maintained.
*****************************************************************
========================= CLASS #160 =============================
(576) {92112} [92253]: minvalue NO MINVALUE The optional clause MINVALUE minvalue determines the minimum value a sequence can generate.
(4706) {745684} [745857]: The default value is 1. minvalue NO MINVALUE The optional clause MINVALUE minvalue determines the minimum value a sequence can generate.
*****************************************************************
========================= CLASS #161 =============================
(577) {92254} [92402]: If NO MINVALUE is specified, the defaults of 1 and -2^63-1 for ascending and descending sequences, respectively, will be used.
(580) {92635} [92784]: If NO MAXVALUE is specified, the defaults are 2^63-1 and -1 for ascending and descending sequences, respectively, will be used.
(4708) {745957} [746052]: The defaults are 1 and -2^63-1 for ascending and descending sequences, respectively.
(4711) {746301} [746396]: The defaults are 2^63-1 and -1 for ascending and descending sequences, respectively.
*****************************************************************
========================= CLASS #162 =============================
(578) {92403} [92491]: If neither option is specified, the current minimum value will be maintained.
(581) {92785} [92873]: If neither option is specified, the current maximum value will be maintained.
*****************************************************************
========================= CLASS #163 =============================
(579) {92500} [92634]: maxvalue NO MAXVALUE The optional clause MAXVALUE maxvalue determines the maximum value for the sequence.
(4709) {746061} [746195]: maxvalue NO MAXVALUE The optional clause MAXVALUE maxvalue determines the maximum value for the sequence.
*****************************************************************
========================= CLASS #164 =============================
(588) {93772} [93866]: The minimum value is 1 (only one value can be generated at a time, i.e., no cache).
(4715) {746784} [746919]: The minimum value is 1 (only one value can be generated at a time, i.e., no cache), and this is also the default.
*****************************************************************
========================= CLASS #165 =============================
(590) {93942} [94158]: CYCLE The optional CYCLE key word can be used to enable the sequence to wrap around when the maxvalue or minvalue has been reached by an ascending or descending sequence respectively.
(4716) {746928} [747134]: CYCLE NO CYCLE The CYCLE option allows the sequence to wrap around when the maxvalue or minvalue has been reached by an ascending or descending sequence respectively.
*****************************************************************
========================= CLASS #166 =============================
(591) {94159} [94279]: If the limit is reached, the next number generated will be the minvalue or maxvalue, respectively.
(4717) {747135} [747244]: If the limit is reached, the next number generated will be the minvalue or maxvalue, respectively.
*****************************************************************
========================= CLASS #167 =============================
(592) {94288} [94469]: NO CYCLE If the optional NO CYCLE key word is specified, any calls to nextval after the sequence has reached its maximum value will return an error.
(4718) {747257} [747385]: If NO CYCLE is specified, any calls to nextval after the sequence has reached its maximum value will return an error.
*****************************************************************
========================= CLASS #168 =============================
(593) {94470} [94567]: If neither CYCLE or NO CYCLE are specified, the old cycle behavior will be maintained.
(4719) {747386} [747465]: If neither CYCLE or NO CYCLE are specified, NO CYCLE is the default.
*****************************************************************
========================= CLASS #169 =============================
(594) {94576} [94869]: OWNED BY table_name.column_name OWNED BY NONE The OWNED BY option causes the sequence to be associated with a specific table column, such that if that column (or its whole table) is dropped, the sequence will be automatically dropped as well.
(4720) {747474} [747767]: OWNED BY table_name.column_name OWNED BY NONE The OWNED BY option causes the sequence to be associated with a specific table column, such that if that column (or its whole table) is dropped, the sequence will be automatically dropped as well.
*****************************************************************
========================= CLASS #170 =============================
(596) {94976} [95074]: The specified table must have the same owner and be in the same schema as the sequence.
(4721) {747768} [747866]: The specified table must have the same owner and be in the same schema as the sequence.
*****************************************************************
========================= CLASS #171 =============================
(608) {96267} [96458]: For historical reasons, ALTER TABLE can be used with sequences too; but the only variants of ALTER TABLE that are allowed with sequences are equivalent to the forms shown above.
(1608) {252332} [252527]: NOTES For historical reasons, ALTER TABLE can be used with views too; but the only variants of ALTER TABLE that are allowed with views are equivalent to the ones shown above.
*****************************************************************
========================= CLASS #172 =============================
(611) {97276} [97340]: To execute this command you must be the owner of the dictionary.
(1051) {163567} [163645]: To execute this command you must be the owner of the materialized view.
(2660) {415600} [415665]: To execute this command you must be the owner of the view.
(3089) {492034} [492108]: To execute this command you must be the owner of the configuration.
(4060) {642068} [642144]: To execute this command you must be the owner of the operator family.
(4074) {644266} [644341]: To execute this command you must be the owner of the operator class.
(4670) {741004} [741070]: To execute this command you must be the owner of the index.
(5747) {913228} [913297]: To execute this command you must be the owner of the operator.
*****************************************************************
========================= CLASS #173 =============================
(621) {98374} [99063]: SEE ALSO ALTER TEXT SEARCH DICTIONARY (ALTER_TEXT_SEARCH_DICTIONARY(7)), CREATE TEXT SEARCH DICTIONARY (CREATE_TEXT_SEARCH_DICTIONARY(7)) PostgreSQL 9.6.1 2016 DROP TEXT SEARCH DICTIONARY(7) CREATE FOREIGN DATA WRAPPostgreSQL 9.6.1 DocumenCREATE FOREIGN DATA WRAPPER(7) NAME CREATE_FOREIGN_DATA_WRAPPER - define a new foreign-data wrapper SYNOPSIS CREATE FOREIGN DATA WRAPPER name [ HANDLER handler_function | NO HANDLER ] [ VALIDATOR validator_function | NO VALIDATOR ] [ OPTIONS ( option 'value' [, ... ] ) ] DESCRIPTION CREATE FOREIGN DATA WRAPPER creates a new foreign-data wrapper.
(634) {100859} [100969]: OPTIONS ( option 'value' [, ... ] ) This clause specifies options for the new foreign-data wrapper.
(1244) {193088} [193189]: OPTIONS ( option 'value' [, ... ] ) This clause specifies the options of the user mapping.
(1581) {248426} [248522]: OPTIONS ( option 'value' [, ... ] ) This clause specifies the options for the server.
(3193) {505738} [505821]: OPTIONS ( option 'value' [, ...] ) Options to be used during the import.
*****************************************************************
========================= CLASS #174 =============================
(623) {99142} [99207]: The foreign-data wrapper name must be unique within the database.
(1575) {247877} [247928]: The server name must be unique within the database.
(5614) {894258} [894316]: The access method name must be unique within the database.
(5686) {904332} [904388]: This name must be unique within the database.
*****************************************************************
========================= CLASS #175 =============================
(625) {99267} [99352]: PARAMETERS name The name of the foreign-data wrapper to be created.
(1226) {189527} [189569]: name The name of the collation.
(1494) {236749} [236820]: PARAMETERS name The name of the cursor to be created.
(1631) {256890} [256977]: PARAMETERS name The name of the text search dictionary to be created.
(1690) {266855} [266907]: name The name of the index to be created.
(1879) {293117} [293202]: PARAMETERS name The name of the text search template to be created.
(2219) {346156} [346235]: PARAMETERS name The name of the operator class to be created.
(3174) {503100} [503180]: PARAMETERS name The name of the operator family to be created.
(3204) {507995} [508078]: PARAMETERS name The name of the text search parser to be created.
(3255) {515613} [515684]: PARAMETERS name The name of the policy to be created.
(3788) {601291} [601381]: PARAMETERS name The name of the text search configuration to be created.
(3790) {601435} [601523]: parser_name The name of the text search parser to use for this configuration.
(3953) {627299} [627358]: PARAMETERS name The name of the new role.
(4988) {792709} [792769]: PARAMETERS name The name of the collation.
(5616) {894373} [894451]: PARAMETERS name The name of the access method to be created.
*****************************************************************
========================= CLASS #176 =============================
(626) {99361} [99559]: HANDLER handler_function handler_function is the name of a previously registered function that will be called to retrieve the execution functions for foreign tables.
(1990) {311190} [311361]: HANDLER call_handler call_handler is the name of a previously registered function that will be called to execute the procedural language's functions.
*****************************************************************
========================= CLASS #177 =============================
(635) {100970} [101151]: The allowed option names and values are specific to each foreign data wrapper and are validated using the foreign-data wrapper's validator function.
(1247) {193320} [193417]: The allowed option names and values are specific to the server's foreign-data wrapper.
(3194) {505822} [505911]: The allowed option names and values are specific to each foreign data wrapper.
(3571) {566311} [566481]: The allowed option names and values are specific to each foreign data wrapper and are validated using the foreign-data wrapper's validator function.
*****************************************************************
========================= CLASS #178 =============================
(642) {102222} [103541]: SEE ALSO ALTER FOREIGN DATA WRAPPER (ALTER_FOREIGN_DATA_WRAPPER(7)), DROP FOREIGN DATA WRAPPER (DROP_FOREIGN_DATA_WRAPPER(7)), CREATE SERVER (CREATE_SERVER(7)), CREATE USER MAPPING (CREATE_USER_MAPPING(7)), CREATE FOREIGN TABLE (CREATE_FOREIGN_TABLE(7)) PostgreSQL 9.6.1 2016 CREATE FOREIGN DATA WRAPPER(7) ALTER TYPE(7) PostgreSQL 9.6.1 Documentation ALTER TYPE(7) NAME ALTER_TYPE - change the definition of a type SYNOPSIS ALTER TYPE name action [, ... ] ALTER TYPE name OWNER TO { new_owner | CURRENT_USER | SESSION_USER } ALTER TYPE name RENAME ATTRIBUTE attribute_name TO new_attribute_name [ CASCADE | RESTRICT ] ALTER TYPE name RENAME TO new_name ALTER TYPE name SET SCHEMA new_schema ALTER TYPE name ADD VALUE [ IF NOT EXISTS ] new_enum_value [ { BEFORE | AFTER } existing_enum_value ] where action is one of: ADD ATTRIBUTE attribute_name data_type [ COLLATE collation ] [ CASCADE | RESTRICT ] DROP ATTRIBUTE [ IF EXISTS ] attribute_name [ CASCADE | RESTRICT ] ALTER ATTRIBUTE attribute_name [ SET DATA ] TYPE data_type [ COLLATE collation ] [ CASCADE | RESTRICT ] DESCRIPTION ALTER TYPE changes the definition of an existing type.
(1212) {187116} [187730]: SEE ALSO CREATE FOREIGN TABLE (CREATE_FOREIGN_TABLE(7)), DROP FOREIGN TABLE (DROP_FOREIGN_TABLE(7)) PostgreSQL 9.6.1 2016 ALTER FOREIGN TABLE(7) ALTER CONVERSION(7) PostgreSQL 9.6.1 Documentation ALTER CONVERSION(7) NAME ALTER_CONVERSION - change the definition of a conversion SYNOPSIS ALTER CONVERSION name RENAME TO new_name ALTER CONVERSION name OWNER TO { new_owner | CURRENT_USER | SESSION_USER } ALTER CONVERSION name SET SCHEMA new_schema DESCRIPTION ALTER CONVERSION changes the definition of a conversion.
(1931) {301340} [301945]: SEE ALSO ALTER FOREIGN TABLE (ALTER_FOREIGN_TABLE(7)), CREATE FOREIGN TABLE (CREATE_FOREIGN_TABLE(7)) PostgreSQL 9.6.1 2016 DROP FOREIGN TABLE(7) ALTER LANGUAGE(7) PostgreSQL 9.6.1 Documentation ALTER LANGUAGE(7) NAME ALTER_LANGUAGE - change the definition of a procedural language SYNOPSIS ALTER [ PROCEDURAL ] LANGUAGE name RENAME TO new_name ALTER [ PROCEDURAL ] LANGUAGE name OWNER TO { new_owner | CURRENT_USER | SESSION_USER } DESCRIPTION ALTER LANGUAGE changes the definition of a procedural language.
(5582) {889256} [889785]: SEE ALSO ALTER CONVERSION (ALTER_CONVERSION(7)), CREATE CONVERSION (CREATE_CONVERSION(7)) PostgreSQL 9.6.1 2016 DROP CONVERSION(7) ALTER SCHEMA(7) PostgreSQL 9.6.1 Documentation ALTER SCHEMA(7) NAME ALTER_SCHEMA - change the definition of a schema SYNOPSIS ALTER SCHEMA name RENAME TO new_name ALTER SCHEMA name OWNER TO { new_owner | CURRENT_USER | SESSION_USER } DESCRIPTION ALTER SCHEMA changes the definition of a schema.
*****************************************************************
========================= CLASS #179 =============================
(649) {104142} [104269]: RENAME This form changes the name of the type or the name of an individual attribute of a composite type.
(1801) {283248} [283297]: The second form changes the name of the database.
(5362) {855029} [855088]: RENAME This form changes the name of the domain.
*****************************************************************
========================= CLASS #180 =============================
(673) {106587} [106700]: data_type The data type of the attribute to add, or the new type of the attribute to alter.
(3541) {562898} [562947]: data_type The data type of the column.
(5048) {803482} [803531]: data_type The data type of the column.
*****************************************************************
========================= CLASS #181 =============================
(675) {106795} [106852]: Like all enum literals, it needs to be quoted.
(677) {107024} [107081]: Like all enum literals, it needs to be quoted.
*****************************************************************
========================= CLASS #182 =============================
(690) {110423} [110585]: The file must be accessible by the PostgreSQL user (the user ID the server runs as) and the name must be specified from the viewpoint of the server.
(692) {110764} [110883]: The command must be specified from the viewpoint of the server, and be executable by the PostgreSQL user.
*****************************************************************
========================= CLASS #183 =============================
(698) {111393} [111456]: Note that parentheses are required around the query.
(5133) {815680} [815747]: Note that parentheses are required around the predicate.
*****************************************************************
========================= CLASS #184 =============================
(709) {112828} [112912]: boolean Specifies whether the selected option should be turned on or off.
(2941) {464487} [464571]: boolean Specifies whether the selected option should be turned on or off.
*****************************************************************
========================= CLASS #185 =============================
(710) {112924} [113021]: You can write TRUE, ON, or 1 to enable the option, and FALSE, OFF, or 0 to disable it.
(2942) {464583} [464680]: You can write TRUE, ON, or 1 to enable the option, and FALSE, OFF, or 0 to disable it.
*****************************************************************
========================= CLASS #186 =============================
(711) {113022} [113102]: The boolean value can also be omitted, in which case TRUE is assumed.
(2943) {464681} [464761]: The boolean value can also be omitted, in which case TRUE is assumed.
*****************************************************************
========================= CLASS #187 =============================
(723) {114403} [114444]: This must be a single one-byte character.
(735) {115582} [115634]: This must be a single one-byte character.
(739) {115955} [115996]: This must be a single one-byte character.
*****************************************************************
========================= CLASS #188 =============================
(724) {114456} [114508]: This option is not allowed when using binary format.
(728) {114845} [114897]: This option is not allowed when using binary format.
*****************************************************************
========================= CLASS #189 =============================
(732) {115394} [115444]: This option is allowed only when using CSV format.
(736) {115635} [115685]: This option is allowed only when using CSV format.
(740) {115997} [116058]: This option is allowed only when using CSV format.
(744) {116284} [116366]: This option is allowed only in COPY TO, and only when using CSV format.
(747) {116669} [116753]: This option is allowed only in COPY FROM, and only when using CSV format.
(750) {117052} [117136]: This option is allowed only in COPY FROM, and only when using CSV format.
*****************************************************************
========================= CLASS #190 =============================
(746) {116480} [116668]: In the default case where the null string is empty, this means that empty values will be read as zero-length strings rather than nulls, even when they are not quoted.
(749) {116942} [117051]: In the default case where the null string is empty, this converts a quoted empty string into NULL.
*****************************************************************
========================= CLASS #191 =============================
(754) {117347} [117514]: OUTPUTS On successful completion, a COPY command returns a command tag of the form COPY count The count is the number of rows copied.
(2586) {399767} [399956]: OUTPUTS On successful completion, an INSERT command returns a command tag of the form INSERT oid count The count is the number of rows inserted or updated.
(4185) {662040} [662212]: OUTPUTS On successful completion, a DELETE command returns a command tag of the form DELETE count The count is the number of rows deleted.
*****************************************************************
========================= CLASS #192 =============================
(800) {123396} [124941]: The following special backslash sequences are recognized by COPY FROM: +---------+----------------------------+ |Sequence | Represents | +---------+----------------------------+ |\b | Backspace (ASCII 8) | +---------+----------------------------+ |\f | Form feed (ASCII 12) | +---------+----------------------------+ |\n | Newline (ASCII 10) | +---------+----------------------------+ |\r | Carriage return (ASCII 13) | +---------+----------------------------+ |\t | Tab (ASCII 9) | +---------+----------------------------+ |\v | Vertical tab (ASCII 11) | +---------+----------------------------+ |\digits | Backslash followed by one | | | to three octal digits | | | specifies | | | the character with | | | that numeric code | +---------+----------------------------+ |\xdigits | Backslash x followed by | | | one or two hex digits | | | specifies | | | the character with | | | that numeric code | +---------+----------------------------+ Presently, COPY TO will never emit an octal or hex-digits backslash sequence, but it does use the other sequences listed above for those control characters.
(1261) {196661} [198419]: The following table summarizes which types of triggers may be used on tables, views, and foreign tables: +-----------+----------------------+----------------+-----------------+ |When | Event | Row-level | Statement-level | +-----------+----------------------+----------------+-----------------+ | | INSERT/UPDATE/DELETE | Tables and | Tables, views, | | | | foreign tables | and foreign | | BEFORE | | | tables | | +----------------------+----------------+-----------------+ | | TRUNCATE | -- | Tables | +-----------+----------------------+----------------+-----------------+ | | INSERT/UPDATE/DELETE | Tables and | Tables, views, | | | | foreign tables | and foreign | | AFTER | | | tables | | +----------------------+----------------+-----------------+ | | TRUNCATE | -- | Tables | +-----------+----------------------+----------------+-----------------+ | | INSERT/UPDATE/DELETE | Views | -- | |INSTEAD OF +----------------------+----------------+-----------------+ | | TRUNCATE | -- | -- | +-----------+----------------------+----------------+-----------------+ Also, a trigger definition can specify a Boolean WHEN condition, which will be tested to see whether the trigger should be fired.
*****************************************************************
========================= CLASS #193 =============================
(884) {139811} [139970]: The first form of the command changes the support functions or the generic options of the foreign-data wrapper (at least one clause is required).
(4643) {737429} [737563]: The first form changes the server version string or the generic options of the server (at least one clause is required).
*****************************************************************
========================= CLASS #194 =============================
(885) {139971} [140040]: The second form changes the owner of the foreign-data wrapper.
(4644) {737564} [737619]: The second form changes the owner of the server.
*****************************************************************
========================= CLASS #195 =============================
(889) {140255} [140353]: HANDLER handler_function Specifies a new handler function for the foreign-data wrapper.
(892) {140615} [140719]: VALIDATOR validator_function Specifies a new validator function for the foreign-data wrapper.
*****************************************************************
========================= CLASS #196 =============================
(890) {140362} [140490]: NO HANDLER This is used to specify that the foreign-data wrapper should no longer have a handler function.
(897) {141264} [141396]: NO VALIDATOR This is used to specify that the foreign-data wrapper should no longer have a validator function.
*****************************************************************
========================= CLASS #197 =============================
(901) {141655} [141802]: Option names must be unique; names and values are also validated using the foreign data wrapper's validator function, if any.
(1169) {182271} [182364]: Option names and values are also validated using the foreign data wrapper library.
(4653) {738333} [738457]: Option names must be unique; names and values are also validated using the server's foreign-data wrapper library.
*****************************************************************
========================= CLASS #198 =============================
(904) {141964} [142444]: EXAMPLES Change a foreign-data wrapper dbi, add option foo, drop bar: ALTER FOREIGN DATA WRAPPER dbi OPTIONS (ADD foo '1', DROP 'bar'); Change the foreign-data wrapper dbi validator to bob.myvalidator: ALTER FOREIGN DATA WRAPPER dbi VALIDATOR bob.myvalidator; COMPATIBILITY ALTER FOREIGN DATA WRAPPER conforms to ISO/IEC 9075-9 (SQL/MED), except that the HANDLER, VALIDATOR, OWNER TO, and RENAME clauses are extensions.
(1866) {291213} [291392]: EXAMPLES Drop the foreign-data wrapper dbi: DROP FOREIGN DATA WRAPPER dbi; COMPATIBILITY DROP FOREIGN DATA WRAPPER conforms to ISO/IEC 9075-9 (SQL/MED).
*****************************************************************
========================= CLASS #199 =============================
(910) {143536} [143555]: @ # % ^ &amp; | ` ?
(913) {143906} [143925]: @ # % ^ &amp; | ` ?
*****************************************************************
========================= CLASS #200 =============================
(925) {145034} [145211]: To be able to create an operator, you must have USAGE privilege on the argument types and the return type, as well as EXECUTE privilege on the underlying function.
(2039) {319208} [319320]: To be able to create a function, you must have USAGE privilege on the argument types and the return type.
(5436) {868186} [868394]: To be able to create an aggregate function, you must have USAGE privilege on the argument types, the state type(s), and the return type, as well as EXECUTE privilege on the supporting functions.
*****************************************************************
========================= CLASS #201 =============================
(931) {145583} [145690]: Two operators in the same schema can have the same name if they operate on different data types.
(5391) {861208} [861313]: Two aggregates in the same schema can have the same name if they operate on different input types.
*****************************************************************
========================= CLASS #202 =============================
(934) {145817} [145891]: left_type The data type of the operator's left operand, if any.
(936) {145967} [146043]: right_type The data type of the operator's right operand, if any.
*****************************************************************
========================= CLASS #203 =============================
(935) {145892} [145958]: This option would be omitted for a left-unary operator.
(937) {146044} [146111]: This option would be omitted for a right-unary operator.
*****************************************************************
========================= CLASS #204 =============================
(940) {146235} [146320]: res_proc The restriction selectivity estimator function for this operator.
(941) {146329} [146408]: join_proc The join selectivity estimator function for this operator.
*****************************************************************
========================= CLASS #205 =============================
(942) {146417} [146483]: HASHES Indicates this operator can support a hash join.
(943) {146492} [146559]: MERGES Indicates this operator can support a merge join.
*****************************************************************
========================= CLASS #206 =============================
(948) {147296} [147440]: This is no longer necessary, since information about associated operators is found by looking at B-tree operator families instead.
(4562) {725477} [725503]: This is no longer allowed.
*****************************************************************
========================= CLASS #207 =============================
(952) {147723} [148242]: EXAMPLES The following command defines a new operator, area-equality, for the data type box: CREATE OPERATOR === ( LEFTARG = box, RIGHTARG = box, PROCEDURE = area_equal_procedure, COMMUTATOR = ===, NEGATOR = !==, RESTRICT = area_restriction_procedure, JOIN = area_join_procedure, HASHES, MERGES ); COMPATIBILITY CREATE OPERATOR is a PostgreSQL extension.
(3177) {503317} [503387]: COMPATIBILITY CREATE OPERATOR FAMILY is a PostgreSQL extension.
*****************************************************************
========================= CLASS #208 =============================
(953) {148243} [148321]: There are no provisions for user-defined operators in the SQL standard.
(1796) {282010} [282073]: There are no provisions for indexes in the SQL standard.
(4685) {742607} [742670]: There are no provisions for indexes in the SQL standard.
*****************************************************************
========================= CLASS #209 =============================
(962) {149853} [149979]: PARAMETERS IF NOT EXISTS Do not throw an error if an extension with the same name already exists.
(1686) {266507} [266613]: IF NOT EXISTS Do not throw an error if a relation with the same name already exists.
(2720) {425051} [425157]: IF NOT EXISTS Do not throw an error if a relation with the same name already exists.
(3536) {562415} [562539]: PARAMETERS IF NOT EXISTS Do not throw an error if a relation with the same name already exists.
(3763) {597737} [597870]: PARAMETERS IF NOT EXISTS Do not throw an error if a materialized view with the same name already exists.
(4700) {744987} [745093]: IF NOT EXISTS Do not throw an error if a relation with the same name already exists.
(5039) {802375} [802481]: IF NOT EXISTS Do not throw an error if a relation with the same name already exists.
*****************************************************************
========================= CLASS #210 =============================
(964) {150013} [150190]: Note that there is no guarantee that the existing extension is anything like the one that would have been created from the currently-available script file.
(1688) {266647} [266779]: Note that there is no guarantee that the existing index is anything like the one that would have been created.
(3538) {562573} [562708]: Note that there is no guarantee that the existing relation is anything like the one that would have been created.
(3765) {597904} [598048]: Note that there is no guarantee that the existing materialized view is anything like the one that would have been created.
(4702) {745127} [745301]: Note that there is no guarantee that the existing relation is anything like the sequence that would have been created - it might not even be a sequence.
(5041) {802515} [802650]: Note that there is no guarantee that the existing relation is anything like the one that would have been created.
*****************************************************************
========================= CLASS #211 =============================
(1003) {155466} [155669]: EXAMPLES Drop a user mapping bob, server foo if it exists: DROP USER MAPPING IF EXISTS FOR bob SERVER foo; COMPATIBILITY DROP USER MAPPING conforms to ISO/IEC 9075-9 (SQL/MED).
(3929) {622643} [622801]: EXAMPLES Drop a server foo if it exists: DROP SERVER IF EXISTS foo; COMPATIBILITY DROP SERVER conforms to ISO/IEC 9075-9 (SQL/MED).
*****************************************************************
========================= CLASS #212 =============================
(1004) {155670} [155724]: The IF EXISTS clause is a PostgreSQL extension.
(1867) {291393} [291447]: The IF EXISTS clause is a PostgreSQL extension.
(3930) {622802} [622856]: The IF EXISTS clause is a PostgreSQL extension.
(4738) {751354} [751404]: o The OWNED BY clause is a PostgreSQL extension.
*****************************************************************
========================= CLASS #213 =============================
(1005) {155726} [156201]: SEE ALSO CREATE USER MAPPING (CREATE_USER_MAPPING(7)), ALTER USER MAPPING (ALTER_USER_MAPPING(7)) PostgreSQL 9.6.1 2016 DROP USER MAPPING(7) LISTEN(7) PostgreSQL 9.6.1 Documentation LISTEN(7) NAME LISTEN - listen for a notification SYNOPSIS LISTEN channel DESCRIPTION LISTEN registers the current session as a listener on the notification channel named channel.
(3717) {590727} [590867]: UNLISTEN cancels any existing registration of the current PostgreSQL session as a listener on the notification channel named channel.
*****************************************************************
========================= CLASS #214 =============================
(1014) {157479} [157565]: NOTIFY(7) contains a more extensive discussion of the use of LISTEN and NOTIFY.
(3719) {590973} [591059]: NOTIFY(7) contains a more extensive discussion of the use of LISTEN and NOTIFY.
*****************************************************************
========================= CLASS #215 =============================
(1021) {158256} [159512]: SEE ALSO NOTIFY(7), UNLISTEN(7) PostgreSQL 9.6.1 2016 LISTEN(7) ALTER TEXT SEARCH CONFIGPostgreSQL 9.6.1 DocALTERaTEXT SEARCH CONFIGURATION(7) NAME ALTER_TEXT_SEARCH_CONFIGURATION - change the definition of a text search configuration SYNOPSIS ALTER TEXT SEARCH CONFIGURATION name ADD MAPPING FOR token_type [, ... ] WITH dictionary_name [, ... ] ALTER TEXT SEARCH CONFIGURATION name ALTER MAPPING FOR token_type [, ... ] WITH dictionary_name [, ... ] ALTER TEXT SEARCH CONFIGURATION name ALTER MAPPING REPLACE old_dictionary WITH new_dictionary ALTER TEXT SEARCH CONFIGURATION name ALTER MAPPING FOR token_type [, ... ] REPLACE old_dictionary WITH new_dictionary ALTER TEXT SEARCH CONFIGURATION name DROP MAPPING [ IF EXISTS ] FOR token_type [, ... ] ALTER TEXT SEARCH CONFIGURATION name RENAME TO new_name ALTER TEXT SEARCH CONFIGURATION name OWNER TO { new_owner | CURRENT_USER | SESSION_USER } ALTER TEXT SEARCH CONFIGURATION name SET SCHEMA new_schema DESCRIPTION ALTER TEXT SEARCH CONFIGURATION changes the definition of a text search configuration.
(4956) {787154} [787885]: SEE ALSO DEALLOCATE(7), EXECUTE(7) PostgreSQL 9.6.1 2016 PREPARE(7) ALTER TEXT SEARCH DICTIOPostgreSQL 9.6.1 DocumeALTERoTEXT SEARCH DICTIONARY(7) NAME ALTER_TEXT_SEARCH_DICTIONARY - change the definition of a text search dictionary SYNOPSIS ALTER TEXT SEARCH DICTIONARY name ( option [ = value ] [, ... ] ) ALTER TEXT SEARCH DICTIONARY name RENAME TO new_name ALTER TEXT SEARCH DICTIONARY name OWNER TO { new_owner | CURRENT_USER | SESSION_USER } ALTER TEXT SEARCH DICTIONARY name SET SCHEMA new_schema DESCRIPTION ALTER TEXT SEARCH DICTIONARY changes the definition of a text search dictionary.
*****************************************************************
========================= CLASS #216 =============================
(1023) {159635} [159724]: You must be the owner of the configuration to use ALTER TEXT SEARCH CONFIGURATION.
(4958) {788002} [788085]: You must be the owner of the dictionary to use ALTER TEXT SEARCH DICTIONARY.
*****************************************************************
========================= CLASS #217 =============================
(1026) {159973} [160096]: dictionary_name The name of a text search dictionary to be consulted for the specified token type(s).
(1028) {160196} [160289]: old_dictionary The name of a text search dictionary to be replaced in the mapping.
(1029) {160298} [160409]: new_dictionary The name of a text search dictionary to be substituted for old_dictionary.
*****************************************************************
========================= CLASS #218 =============================
(1042) {162377} [162459]: To be able to drop a cast, you must own the source or the target data type.
(1223) {189313} [189379]: To be able to drop a collation, you must own the collation.
(3004) {477934} [478061]: To be able to create a cast, you must own the source or the target data type and have USAGE privilege on the other type.
(5575) {888451} [888519]: To be able to drop a conversion, you must own the conversion.
*****************************************************************
========================= CLASS #219 =============================
(1043) {162460} [162525]: These are the same privileges that are required to create a cast.
(2192) {342571} [342641]: These are the same privileges that are required to create a transform.
*****************************************************************
========================= CLASS #220 =============================
(1048) {162822} [162949]: CASCADE RESTRICT These key words do not have any effect, since there are no dependencies on casts.
(1457) {229930} [230060]: CASCADE RESTRICT These key words do not have any effect, since there are no dependencies on policies.
(5580) {888776} [888909]: CASCADE RESTRICT These key words do not have any effect, since there are no dependencies on conversions.
*****************************************************************
========================= CLASS #221 =============================
(1049) {162951} [163122]: EXAMPLES To drop the cast from type text to type int: DROP CAST (text AS int); COMPATIBILITY The DROP CAST command conforms to the SQL standard.
(1961) {306526} [306579]: Otherwise, this command conforms to the SQL standard.
*****************************************************************
========================= CLASS #222 =============================
(1050) {163124} [163566]: SEE ALSO CREATE CAST (CREATE_CAST(7)) PostgreSQL 9.6.1 2016 DROP CAST(7) DROP MATERIALIZED VIEW(7PostgreSQL 9.6.1 DocumentatioDROP MATERIALIZED VIEW(7) NAME DROP_MATERIALIZED_VIEW - remove a materialized view SYNOPSIS DROP MATERIALIZED VIEW [ IF EXISTS ] name [, ...] [ CASCADE | RESTRICT ] DESCRIPTION DROP MATERIALIZED VIEW drops an existing materialized view.
(2659) {415270} [415599]: PostgreSQL 9.6.1 2016 LOCK(7) DROP VIEW(7) PostgreSQL 9.6.1 Documentation DROP VIEW(7) NAME DROP_VIEW - remove a view SYNOPSIS DROP VIEW [ IF EXISTS ] name [, ...] [ CASCADE | RESTRICT ] DESCRIPTION DROP VIEW drops an existing view.
*****************************************************************
========================= CLASS #223 =============================
(1058) {164326} [164532]: EXAMPLES This command will remove the materialized view called order_summary: DROP MATERIALIZED VIEW order_summary; COMPATIBILITY DROP MATERIALIZED VIEW is a PostgreSQL extension.
(3778) {599522} [599594]: COMPATIBILITY CREATE MATERIALIZED VIEW is a PostgreSQL extension.
*****************************************************************
========================= CLASS #224 =============================
(1081) {168536} [168674]: Another alternative worth considering is to use INSTEAD OF triggers (see CREATE TRIGGER (CREATE_TRIGGER(7))) in place of rules.
(3365) {534604} [534670]: (See the CREATE TRIGGER (CREATE_TRIGGER(7)) statement.)
(4808) {762184} [762251]: For more information see CREATE TRIGGER (CREATE_TRIGGER(7)).
*****************************************************************
========================= CLASS #225 =============================
(1082) {168676} [168739]: PARAMETERS name The name of a rule to create.
(3709) {589360} [589397]: name The name of a schema.
(4618) {732621} [732662]: name The name of a tablespace.
(5595) {891304} [891371]: PARAMETERS name The name of a run-time parameter.
(5631) {897074} [897141]: PARAMETERS name The name of a database to create.
*****************************************************************
========================= CLASS #226 =============================
(1083) {168740} [168824]: This must be distinct from the name of any other rule for the same table.
(1275) {199898} [199985]: This must be distinct from the name of any other trigger for the same table.
(3256) {515685} [515766]: This must be distinct from the name of any other policy for the table.
*****************************************************************
========================= CLASS #227 =============================
(1088) {169211} [169324]: table_name The name (optionally schema-qualified) of the table or view the rule applies to.
(1456) {229814} [229921]: table_name The name (optionally schema-qualified) of the table that the policy is on.
(1939) {302981} [303099]: table_name The name (optionally schema-qualified) of the table or view that the rule applies to.
(2822) {442814} [442921]: table_name The name (optionally schema-qualified) of the table that the policy is on.
(2880) {455014} [455096]: To use ALTER RULE, you must own the table or view that the rule applies to.
(2882) {455179} [455297]: table_name The name (optionally schema-qualified) of the table or view that the rule applies to.
(3257) {515775} [515882]: table_name The name (optionally schema-qualified) of the table the policy applies to.
*****************************************************************
========================= CLASS #228 =============================
(1089) {169333} [169405]: condition Any SQL conditional expression (returning boolean).
(3264) {516273} [516352]: using_expression Any SQL conditional expression (returning boolean).
(3270) {516903} [516982]: check_expression Any SQL conditional expression (returning boolean).
*****************************************************************
========================= CLASS #229 =============================
(1091) {169548} [169665]: INSTEAD INSTEAD indicates that the commands should be executed instead of the original command.
(1092) {169674} [169789]: ALSO ALSO indicates that the commands should be executed in addition to the original command.
*****************************************************************
========================= CLASS #230 =============================
(1099) {170378} [170457]: NOTES You must be the owner of a table to create or change rules for it.
(3306) {523536} [523618]: NOTES You must be the owner of a table to create or change policies for it.
*****************************************************************
========================= CLASS #231 =============================
(1111) {172603} [173273]: SEE ALSO ALTER RULE (ALTER_RULE(7)), DROP RULE (DROP_RULE(7)) PostgreSQL 9.6.1 2016 CREATE RULE(7) ALTER TABLESPACE(7) PostgreSQL 9.6.1 Documentation ALTER TABLESPACE(7) NAME ALTER_TABLESPACE - change the definition of a tablespace SYNOPSIS ALTER TABLESPACE name RENAME TO new_name ALTER TABLESPACE name OWNER TO { new_owner | CURRENT_USER | SESSION_USER } ALTER TABLESPACE name SET ( tablespace_option = value [, ... ] ) ALTER TABLESPACE name RESET ( tablespace_option [, ... ] ) DESCRIPTION ALTER TABLESPACE can be used to change the definition of a tablespace.
(1112) {173282} [173351]: You must own the tablespace to change the definition of a tablespace.
*****************************************************************
========================= CLASS #232 =============================
(1114) {173455} [173521]: (Note that superusers have these privileges automatically.)
(1807) {283763} [283833]: (Note that superusers have all these privileges automatically.)
(5586) {890083} [890153]: (Note that superusers have all these privileges automatically.)
*****************************************************************
========================= CLASS #233 =============================
(1117) {173653} [173750]: The new name cannot begin with pg_, as such names are reserved for system tablespaces.
(2674) {417952} [418045]: The name cannot begin with pg_, as such names are reserved for system tablespaces.
(3848) {610568} [610657]: The name cannot begin with pg_, as such names are reserved for system schemas.
(5589) {890277} [890370]: The new name cannot begin with pg_, as such names are reserved for system schemas.
*****************************************************************
========================= CLASS #234 =============================
(1119) {173821} [173892]: tablespace_option A tablespace parameter to be set or reset.
(2681) {418566} [418637]: tablespace_option A tablespace parameter to be set or reset.
*****************************************************************
========================= CLASS #235 =============================
(1120) {173893} [173984]: Currently, the only available parameters are seq_page_cost and random_page_cost.
(2682) {418638} [418766]: Currently, the only available parameters are seq_page_cost, random_page_cost and effective_io_concurrency.
*****************************************************************
========================= CLASS #236 =============================
(1121) {173996} [174284]: Setting either value for a particular tablespace will override the planner's usual estimate of the cost of reading pages from tables in that tablespace, as established by the configuration parameters of the same name (see seq_page_cost, random_page_cost).
(2683) {418767} [419092]: Setting either value for a particular tablespace will override the planner's usual estimate of the cost of reading pages from tables in that tablespace, as established by the configuration parameters of the same name (see seq_page_cost, random_page_cost, effective_io_concurrency).
*****************************************************************
========================= CLASS #237 =============================
(1122) {174285} [174431]: This may be useful if one tablespace is located on a disk which is faster or slower than the remainder of the I/O subsystem.
(2684) {419093} [419239]: This may be useful if one tablespace is located on a disk which is faster or slower than the remainder of the I/O subsystem.
*****************************************************************
========================= CLASS #238 =============================
(1125) {177083} [177274]: There are several subforms: ADD COLUMN This form adds a new column to the foreign table, using the same syntax as CREATE FOREIGN TABLE (CREATE_FOREIGN_TABLE(7)).
(1143) {179186} [179367]: ADD table_constraint [ NOT VALID ] This form adds a new constraint to a foreign table, using the same syntax as CREATE FOREIGN TABLE (CREATE_FOREIGN_TABLE(7)).
(1146) {179707} [179789]: (See the discussion in CREATE FOREIGN TABLE (CREATE_FOREIGN_TABLE(7)).)
(5351) {853697} [853857]: ADD domain_constraint [ NOT VALID ] This form adds a new constraint to a domain using the same syntax as CREATE DOMAIN (CREATE_DOMAIN(7)).
*****************************************************************
========================= CLASS #239 =============================
(1137) {178568} [178649]: See the similar form of ALTER TABLE (ALTER_TABLE(7)) for more details.
(1139) {178802} [178883]: See the similar form of ALTER TABLE (ALTER_TABLE(7)) for more details.
(1141) {178961} [179042]: See the similar form of ALTER TABLE (ALTER_TABLE(7)) for more details.
(1154) {180566} [180647]: See the similar form of ALTER TABLE (ALTER_TABLE(7)) for more details.
(1162) {181512} [181593]: See the similar form of ALTER TABLE (ALTER_TABLE(7)) for more details.
(1896) {296532} [296605]: See the descriptions for ALTER TABLE (ALTER_TABLE(7)) for details.
(3548) {563600} [563683]: See the similar form of CREATE TABLE (CREATE_TABLE(7)) for more details.
*****************************************************************
========================= CLASS #240 =============================
(1168) {182129} [182270]: Duplicate option names are not allowed (although it's OK for a table option and a column option to have the same name).
(3572) {566482} [566623]: Duplicate option names are not allowed (although it's OK for a table option and a column option to have the same name).
*****************************************************************
========================= CLASS #241 =============================
(1191) {184500} [184566]: constraint_name Name of an existing constraint to drop.
(5372) {855983} [856059]: constraint_name Name of an existing constraint to drop or rename.
*****************************************************************
========================= CLASS #242 =============================
(1205) {186096} [186202]: It is the user's responsibility to ensure that the table definition matches the remote side.
(3580) {567933} [568029]: It is the user's responsibility to ensure that the constraint definition matches reality.
*****************************************************************
========================= CLASS #243 =============================
(1222) {188850} [189312]: SEE ALSO CREATE CONVERSION (CREATE_CONVERSION(7)), DROP CONVERSION (DROP_CONVERSION(7)) PostgreSQL 9.6.1 2016 ALTER CONVERSION(7) DROP COLLATION(7) PostgreSQL 9.6.1 Documentation DROP COLLATION(7) NAME DROP_COLLATION - remove a collation SYNOPSIS DROP COLLATION [ IF EXISTS ] name [ CASCADE | RESTRICT ] DESCRIPTION DROP COLLATION removes a previously defined collation.
(5574) {888053} [888450]: SEE ALSO SET(7), SHOW(7) PostgreSQL 9.6.1 2016 ALTER SYSTEM(7) DROP CONVERSION(7) PostgreSQL 9.6.1 Documentation DROP CONVERSION(7) NAME DROP_CONVERSION - remove a conversion SYNOPSIS DROP CONVERSION [ IF EXISTS ] name [ CASCADE | RESTRICT ] DESCRIPTION DROP CONVERSION removes a previously defined conversion.
*****************************************************************
========================= CLASS #244 =============================
(1232) {190208} [191298]: SEE ALSO ALTER COLLATION (ALTER_COLLATION(7)), CREATE COLLATION (CREATE_COLLATION(7)) PostgreSQL 9.6.1 2016 DROP COLLATION(7) CREATE USER(7) PostgreSQL 9.6.1 Documentation CREATE USER(7) NAME CREATE_USER - define a new database role SYNOPSIS CREATE USER name [ [ WITH ] option [ ... ] ] where option can be: SUPERUSER | NOSUPERUSER | CREATEDB | NOCREATEDB | CREATEROLE | NOCREATEROLE | INHERIT | NOINHERIT | LOGIN | NOLOGIN | REPLICATION | NOREPLICATION | BYPASSRLS | NOBYPASSRLS | CONNECTION LIMIT connlimit | [ ENCRYPTED | UNENCRYPTED ] PASSWORD 'password' | VALID UNTIL 'timestamp' | IN ROLE role_name [, ...] | IN GROUP role_name [, ...] | ROLE role_name [, ...] | ADMIN role_name [, ...] | USER role_name [, ...] | SYSID uid DESCRIPTION CREATE USER is now an alias for CREATE ROLE (CREATE_ROLE(7)).
(3948) {625723} [626710]: PostgreSQL 9.6.1 2016 CHECKPOINT(7) CREATE ROLE(7) PostgreSQL 9.6.1 Documentation CREATE ROLE(7) NAME CREATE_ROLE - define a new database role SYNOPSIS CREATE ROLE name [ [ WITH ] option [ ... ] ] where option can be: SUPERUSER | NOSUPERUSER | CREATEDB | NOCREATEDB | CREATEROLE | NOCREATEROLE | INHERIT | NOINHERIT | LOGIN | NOLOGIN | REPLICATION | NOREPLICATION | BYPASSRLS | NOBYPASSRLS | CONNECTION LIMIT connlimit | [ ENCRYPTED | UNENCRYPTED ] PASSWORD 'password' | VALID UNTIL 'timestamp' | IN ROLE role_name [, ...] | IN GROUP role_name [, ...] | ROLE role_name [, ...] | ADMIN role_name [, ...] | USER role_name [, ...] | SYSID uid DESCRIPTION CREATE ROLE adds a new role to a PostgreSQL database cluster.
(5008) {794892} [795863]: SEE ALSO ALTER COLLATION (ALTER_COLLATION(7)), DROP COLLATION (DROP_COLLATION(7)) PostgreSQL 9.6.1 2016 CREATE COLLATION(7) CREATE GROUP(7) PostgreSQL 9.6.1 Documentation CREATE GROUP(7) NAME CREATE_GROUP - define a new database role SYNOPSIS CREATE GROUP name [ [ WITH ] option [ ... ] ] where option can be: SUPERUSER | NOSUPERUSER | CREATEDB | NOCREATEDB | CREATEROLE | NOCREATEROLE | INHERIT | NOINHERIT | LOGIN | NOLOGIN | [ ENCRYPTED | UNENCRYPTED ] PASSWORD 'password' | VALID UNTIL 'timestamp' | IN ROLE role_name [, ...] | IN GROUP role_name [, ...] | ROLE role_name [, ...] | ADMIN role_name [, ...] | USER role_name [, ...] | SYSID uid DESCRIPTION CREATE GROUP is now an alias for CREATE ROLE (CREATE_ROLE(7)).
*****************************************************************
========================= CLASS #245 =============================
(1234) {191487} [191560]: COMPATIBILITY The CREATE USER statement is a PostgreSQL extension.
(1660) {262370} [262442]: COMPATIBILITY The ALTER USER statement is a PostgreSQL extension.
(3526) {560321} [560392]: COMPATIBILITY The DROP USER statement is a PostgreSQL extension.
*****************************************************************
========================= CLASS #246 =============================
(1235) {191561} [191638]: The SQL standard leaves the definition of users to the implementation.
(1661) {262443} [262520]: The SQL standard leaves the definition of users to the implementation.
(3527) {560393} [560470]: The SQL standard leaves the definition of users to the implementation.
*****************************************************************
========================= CLASS #247 =============================
(1237) {192198} [192412]: A user mapping typically encapsulates connection information that a foreign-data wrapper uses together with the information encapsulated by a foreign server to access an external data resource.
(1573) {247623} [247762]: A foreign server typically encapsulates connection information that a foreign-data wrapper uses to access an external data resource.
*****************************************************************
========================= CLASS #248 =============================
(1274) {199830} [199897]: PARAMETERS name The name to give the new trigger.
(5685) {904264} [904331]: PARAMETERS name The name to give the new trigger.
*****************************************************************
========================= CLASS #249 =============================
(1284) {200990} [201118]: table_name The name (optionally schema-qualified) of the table, view, or foreign table the trigger is for.
(4663) {739772} [739890]: table_name The name (optionally schema-qualified) of the table for which the trigger is defined.
*****************************************************************
========================= CLASS #250 =============================
(1287) {201354} [201416]: This can only be specified for constraint triggers.
(1290) {201673} [201724]: This can only be specified for constraint triggers.
*****************************************************************
========================= CLASS #251 =============================
(1302) {203031} [203212]: function_name A user-supplied function that is declared as taking no arguments and returning type trigger, which is executed when the trigger fires.
(5695) {905112} [905245]: function_name A user-supplied function that is declared as taking no argument and returning type event_trigger.
*****************************************************************
========================= CLASS #252 =============================
(1319) {205614} [205771]: In PostgreSQL versions before 7.3, it was necessary to declare trigger functions as returning the placeholder type opaque, rather than trigger.
(2016) {314895} [315061]: In PostgreSQL versions before 7.3, it was necessary to declare handler functions as returning the placeholder type opaque, rather than language_handler.
*****************************************************************
========================= CLASS #253 =============================
(1320) {205772} [205977]: To support loading of old dump files, CREATE TRIGGER will accept a function declared as returning opaque, but it will issue a notice and change the function's declared return type to trigger.
(2017) {315062} [315284]: To support loading of old dump files, CREATE LANGUAGE will accept a function declared as returning opaque, but it will issue a notice and change the function's declared return type to language_handler.
(2460) {380464} [380673]: To support loading of old dump files, CREATE TYPE will accept I/O functions declared using opaque, but it will issue a notice and change the function declarations to use the correct types.
*****************************************************************
========================= CLASS #254 =============================
(1323) {207139} [207731]: *) EXECUTE PROCEDURE log_account_update(); Execute the function view_insert_row for each row to insert rows into the tables underlying a view: CREATE TRIGGER view_insert INSTEAD OF INSERT ON my_view FOR EACH ROW EXECUTE PROCEDURE view_insert_row(); Section 37.4, "A Complete Trigger Example", in the documentation contains a complete example of a trigger function written in C. COMPATIBILITY The CREATE TRIGGER statement in PostgreSQL implements a subset of the SQL standard.
(5280) {841040} [841112]: Typed Tables Typed tables implement a subset of the SQL standard.
*****************************************************************
========================= CLASS #255 =============================
(1337) {209614} [209737]: The ability to specify multiple actions for a single trigger using OR is a PostgreSQL extension of the SQL standard.
(1339) {209920} [209999]: CREATE CONSTRAINT TRIGGER is a PostgreSQL extension of the SQL standard.
*****************************************************************
========================= CLASS #256 =============================
(1343) {211077} [211203]: With no parameter, VACUUM processes every table in the current database that the current user has permission to vacuum.
(3586) {569692} [569771]: With no parameter, ANALYZE examines every table in the current database.
*****************************************************************
========================= CLASS #257 =============================
(1344) {211204} [211262]: With a parameter, VACUUM processes only that table.
(3587) {569772} [569823]: With a parameter, ANALYZE examines only that table.
*****************************************************************
========================= CLASS #258 =============================
(1370) {214473} [214537]: column_name The name of a specific column to analyze.
(3592) {570259} [570323]: column_name The name of a specific column to analyze.
*****************************************************************
========================= CLASS #259 =============================
(1371) {214538} [214562]: Defaults to all columns.
(3593) {570324} [570348]: Defaults to all columns.
*****************************************************************
========================= CLASS #260 =============================
(1373) {214626} [214759]: OUTPUTS When VERBOSE is specified, VACUUM emits progress messages to indicate which table is currently being processed.
(3594) {570350} [570484]: OUTPUTS When VERBOSE is specified, ANALYZE emits progress messages to indicate which table is currently being processed.
*****************************************************************
========================= CLASS #261 =============================
(1374) {214760} [214823]: Various statistics about the tables are printed as well.
(3595) {570485} [570548]: Various statistics about the tables are printed as well.
*****************************************************************
========================= CLASS #262 =============================
(1381) {215528} [215617]: See Section 63.4.1, "GIN Fast Update Technique", in the documentation for details.
(5231) {829974} [830054]: See Section 47.6.2, "Capabilities", in the documentation for details.
*****************************************************************
========================= CLASS #263 =============================
(1393) {216990} [217326]: EXAMPLES The following is an example from running VACUUM on a table in the regression database: regression=# VACUUM (VERBOSE, ANALYZE) onek; INFO: vacuuming "public.onek" INFO: index "onek_unique1" now contains 1000 tuples in 14 pages DETAIL: 3000 index tuples were removed.
(1396) {217457} [217573]: INFO: index "onek_unique2" now contains 1000 tuples in 16 pages DETAIL: 3000 index tuples were removed.
(1399) {217704} [217820]: INFO: index "onek_hundred" now contains 1000 tuples in 13 pages DETAIL: 3000 index tuples were removed.
(1402) {217951} [218068]: INFO: index "onek_stringu1" now contains 1000 tuples in 48 pages DETAIL: 3000 index tuples were removed.
*****************************************************************
========================= CLASS #264 =============================
(1394) {217338} [217396]: 0 index pages have been deleted, 0 are currently reusable.
(1397) {217585} [217643]: 0 index pages have been deleted, 0 are currently reusable.
(1400) {217832} [217890]: 0 index pages have been deleted, 0 are currently reusable.
(1403) {218080} [218138]: 0 index pages have been deleted, 0 are currently reusable.
*****************************************************************
========================= CLASS #265 =============================
(1415) {222979} [223172]: Note that any particular role will have the sum of privileges granted directly to it, privileges granted to any role it is presently a member of, and privileges granted to PUBLIC.
(3331) {530565} [530748]: Any particular role will have the sum of privileges granted directly to it, privileges granted to any role it is presently a member of, and privileges granted to PUBLIC.
*****************************************************************
========================= CLASS #266 =============================
(1425) {224660} [224821]: On the other hand, if a role has been granted privileges on a table, then revoking the same privileges from individual columns will have no effect.
(1646) {259766} [259786]: They have no effect.
(3103) {493953} [493973]: They have no effect.
(4035) {638408} [638428]: They have no effect.
(5552) {884888} [884908]: They have no effect.
(5741) {912334} [912354]: They have no effect.
*****************************************************************
========================= CLASS #267 =============================
(1427) {224947} [225030]: Note also that this form of the command does not allow the noise word GROUP.
(3402) {539070} [539153]: Note also that this form of the command does not allow the noise word GROUP.
*****************************************************************
========================= CLASS #268 =============================
(1428) {225032} [225143]: NOTES Use psql(1)'s \dp command to display the privileges granted on existing tables and columns.
(3428) {542597} [542701]: Use psql(1)'s \dp command to obtain information about existing privileges for tables and columns.
*****************************************************************
========================= CLASS #269 =============================
(1433) {225928} [226103]: When a non-owner of an object attempts to REVOKE privileges on the object, the command will fail outright if the user has no privileges whatsoever on the object.
(3410) {539908} [540082]: When a non-owner of an object attempts to GRANT privileges on the object, the command will fail outright if the user has no privileges whatsoever on the object.
*****************************************************************
========================= CLASS #270 =============================
(1434) {226104} [226262]: As long as some privilege is available, the command will proceed, but it will revoke only those privileges for which the user has grant options.
(3411) {540083} [540240]: As long as some privilege is available, the command will proceed, but it will grant only those privileges for which the user has grant options.
*****************************************************************
========================= CLASS #271 =============================
(1435) {226263} [226508]: The REVOKE ALL PRIVILEGES forms will issue a warning message if no grant options are held, while the other forms will issue a warning if grant options for any of the privileges specifically named in the command are not held.
(3412) {540241} [540485]: The GRANT ALL PRIVILEGES forms will issue a warning message if no grant options are held, while the other forms will issue a warning if grant options for any of the privileges specifically named in the command are not held.
*****************************************************************
========================= CLASS #272 =============================
(1436) {226509} [226691]: (In principle these statements apply to the object owner as well, but since the owner is always treated as holding all grant options, the cases can never occur.)
(3413) {540486} [540668]: (In principle these statements apply to the object owner as well, but since the owner is always treated as holding all grant options, the cases can never occur.)
*****************************************************************
========================= CLASS #273 =============================
(1437) {226700} [226859]: If a superuser chooses to issue a GRANT or REVOKE command, the command is performed as though it were issued by the owner of the affected object.
(3417) {540959} [541118]: If a superuser chooses to issue a GRANT or REVOKE command, the command is performed as though it were issued by the owner of the affected object.
*****************************************************************
========================= CLASS #274 =============================
(1439) {227111} [227334]: REVOKE can also be done by a role that is not the owner of the affected object, but is a member of the role that owns the object, or is a member of a role that holds privileges WITH GRANT OPTION on the object.
(3420) {541353} [541593]: GRANT and REVOKE can also be done by a role that is not the owner of the affected object, but is a member of the role that owns the object, or is a member of a role that holds privileges WITH GRANT OPTION on the object.
*****************************************************************
========================= CLASS #275 =============================
(1440) {227342} [227514]: In this case the command is performed as though it were issued by the containing role that actually owns the object or holds the privileges WITH GRANT OPTION.
(3421) {541594} [541760]: In this case the privileges will be recorded as having been granted by the role that actually owns the object or holds the privileges WITH GRANT OPTION.
*****************************************************************
========================= CLASS #276 =============================
(1441) {227515} [227682]: For example, if table t1 is owned by role g1, of which role u1 is a member, then u1 can revoke privileges on t1 that are recorded as being granted by g1.
(3422) {541761} [541969]: For example, if table t1 is owned by role g1, of which role u1 is a member, then u1 can grant privileges on t1 to u2, but those privileges will appear to have been granted directly by g1.
*****************************************************************
========================= CLASS #277 =============================
(1443) {227775} [227962]: If the role executing REVOKE holds privileges indirectly via more than one role membership path, it is unspecified which containing role will be used to perform the command.
(3424) {542031} [542236]: If the role executing GRANT holds the required privileges indirectly via more than one role membership path, it is unspecified which containing role will be recorded as having done the grant.
*****************************************************************
========================= CLASS #278 =============================
(1444) {227963} [228077]: In such cases it is best practice to use SET ROLE to become the specific role you want to do the REVOKE as.
(3425) {542237} [542357]: In such cases it is best practice to use SET ROLE to become the specific role you want to do the GRANT as.
*****************************************************************
========================= CLASS #279 =============================
(1455) {229758} [229805]: name The name of the policy to drop.
(1938) {302927} [302972]: name The name of the rule to drop.
*****************************************************************
========================= CLASS #280 =============================
(1458) {230062} [230237]: EXAMPLES To drop the policy called p1 on the table named my_table: DROP POLICY p1 ON my_table; COMPATIBILITY DROP POLICY is a PostgreSQL extension.
(2831) {443436} [443496]: COMPATIBILITY ALTER POLICY is a PostgreSQL extension.
(3322) {526228} [526289]: COMPATIBILITY CREATE POLICY is a PostgreSQL extension.
*****************************************************************
========================= CLASS #281 =============================
(1470) {232374} [232411]: For more details see ORDER BY Clause.
(1472) {232460} [232492]: For details see ORDER BY Clause.
*****************************************************************
========================= CLASS #282 =============================
(1474) {232556} [232585]: For details see LIMIT Clause.
(1476) {232670} [232710]: For details see LIMIT Clause.
*****************************************************************
========================= CLASS #283 =============================
(1492) {236508} [236586]: Note This page describes usage of cursors at the SQL command level.
(3881) {616118} [616196]: Note This page describes usage of cursors at the SQL command level.
*****************************************************************
========================= CLASS #284 =============================
(1493) {236587} [236747]: If you are trying to use cursors inside a PL/pgSQL function, the rules are different -- see Section 41.7, "Cursors", in the documentation.
(3882) {616197} [616357]: If you are trying to use cursors inside a PL/pgSQL function, the rules are different -- see Section 41.7, "Cursors", in the documentation.
*****************************************************************
========================= CLASS #285 =============================
(1498) {237306} [237458]: SCROLL NO SCROLL SCROLL specifies that the cursor can be used to retrieve rows in a nonsequential fashion (e.g., backward).
(1500) {237627} [237744]: NO SCROLL specifies that the cursor cannot be used to retrieve rows in a nonsequential fashion.
*****************************************************************
========================= CLASS #286 =============================
(1506) {238283} [238401]: query A SELECT(7) or VALUES(7) command which will provide the rows to be returned by the cursor.
(4764) {755015} [755128]: query A SELECT(7) or VALUES(7) command which will provide the columns and rows of the view.
*****************************************************************
========================= CLASS #287 =============================
(1507) {238410} [238480]: The key words BINARY, INSENSITIVE, and SCROLL can appear in any order.
(1637) {257479} [257515]: The options can appear in any order.
(4966) {788806} [788856]: Template-specific options can appear in any order.
*****************************************************************
========================= CLASS #288 =============================
(1518) {239916} [240067]: Thus, DECLARE without WITH HOLD is useless outside a transaction block: the cursor would survive only to the completion of the statement.
(2646) {412921} [413046]: LOCK TABLE is useless outside a transaction block: the lock would remain held only to the completion of the statement.
*****************************************************************
========================= CLASS #289 =============================
(1519) {240068} [240167]: Therefore PostgreSQL reports an error if such a command is used outside a transaction block.
(2647) {413047} [413143]: Therefore PostgreSQL reports an error if LOCK is used outside a transaction block.
*****************************************************************
========================= CLASS #290 =============================
(1520) {240168} [240249]: Use BEGIN(7) and COMMIT(7) (or ROLLBACK(7)) to define a transaction block.
(2648) {413144} [413225]: Use BEGIN(7) and COMMIT(7) (or ROLLBACK(7)) to define a transaction block.
*****************************************************************
========================= CLASS #291 =============================
(1532) {241705} [241920]: Caution Scrollable and WITH HOLD cursors may give unexpected results if they invoke any volatile functions (see Section 36.6, "Function Volatility Categories", in the documentation).
(2093) {326038} [326145]: For additional details see Section 36.6, "Function Volatility Categories", in the documentation.
*****************************************************************
========================= CLASS #292 =============================
(1549) {244664} [244744]: You can see all available cursors by querying the pg_cursors system view.
(1567) {246623} [246703]: You can see all available cursors by querying the pg_cursors system view.
*****************************************************************
========================= CLASS #293 =============================
(1578) {248123} [248212]: server_type Optional server type, potentially useful to foreign-data wrappers.
(1579) {248221} [248327]: server_version Optional server version, potentially useful to foreign-data wrappers.
*****************************************************************
========================= CLASS #294 =============================
(1587) {249332} [250434]: SEE ALSO ALTER SERVER (ALTER_SERVER(7)), DROP SERVER (DROP_SERVER(7)), CREATE FOREIGN DATA WRAPPER (CREATE_FOREIGN_DATA_WRAPPER(7)), CREATE FOREIGN TABLE (CREATE_FOREIGN_TABLE(7)), CREATE USER MAPPING (CREATE_USER_MAPPING(7)) PostgreSQL 9.6.1 2016 CREATE SERVER(7) ALTER VIEW(7) PostgreSQL 9.6.1 Documentation ALTER VIEW(7) NAME ALTER_VIEW - change the definition of a view SYNOPSIS ALTER VIEW [ IF EXISTS ] name ALTER [ COLUMN ] column_name SET DEFAULT expression ALTER VIEW [ IF EXISTS ] name ALTER [ COLUMN ] column_name DROP DEFAULT ALTER VIEW [ IF EXISTS ] name OWNER TO { new_owner | CURRENT_USER | SESSION_USER } ALTER VIEW [ IF EXISTS ] name RENAME TO new_name ALTER VIEW [ IF EXISTS ] name SET SCHEMA new_schema ALTER VIEW [ IF EXISTS ] name SET ( view_option_name [= view_option_value] [, ... ] ) ALTER VIEW [ IF EXISTS ] name RESET ( view_option_name [, ... ] ) DESCRIPTION ALTER VIEW changes various auxiliary properties of a view.
(1603) {251842} [251981]: SET ( view_option_name [= view_option_value] [, ... ] ) RESET ( view_option_name [, ... ] ) Sets or resets a view option.
*****************************************************************
========================= CLASS #295 =============================
(1609) {252529} [253103]: EXAMPLES To rename the view foo to bar: ALTER VIEW foo RENAME TO bar; To attach a default column value to an updatable view: CREATE TABLE base_table (id int, ts timestamptz); CREATE VIEW a_view AS SELECT * FROM base_table; ALTER VIEW a_view ALTER COLUMN ts SET DEFAULT now(); INSERT INTO base_table(id) VALUES(1); -- ts will receive a NULL INSERT INTO a_view(id) VALUES(2); -- ts will receive the current time COMPATIBILITY ALTER VIEW is a PostgreSQL extension of the SQL standard.
(1904) {297200} [297387]: EXAMPLES To rename the materialized view foo to bar: ALTER MATERIALIZED VIEW foo RENAME TO bar; COMPATIBILITY ALTER MATERIALIZED VIEW is a PostgreSQL extension.
*****************************************************************
========================= CLASS #296 =============================
(1611) {253953} [254001]: You must own the operator to use ALTER OPERATOR.
(2469) {384155} [384215]: You must own the operator class to use ALTER OPERATOR CLASS.
*****************************************************************
========================= CLASS #297 =============================
(1616) {254495} [254620]: left_type The data type of the operator's left operand; write NONE if the operator has no left operand.
(1617) {254629} [254757]: right_type The data type of the operator's right operand; write NONE if the operator has no right operand.
(5751) {913532} [913657]: left_type The data type of the operator's left operand; write NONE if the operator has no left operand.
(5752) {913666} [913794]: right_type The data type of the operator's right operand; write NONE if the operator has no right operand.
*****************************************************************
========================= CLASS #298 =============================
(1620) {254889} [255038]: res_proc The restriction selectivity estimator function for this operator; write NONE to remove existing selectivity estimator.
(1621) {255047} [255190]: join_proc The join selectivity estimator function for this operator; write NONE to remove existing selectivity estimator.
*****************************************************************
========================= CLASS #299 =============================
(1630) {256797} [256888]: Refer to Chapter 12, Full Text Search, in the documentation for further information.
(1878) {293024} [293115]: Refer to Chapter 12, Full Text Search, in the documentation for further information.
(3203) {507902} [507993]: Refer to Chapter 12, Full Text Search, in the documentation for further information.
(3787) {601198} [601289]: Refer to Chapter 12, Full Text Search, in the documentation for further information.
*****************************************************************
========================= CLASS #300 =============================
(1634) {257163} [257261]: option The name of a template-specific option to be set for this dictionary.
(4960) {788218} [788316]: option The name of a template-specific option to be set for this dictionary.
*****************************************************************
========================= CLASS #301 =============================
(1635) {257270} [257335]: value The value to use for a template-specific option.
(4961) {788325} [788394]: value The new value to use for a template-specific option.
*****************************************************************
========================= CLASS #302 =============================
(1640) {257925} [258773]: SEE ALSO ALTER TEXT SEARCH DICTIONARY (ALTER_TEXT_SEARCH_DICTIONARY(7)), DROP TEXT SEARCH DICTIONARY (DROP_TEXT_SEARCH_DICTIONARY(7)) PostgreSQL 9.6.1 2016 CREATE TEXT SEARCH DICTIONARY(7) BEGIN(7) PostgreSQL 9.6.1 Documentation BEGIN(7) NAME BEGIN - start a transaction block SYNOPSIS BEGIN [ WORK | TRANSACTION ] [ transaction_mode [, ...] ] where transaction_mode is one of: ISOLATION LEVEL { SERIALIZABLE | REPEATABLE READ | READ COMMITTED | READ UNCOMMITTED } READ WRITE | READ ONLY [ NOT ] DEFERRABLE DESCRIPTION BEGIN initiates a transaction block, that is, all statements after a BEGIN command will be executed in a single transaction until an explicit COMMIT(7) or ROLLBACK(7) is given.
(1649) {260029} [260091]: Use COMMIT(7) or ROLLBACK(7) to terminate a transaction block.
(2807) {439665} [440500]: SEE ALSO CREATE OPERATOR FAMILY (CREATE_OPERATOR_FAMILY(7)), DROP OPERATOR FAMILY (DROP_OPERATOR_FAMILY(7)), CREATE OPERATOR CLASS (CREATE_OPERATOR_CLASS(7)), ALTER OPERATOR CLASS (ALTER_OPERATOR_CLASS(7)), DROP OPERATOR CLASS (DROP_OPERATOR_CLASS(7)) PostgreSQL 9.6.1 2016 ALTER OPERATOR FAMILY(7) START TRANSACTION(7) PostgreSQL 9.6.1 Documentation START TRANSACTION(7) NAME START_TRANSACTION - start a transaction block SYNOPSIS START TRANSACTION [ transaction_mode [, ...] ] where transaction_mode is one of: ISOLATION LEVEL { SERIALIZABLE | REPEATABLE READ | READ COMMITTED | READ UNCOMMITTED } READ WRITE | READ ONLY [ NOT ] DEFERRABLE DESCRIPTION This command begins a new transaction block.
(4036) {638430} [638497]: NOTES Use COMMIT(7) to successfully terminate a transaction.
(5553) {884910} [884977]: NOTES Use COMMIT(7) to successfully terminate a transaction.
*****************************************************************
========================= CLASS #303 =============================
(1644) {259500} [259691]: If the isolation level, read/write mode, or deferrable mode is specified, the new transaction has those characteristics, as if SET TRANSACTION (SET_TRANSACTION(7)) was executed.
(2808) {440501} [440699]: If the isolation level, read/write mode, or deferrable mode is specified, the new transaction has those characteristics, as if SET TRANSACTION (SET_TRANSACTION(7)) was executed.
*****************************************************************
========================= CLASS #304 =============================
(1645) {259693} [259765]: PARAMETERS WORK TRANSACTION Optional key words.
(3102) {493880} [493952]: PARAMETERS WORK TRANSACTION Optional key words.
(4034) {638335} [638407]: PARAMETERS WORK TRANSACTION Optional key words.
(5551) {884815} [884887]: PARAMETERS WORK TRANSACTION Optional key words.
(5740) {912261} [912333]: PARAMETERS WORK TRANSACTION Optional key words.
*****************************************************************
========================= CLASS #305 =============================
(1647) {259795} [259921]: Refer to SET TRANSACTION (SET_TRANSACTION(7)) for information on the meaning of the other parameters to this statement.
(2810) {440743} [440881]: PARAMETERS Refer to SET TRANSACTION (SET_TRANSACTION(7)) for information on the meaning of the parameters to this statement.
*****************************************************************
========================= CLASS #306 =============================
(1654) {260457} [260585]: EXAMPLES To begin a transaction block: BEGIN; COMPATIBILITY BEGIN is a PostgreSQL language extension.
(1656) {260763} [260829]: The DEFERRABLEtransaction_mode is a PostgreSQL language extension.
(2814) {441352} [441418]: The DEFERRABLEtransaction_mode is a PostgreSQL language extension.
(3947) {625640} [625719]: COMPATIBILITY The CHECKPOINT command is a PostgreSQL language extension.
(5534) {882039} [882112]: COMPATIBILITY CREATE AGGREGATE is a PostgreSQL language extension.
*****************************************************************
========================= CLASS #307 =============================
(1659) {261033} [262368]: SEE ALSO COMMIT(7), ROLLBACK(7), START TRANSACTION (START_TRANSACTION(7)), SAVEPOINT(7) PostgreSQL 9.6.1 2016 BEGIN(7) ALTER USER(7) PostgreSQL 9.6.1 Documentation ALTER USER(7) NAME ALTER_USER - change a database role SYNOPSIS ALTER USER role_specification [ WITH ] option [ ... ] where option can be: SUPERUSER | NOSUPERUSER | CREATEDB | NOCREATEDB | CREATEROLE | NOCREATEROLE | INHERIT | NOINHERIT | LOGIN | NOLOGIN | REPLICATION | NOREPLICATION | BYPASSRLS | NOBYPASSRLS | CONNECTION LIMIT connlimit | [ ENCRYPTED | UNENCRYPTED ] PASSWORD 'password' | VALID UNTIL 'timestamp' ALTER USER name RENAME TO new_name ALTER USER role_specification SET configuration_parameter { TO | = } { value | DEFAULT } ALTER USER role_specification SET configuration_parameter FROM CURRENT ALTER USER role_specification RESET configuration_parameter ALTER USER role_specification RESET ALL where role_specification can be: [ GROUP ] role_name | CURRENT_USER | SESSION_USER DESCRIPTION ALTER USER is now an alias for ALTER ROLE (ALTER_ROLE(7)).
(3656) {580393} [581893]: SEE ALSO PREPARE TRANSACTION (PREPARE_TRANSACTION(7)), ROLLBACK PREPARED (ROLLBACK_PREPARED(7)) PostgreSQL 9.6.1 2016 COMMIT PREPARED(7) ALTER ROLE(7) PostgreSQL 9.6.1 Documentation ALTER ROLE(7) NAME ALTER_ROLE - change a database role SYNOPSIS ALTER ROLE role_specification [ WITH ] option [ ... ] where option can be: SUPERUSER | NOSUPERUSER | CREATEDB | NOCREATEDB | CREATEROLE | NOCREATEROLE | INHERIT | NOINHERIT | LOGIN | NOLOGIN | REPLICATION | NOREPLICATION | BYPASSRLS | NOBYPASSRLS | CONNECTION LIMIT connlimit | [ ENCRYPTED | UNENCRYPTED ] PASSWORD 'password' | VALID UNTIL 'timestamp' ALTER ROLE name RENAME TO new_name ALTER ROLE { role_specification | ALL } [ IN DATABASE database_name ] SET configuration_parameter { TO | = } { value | DEFAULT } ALTER ROLE { role_specification | ALL } [ IN DATABASE database_name ] SET configuration_parameter FROM CURRENT ALTER ROLE { role_specification | ALL } [ IN DATABASE database_name ] RESET configuration_parameter ALTER ROLE { role_specification | ALL } [ IN DATABASE database_name ] RESET ALL where role_specification can be: [ GROUP ] role_name | CURRENT_USER | SESSION_USER DESCRIPTION ALTER ROLE changes the attributes of a PostgreSQL role.
*****************************************************************
========================= CLASS #308 =============================
(1685) {266375} [266498]: There are several caveats to be aware of when using this option -- see Building Indexes Concurrently.
(4674) {741489} [741553]: There are several caveats to be aware of when using this option.
*****************************************************************
========================= CLASS #309 =============================
(1705) {268228} [268250]: See below for details.
(1799) {283135} [283166]: (See below for details.)
*****************************************************************
========================= CLASS #310 =============================
(1709) {268461} [268515]: This is the default when DESC is specified.
(1711) {268589} [268647]: This is the default when DESC is not specified.
*****************************************************************
========================= CLASS #311 =============================
(1712) {268656} [268740]: storage_parameter The name of an index-method-specific storage parameter.
(3749) {595302} [595386]: storage_parameter The name of an index-method-specific storage parameter.
*****************************************************************
========================= CLASS #312 =============================
(1715) {268874} [268999]: If not specified, default_tablespace is consulted, or temp_tablespaces for indexes on temporary tables.
(2738) {427119} [427227]: If not specified, default_tablespace is consulted, or temp_tablespaces if the table is temporary.
(3773) {598935} [598996]: If not specified, default_tablespace is consulted.
(5189) {823620} [823728]: If not specified, default_tablespace is consulted, or temp_tablespaces if the table is temporary.
(5191) {823953} [824061]: If not specified, default_tablespace is consulted, or temp_tablespaces if the table is temporary.
*****************************************************************
========================= CLASS #313 =============================
(1730) {271104} [271249]: (Alternative spellings of ON and OFF are allowed as described in Section 19.1, "Setting Parameters", in the documentation.)
(5572) {887661} [887766]: See Section 19.1, "Setting Parameters", in the documentation for other ways to set the parameters.
*****************************************************************
========================= CLASS #314 =============================
(1766) {276437} [276591]: Another difference is that a regular CREATE INDEX command can be performed within a transaction block, but CREATE INDEX CONCURRENTLY cannot.
(4677) {741760} [741896]: Also, regular DROP INDEX commands can be performed within a transaction block, but DROP INDEX CONCURRENTLY cannot.
*****************************************************************
========================= CLASS #315 =============================
(1783) {278472} [278696]: More information about operator classes is in Section 11.9, "Operator Classes and Operator Families", in the documentation and in Section 36.14, "Interfacing Extensions To Indexes", in the documentation.
(2218) {346041} [346154]: Refer to Section 36.14, "Interfacing Extensions To Indexes", in the documentation for further information.
(2775) {434133} [434246]: Refer to Section 36.14, "Interfacing Extensions To Indexes", in the documentation for further information.
(3173) {502985} [503098]: Refer to Section 36.14, "Interfacing Extensions To Indexes", in the documentation for further information.
*****************************************************************
========================= CLASS #316 =============================
(1800) {283167} [283239]: Only the database owner or a superuser can change these settings.
(1816) {284758} [284851]: Only the database owner or a superuser can change the session defaults for a database.
*****************************************************************
========================= CLASS #317 =============================
(1804) {283481} [283538]: (Connect to a different database if you need to do that.)
(3667) {582799} [582852]: (Connect as a different user if you need to do that.)
*****************************************************************
========================= CLASS #318 =============================
(1808) {283842} [283905]: The fourth form changes the default tablespace of the database.
(1825) {285565} [285634]: new_tablespace The new default tablespace of the database.
*****************************************************************
========================= CLASS #319 =============================
(1817) {284852} [284935]: Certain variables cannot be set this way, or can only be set by a superuser.
(3679) {584270} [584393]: Certain configuration variables cannot be set this way, or can only be set if a superuser issues the command.
*****************************************************************
========================= CLASS #320 =============================
(1818) {284937} [285031]: PARAMETERS name The name of the database whose attributes are to be altered.
(1843) {287774} [287825]: name The name of the database to remove.
(2262) {353020} [353067]: name The name of the role to remove.
(2759) {430537} [430593]: name The name of the event trigger to remove.
(3681) {584471} [584561]: PARAMETERS name The name of the role whose attributes are to be altered.
(4662) {739713} [739763]: name The name of the trigger to remove.
*****************************************************************
========================= CLASS #321 =============================
(1819) {285040} [285111]: allowconn If false then no one can connect to this database.
(5652) {899141} [899212]: allowconn If false then no one can connect to this database.
*****************************************************************
========================= CLASS #322 =============================
(1820) {285120} [285202]: connlimit How many concurrent connections can be made to this database.
(5654) {899359} [899441]: connlimit How many concurrent connections can be made to this database.
*****************************************************************
========================= CLASS #323 =============================
(1822) {285241} [285438]: istemplate If true, then this database can be cloned by any user with CREATEDB privileges; if false, then only superusers or the owner of the database can clone it.
(5656) {899494} [899705]: istemplate If true, then this database can be cloned by any user with CREATEDB privileges; if false (the default), then only superusers or the owner of the database can clone it.
*****************************************************************
========================= CLASS #324 =============================
(1826) {285643} [285799]: configuration_parameter value Set this database's session default for the specified configuration parameter to the given value.
(3688) {585492} [585644]: configuration_parameter value Set this role's session default for the specified configuration parameter to the given value.
*****************************************************************
========================= CLASS #325 =============================
(1827) {285800} [285986]: If value is DEFAULT or, equivalently, RESET is used, the database-specific setting is removed, so the system-wide default setting will be inherited in new sessions.
(3689) {585645} [585851]: If value is DEFAULT or, equivalently, RESET is used, the role-specific variable setting is removed, so the role will inherit the system-wide default setting in new sessions.
*****************************************************************
========================= CLASS #326 =============================
(1828) {285987} [286052]: Use RESET ALL to clear all database-specific settings.
(3690) {585852} [585902]: Use RESET ALL to clear all role-specific settings.
(5320) {846887} [846938]: Use RESET ALL to clear all function-local settings.
*****************************************************************
========================= CLASS #327 =============================
(1829) {286054} [286175]: SET FROM CURRENT saves the session's current value of the parameter as the database-specific value.
(3691) {585904} [586021]: SET FROM CURRENT saves the session's current value of the parameter as the role-specific value.
*****************************************************************
========================= CLASS #328 =============================
(1830) {286188} [286342]: See SET(7) and Chapter 19, Server Configuration, in the documentation for more information about allowed parameter names and values.
(2133) {332514} [332668]: See SET(7) and Chapter 19, Server Configuration, in the documentation for more information about allowed parameter names and values.
(3694) {586405} [586559]: See SET(7) and Chapter 19, Server Configuration, in the documentation for more information about allowed parameter names and values.
(4867) {772493} [772584]: Consult Chapter 19, Server Configuration, in the documentation for more information.
(5322) {847139} [847293]: See SET(7) and Chapter 19, Server Configuration, in the documentation for more information about allowed parameter names and values.
*****************************************************************
========================= CLASS #329 =============================
(1831) {286344} [286486]: NOTES It is also possible to tie a session default to a specific role rather than to a database; see ALTER ROLE (ALTER_ROLE(7)).
(3701) {587180} [587317]: It is also possible to tie a session default to a specific database rather than to a role; see ALTER DATABASE (ALTER_DATABASE(7)).
*****************************************************************
========================= CLASS #330 =============================
(1834) {286786} [287241]: SEE ALSO CREATE DATABASE (CREATE_DATABASE(7)), DROP DATABASE (DROP_DATABASE(7)), SET(7), CREATE TABLESPACE (CREATE_TABLESPACE(7)) PostgreSQL 9.6.1 2016 ALTER DATABASE(7) DROP DATABASE(7) PostgreSQL 9.6.1 Documentation DROP DATABASE(7) NAME DROP_DATABASE - remove a database SYNOPSIS DROP DATABASE [ IF EXISTS ] name DESCRIPTION DROP DATABASE drops a database.
(5660) {900101} [900159]: Use DROP DATABASE (DROP_DATABASE(7)) to remove a database.
*****************************************************************
========================= CLASS #331 =============================
(1837) {287398} [287495]: Also, it cannot be executed while you or anyone else are connected to the target database.
(1845) {287909} [287980]: This command cannot be executed while connected to the target database.
*****************************************************************
========================= CLASS #332 =============================
(1850) {288810} [288993]: The DEPENDS ON EXTENSION clause marks the trigger as dependent on an extension, such that if the extension is dropped, the trigger will automatically be dropped as well.
(3737) {593935} [594133]: DEPENDS ON EXTENSION This form marks the index as dependent on the extension, such that if the extension is dropped, the index will automatically be dropped as well.
*****************************************************************
========================= CLASS #333 =============================
(1855) {289321} [289406]: extension_name The name of the extension that the trigger is to depend on.
(1899) {296798} [296904]: extension_name The name of the extension that the materialized view is to depend on.
(3748) {595210} [595293]: extension_name The name of the extension that the index is to depend on.
(5301) {844747} [844833]: extension_name The name of the extension that the function is to depend on.
*****************************************************************
========================= CLASS #334 =============================
(1859) {290477} [290579]: To execute this command, the current user must be the owner of the foreign-data wrapper.
(1906) {298008} [298082]: To execute this command the user must be the owner of the function.
(2756) {430297} [430385]: To execute this command, the current user must be the owner of the event trigger.
(2886) {456247} [456339]: To execute this command the current user must be the owner of the aggregate function.
(3922) {622008} [622089]: To execute this command, the current user must be the owner of the server.
(4645) {737628} [737684]: To alter the server you must be the owner of the server.
(4659) {739447} [739567]: To execute this command, the current user must be the owner of the table for which the trigger is defined.
*****************************************************************
========================= CLASS #335 =============================
(1875) {292560} [292691]: This restriction is made because an erroneous text search template definition could confuse or even crash the server.
(2212) {345233} [345360]: (This restriction is made because an erroneous operator class definition could confuse or even crash the server.)
(2301) {359372} [359489]: (This restriction is made because an erroneous type definition could confuse or even crash the server.)
(2772) {433668} [433796]: (This restriction is made because an erroneous operator family definition could confuse or even crash the server.)
(3006) {478127} [478250]: (This restriction is made because an erroneous binary-coercible cast conversion can easily crash the server.)
(3172) {502848} [502976]: (This restriction is made because an erroneous operator family definition could confuse or even crash the server.)
(3202) {507762} [507893]: (This restriction is made because an erroneous text search parser definition could confuse or even crash the server.)
*****************************************************************
========================= CLASS #336 =============================
(1881) {293256} [293328]: init_function The name of the init function for the template.
(1882) {293337} [293413]: lexize_function The name of the lexize function for the template.
*****************************************************************
========================= CLASS #337 =============================
(1883) {293422} [293478]: The function names can be schema-qualified if necessary.
(3211) {508703} [508759]: The function names can be schema-qualified if necessary.
*****************************************************************
========================= CLASS #338 =============================
(1884) {293479} [293590]: Argument types are not given, since the argument list for each type of function is predetermined.
(3212) {508760} [508871]: Argument types are not given, since the argument list for each type of function is predetermined.
*****************************************************************
========================= CLASS #339 =============================
(1886) {293674} [293742]: The arguments can appear in any order, not only the one shown above.
(3214) {508927} [508995]: The arguments can appear in any order, not only the one shown above.
*****************************************************************
========================= CLASS #340 =============================
(1905) {297389} [298007]: SEE ALSO CREATE MATERIALIZED VIEW (CREATE_MATERIALIZED_VIEW(7)), DROP MATERIALIZED VIEW (DROP_MATERIALIZED_VIEW(7)), REFRESH MATERIALIZED VIEW (REFRESH_MATERIALIZED_VIEW(7)) PostgreSQL 9.6.1 2016 ALTER MATERIALIZED VIEW(7) DROP FUNCTION(7) PostgreSQL 9.6.1 Documentation DROP FUNCTION(7) NAME DROP_FUNCTION - remove a function SYNOPSIS DROP FUNCTION [ IF EXISTS ] name ( [ [ argmode ] [ argname ] argtype [, ...] ] ) [ CASCADE | RESTRICT ] DESCRIPTION DROP FUNCTION removes the definition of an existing function.
(2885) {455576} [456246]: SEE ALSO CREATE RULE (CREATE_RULE(7)), DROP RULE (DROP_RULE(7)) PostgreSQL 9.6.1 2016 ALTER RULE(7) DROP AGGREGATE(7) PostgreSQL 9.6.1 Documentation DROP AGGREGATE(7) NAME DROP_AGGREGATE - remove an aggregate function SYNOPSIS DROP AGGREGATE [ IF EXISTS ] name ( aggregate_signature ) [ CASCADE | RESTRICT ] where aggregate_signature is: * | [ argmode ] [ argname ] argtype [ , ... ] | [ [ argmode ] [ argname ] argtype [ , ... ] ] ORDER BY [ argmode ] [ argname ] argtype [ , ... ] DESCRIPTION DROP AGGREGATE removes an existing aggregate function.
(4621) {732906} [733823]: SEE ALSO CREATE TABLESPACE (CREATE_TABLESPACE(7)), ALTER TABLESPACE (ALTER_TABLESPACE(7)) PostgreSQL 9.6.1 2016 DROP TABLESPACE(7) ALTER AGGREGATE(7) PostgreSQL 9.6.1 Documentation ALTER AGGREGATE(7) NAME ALTER_AGGREGATE - change the definition of an aggregate function SYNOPSIS ALTER AGGREGATE name ( aggregate_signature ) RENAME TO new_name ALTER AGGREGATE name ( aggregate_signature ) OWNER TO { new_owner | CURRENT_USER | SESSION_USER } ALTER AGGREGATE name ( aggregate_signature ) SET SCHEMA new_schema where aggregate_signature is: * | [ argmode ] [ argname ] argtype [ , ... ] | [ [ argmode ] [ argname ] argtype [ , ... ] ] ORDER BY [ argmode ] [ argname ] argtype [ , ... ] DESCRIPTION ALTER AGGREGATE changes the definition of an aggregate function.
*****************************************************************
========================= CLASS #341 =============================
(1922) {299837} [300302]: SEE ALSO CREATE FUNCTION (CREATE_FUNCTION(7)), ALTER FUNCTION (ALTER_FUNCTION(7)) PostgreSQL 9.6.1 2016 DROP FUNCTION(7) DROP FOREIGN TABLE(7) PostgreSQL 9.6.1 Documentation DROP FOREIGN TABLE(7) NAME DROP_FOREIGN_TABLE - remove a foreign table SYNOPSIS DROP FOREIGN TABLE [ IF EXISTS ] name [, ...] [ CASCADE | RESTRICT ] DESCRIPTION DROP FOREIGN TABLE removes a foreign table.
(3225) {510663} [511062]: SEE ALSO CREATE FUNCTION (CREATE_FUNCTION(7)) PostgreSQL 9.6.1 2016 LOAD(7) DROP TABLE(7) PostgreSQL 9.6.1 Documentation DROP TABLE(7) NAME DROP_TABLE - remove a table SYNOPSIS DROP TABLE [ IF EXISTS ] name [, ...] [ CASCADE | RESTRICT ] DESCRIPTION DROP TABLE removes tables from the database.
*****************************************************************
========================= CLASS #342 =============================
(1923) {300303} [300358]: Only the owner of a foreign table can remove it.
(2960) {471353} [471399]: Only the owner of a type can remove it.
(3058) {485845} [485886]: Only the owner of a domain can remove it.
*****************************************************************
========================= CLASS #343 =============================
(1930) {300973} [301338]: EXAMPLES To destroy two foreign tables, films and distributors: DROP FOREIGN TABLE films, distributors; COMPATIBILITY This command conforms to the ISO/IEC 9075-9 (SQL/MED), except that the standard only allows one foreign table to be dropped per command, and apart from the IF EXISTS option, which is a PostgreSQL extension.
(2667) {416241} [416555]: EXAMPLES This command will remove the view called kinds: DROP VIEW kinds; COMPATIBILITY This command conforms to the SQL standard, except that the standard only allows one view to be dropped per command, and apart from the IF EXISTS option, which is a PostgreSQL extension.
(3065) {486470} [486678]: EXAMPLES To remove the domain box: DROP DOMAIN box; COMPATIBILITY This command conforms to the SQL standard, except for the IF EXISTS option, which is a PostgreSQL extension.
(3237) {512235} [512564]: EXAMPLES To destroy two tables, films and distributors: DROP TABLE films, distributors; COMPATIBILITY This command conforms to the SQL standard, except that the standard only allows one table to be dropped per command, and apart from the IF EXISTS option, which is a PostgreSQL extension.
(5547) {883977} [884040]: COMPATIBILITY This command conforms to the SQL standard.
(5767) {915676} [915983]: EXAMPLES To remove the sequence serial: DROP SEQUENCE serial; COMPATIBILITY DROP SEQUENCE conforms to the SQL standard, except that the standard only allows one sequence to be dropped per command, and apart from the IF EXISTS option, which is a PostgreSQL extension.
*****************************************************************
========================= CLASS #344 =============================
(1932) {301946} [302024]: The only functionality is to rename the language or assign a new owner.
(4195) {664594} [664649]: The only functionality is to assign a new owner.
*****************************************************************
========================= CLASS #345 =============================
(1933) {302025} [302101]: You must be superuser or owner of the language to use ALTER LANGUAGE.
(4196) {664650} [664734]: You must be superuser or owner of the large object to use ALTER LARGE OBJECT.
*****************************************************************
========================= CLASS #346 =============================
(1946) {304218} [304330]: ROLLBACK TO SAVEPOINT implicitly destroys all savepoints that were established after the named savepoint.
(5541) {883130} [883248]: RELEASE SAVEPOINT also destroys all savepoints that were established after the named savepoint was established.
*****************************************************************
========================= CLASS #347 =============================
(1956) {305618} [305991]: EXAMPLES To undo the effects of the commands executed after my_savepoint was established: ROLLBACK TO SAVEPOINT my_savepoint; Cursor positions are not affected by savepoint rollback: BEGIN; DECLARE foo CURSOR FOR SELECT 1 UNION SELECT 2; SAVEPOINT foo; FETCH 1 FROM foo; ?column?
(1957) {306003} [306124]: ---------- 1 ROLLBACK TO SAVEPOINT foo; FETCH 1 FROM foo; ?column?
*****************************************************************
========================= CLASS #348 =============================
(1958) {306136} [306335]: ---------- 2 COMMIT; COMPATIBILITY The SQL standard specifies that the key word SAVEPOINT is mandatory, but PostgreSQL and Oracle allow it to be omitted.
(5548) {884041} [884159]: The standard specifies that the key word SAVEPOINT is mandatory, but PostgreSQL allows it to be omitted.
*****************************************************************
========================= CLASS #349 =============================
(1964) {307352} [307570]: Note As of PostgreSQL 9.1, most procedural languages have been made into "extensions", and should therefore be installed with CREATE EXTENSION (CREATE_EXTENSION(7)) not CREATE LANGUAGE.
(2834) {444093} [444303]: Note As of PostgreSQL 9.1, most procedural languages have been made into "extensions", and should therefore be removed with DROP EXTENSION (DROP_EXTENSION(7)) not DROP LANGUAGE.
*****************************************************************
========================= CLASS #350 =============================
(1989) {311100} [311181]: For backward compatibility, the name can be enclosed by single quotes.
(2838) {444511} [444592]: For backward compatibility, the name can be enclosed by single quotes.
*****************************************************************
========================= CLASS #351 =============================
(1995) {312238} [312281]: The return value of the handler is ignored.
(2001) {313140} [313195]: The return value of the function is ignored.
*****************************************************************
========================= CLASS #352 =============================
(2019) {315819} [317159]: SEE ALSO ALTER LANGUAGE (ALTER_LANGUAGE(7)), CREATE FUNCTION (CREATE_FUNCTION(7)), DROP LANGUAGE (DROP_LANGUAGE(7)), GRANT(7), REVOKE(7), createlang(1), droplang(1) PostgreSQL 9.6.1 2016 CREATE LANGUAGE(7) CREATE FUNCTION(7) PostgreSQL 9.6.1 Documentation CREATE FUNCTION(7) NAME CREATE_FUNCTION - define a new function SYNOPSIS CREATE [ OR REPLACE ] FUNCTION name ( [ [ argmode ] [ argname ] argtype [ { DEFAULT | = } default_expr ] [, ...] ] ) [ RETURNS rettype | RETURNS TABLE ( column_name column_type [, ...] ) ] { LANGUAGE lang_name | TRANSFORM { FOR TYPE type_name } [, ... ] | WINDOW | IMMUTABLE | STABLE | VOLATILE | [ NOT ] LEAKPROOF | CALLED ON NULL INPUT | RETURNS NULL ON NULL INPUT | STRICT | [ EXTERNAL ] SECURITY INVOKER | [ EXTERNAL ] SECURITY DEFINER | PARALLEL { UNSAFE | RESTRICTED | SAFE } | COST execution_cost | ROWS result_rows | SET configuration_parameter { TO value | = value | FROM CURRENT } | AS 'definition' | AS 'obj_file', 'link_symbol' } ... [ WITH ( attribute [, ...] ) ] DESCRIPTION CREATE FUNCTION defines a new function.
(5283) {841441} [843068]: SEE ALSO ALTER TABLE (ALTER_TABLE(7)), DROP TABLE (DROP_TABLE(7)), CREATE TABLE AS (CREATE_TABLE_AS(7)), CREATE TABLESPACE (CREATE_TABLESPACE(7)), CREATE TYPE (CREATE_TYPE(7)) PostgreSQL 9.6.1 2016 CREATE TABLE(7) ALTER FUNCTION(7) PostgreSQL 9.6.1 Documentation ALTER FUNCTION(7) NAME ALTER_FUNCTION - change the definition of a function SYNOPSIS ALTER FUNCTION name ( [ [ argmode ] [ argname ] argtype [, ...] ] ) action [ ... ] [ RESTRICT ] ALTER FUNCTION name ( [ [ argmode ] [ argname ] argtype [, ...] ] ) RENAME TO new_name ALTER FUNCTION name ( [ [ argmode ] [ argname ] argtype [, ...] ] ) OWNER TO { new_owner | CURRENT_USER | SESSION_USER } ALTER FUNCTION name ( [ [ argmode ] [ argname ] argtype [, ...] ] ) SET SCHEMA new_schema ALTER FUNCTION name ( [ [ argmode ] [ argname ] argtype [, ...] ] ) DEPENDS ON EXTENSION extension_name where action is one of: CALLED ON NULL INPUT | RETURNS NULL ON NULL INPUT | STRICT IMMUTABLE | STABLE | VOLATILE | [ NOT ] LEAKPROOF [ EXTERNAL ] SECURITY INVOKER | [ EXTERNAL ] SECURITY DEFINER PARALLEL { UNSAFE | RESTRICTED | SAFE } COST execution_cost ROWS result_rows SET configuration_parameter { TO | = } { value | DEFAULT } SET configuration_parameter FROM CURRENT RESET configuration_parameter RESET ALL DESCRIPTION ALTER FUNCTION changes the definition of a function.
*****************************************************************
========================= CLASS #353 =============================
(2033) {318578} [318675]: You must own the function to replace it (this includes being a member of the owning role).
(4787) {758779} [758872]: You must own the view to replace it (this includes being a member of the owning role).
(5284) {843077} [843125]: You must own the function to use ALTER FUNCTION.
*****************************************************************
========================= CLASS #354 =============================
(2051) {320541} [320667]: The argument types can be base, composite, or domain types, or can reference the type of a table column.
(2061) {321650} [321774]: The return type can be a base, composite, or domain type, or can reference the type of a table column.
*****************************************************************
========================= CLASS #355 =============================
(2052) {320680} [320798]: Depending on the implementation language it might also be allowed to specify "pseudotypes" such as cstring.
(2062) {321775} [321893]: Depending on the implementation language it might also be allowed to specify "pseudotypes" such as cstring.
*****************************************************************
========================= CLASS #356 =============================
(2054) {320965} [321050]: The type of a column is referenced by writing table_name.column_name%TYPE.
(2067) {322435} [322520]: The type of a column is referenced by writing table_name.column_name%TYPE.
*****************************************************************
========================= CLASS #357 =============================
(2068) {322529} [322609]: column_name The name of an output column in the RETURNS TABLE syntax.
(2070) {322762} [322847]: column_type The data type of an output column in the RETURNS TABLE syntax.
*****************************************************************
========================= CLASS #358 =============================
(2076) {323278} [323403]: Transforms convert between SQL types and language-specific data types; see CREATE TRANSFORM (CREATE_TRANSFORM(7)).
(2201) {343482} [343544]: See CREATE TRANSFORM (CREATE_TRANSFORM(7)) for details.
*****************************************************************
========================= CLASS #359 =============================
(2080) {323936} [324102]: This is currently only useful for functions written in C. The WINDOW attribute cannot be changed when replacing an existing function definition.
(5443) {868789} [868857]: This is currently only useful for documentation purposes.
*****************************************************************
========================= CLASS #360 =============================
(2101) {327413} [327520]: See CREATE VIEW (CREATE_VIEW(7)) and Section 39.5, "Rules and Privileges", in the documentation.
(4763) {754910} [755005]: See Section 39.5, "Rules and Privileges", in the documentation for full details.
(4802) {761410} [761497]: See Section 39.5, "Rules and Privileges", in the documentation for full details.
*****************************************************************
========================= CLASS #361 =============================
(2103) {327586} [327800]: CALLED ON NULL INPUT RETURNS NULL ON NULL INPUT STRICT CALLED ON NULL INPUT (the default) indicates that the function will be called normally when some of its arguments are null.
(5302) {844842} [845045]: CALLED ON NULL INPUT RETURNS NULL ON NULL INPUT STRICT CALLED ON NULL INPUT changes the function so that it will be invoked when some or all of its arguments are null.
*****************************************************************
========================= CLASS #362 =============================
(2107) {328254} [328448]: [EXTERNAL] SECURITY INVOKER [EXTERNAL] SECURITY DEFINER SECURITY INVOKER indicates that the function is to be executed with the privileges of the user that calls it.
(2109) {328481} [328603]: SECURITY DEFINER specifies that the function is to be executed with the privileges of the user that created it.
*****************************************************************
========================= CLASS #363 =============================
(2110) {328616} [328794]: The key word EXTERNAL is allowed for SQL conformance, but it is optional since, unlike in SQL, this feature applies to all functions not only external ones.
(5308) {845653} [845717]: The key word EXTERNAL is ignored for SQL conformance.
*****************************************************************
========================= CLASS #364 =============================
(2130) {331740} [331928]: SET FROM CURRENT saves the value of the parameter that is current when CREATE FUNCTION is executed as the value to be applied when the function is entered.
(5321) {846950} [847126]: SET FROM CURRENT saves the value of the parameter that is current when ALTER FUNCTION is executed as the value to be applied when the function is entered.
*****************************************************************
========================= CLASS #365 =============================
(2147) {334597} [334719]: Refer to Section 36.3, "User-defined Functions", in the documentation for further information on writing functions.
(2166) {337087} [337201]: For more information and examples, see Section 36.3, "User-defined Functions", in the documentation.
*****************************************************************
========================= CLASS #366 =============================
(2151) {335240} [335333]: Thus for example these declarations conflict: CREATE FUNCTION foo(int) ...
(2154) {335566} [335628]: For example, consider CREATE FUNCTION foo(int) ...
*****************************************************************
========================= CLASS #367 =============================
(2188) {341807} [341907]: For parameter defaults, the SQL standard specifies only the syntax with the DEFAULT key word.
(2386) {370854} [370907]: Specify the default with the DEFAULT key word.
*****************************************************************
========================= CLASS #368 =============================
(2209) {344987} [345109]: Two operator classes in the same schema can have the same name only if they are for different index methods.
(3169) {502600} [502723]: Two operator families in the same schema can have the same name only if they are for different index methods.
*****************************************************************
========================= CLASS #369 =============================
(2211) {345176} [345232]: Presently, the creating user must be a superuser.
(3171) {502791} [502847]: Presently, the creating user must be a superuser.
*****************************************************************
========================= CLASS #370 =============================
(2213) {345369} [345613]: CREATE OPERATOR CLASS does not presently check whether the operator class definition includes all the operators and functions required by the index method, nor whether the operators and functions form a self-consistent set.
(2773) {433805} [434050]: ALTER OPERATOR FAMILY does not presently check whether the operator family definition includes all the operators and functions required by the index method, nor whether the operators and functions form a self-consistent set.
*****************************************************************
========================= CLASS #371 =============================
(2214) {345614} [345686]: It is the user's responsibility to define a valid operator class.
(2774) {434051} [434124]: It is the user's responsibility to define a valid operator family.
*****************************************************************
========================= CLASS #372 =============================
(2224) {346599} [346679]: index_method The name of the index method this operator class is for.
(2474) {384751} [384831]: index_method The name of the index method this operator class is for.
(2777) {434372} [434453]: index_method The name of the index method this operator family is for.
(3176) {503234} [503315]: index_method The name of the index method this operator family is for.
(4066) {642739} [642826]: index_method The name of the index access method the operator family is for.
(4080) {644838} [644924]: index_method The name of the index access method the operator class is for.
*****************************************************************
========================= CLASS #373 =============================
(2227) {346929} [347053]: strategy_number The index method's strategy number for an operator associated with the operator class.
(2778) {434462} [434587]: strategy_number The index method's strategy number for an operator associated with the operator family.
*****************************************************************
========================= CLASS #374 =============================
(2228) {347062} [347187]: operator_name The name (optionally schema-qualified) of an operator associated with the operator class.
(2779) {434596} [434722]: operator_name The name (optionally schema-qualified) of an operator associated with the operator family.
*****************************************************************
========================= CLASS #375 =============================
(2229) {347196} [347347]: op_type In an OPERATOR clause, the operand data type(s) of the operator, or NONE to signify a left-unary or right-unary operator.
(2780) {434731} [434882]: op_type In an OPERATOR clause, the operand data type(s) of the operator, or NONE to signify a left-unary or right-unary operator.
*****************************************************************
========================= CLASS #376 =============================
(2231) {347498} [347863]: In a FUNCTION clause, the operand data type(s) the function is intended to support, if different from the input data type(s) of the function (for B-tree comparison functions and hash functions) or the class's data type (for B-tree sort support functions and all functions in GiST, SP-GiST, GIN and BRIN operator classes).
(2782) {435021} [435189]: In an ADD FUNCTION clause, the operand data type(s) the function is intended to support, if different from the input data type(s) of the function.
(2785) {435603} [435720]: In a DROP FUNCTION clause, the operand data type(s) the function is intended to support must be specified.
*****************************************************************
========================= CLASS #377 =============================
(2233) {348099} [348295]: sort_family_name The name (optionally schema-qualified) of an existing btree operator family that describes the sort ordering associated with an ordering operator.
(2786) {435729} [435925]: sort_family_name The name (optionally schema-qualified) of an existing btree operator family that describes the sort ordering associated with an ordering operator.
*****************************************************************
========================= CLASS #378 =============================
(2234) {348308} [348398]: If neither FOR SEARCH nor FOR ORDER BY is specified, FOR SEARCH is the default.
(2787) {435938} [436028]: If neither FOR SEARCH nor FOR ORDER BY is specified, FOR SEARCH is the default.
*****************************************************************
========================= CLASS #379 =============================
(2235) {348407} [348538]: support_number The index method's support procedure number for a function associated with the operator class.
(2788) {436037} [436169]: support_number The index method's support procedure number for a function associated with the operator family.
*****************************************************************
========================= CLASS #380 =============================
(2236) {348547} [348701]: function_name The name (optionally schema-qualified) of a function that is an index method support procedure for the operator class.
(2789) {436178} [436333]: function_name The name (optionally schema-qualified) of a function that is an index method support procedure for the operator family.
*****************************************************************
========================= CLASS #381 =============================
(2241) {349133} [349201]: The OPERATOR, FUNCTION, and STORAGE clauses can appear in any order.
(2794) {436621} [436679]: The OPERATOR and FUNCTION clauses can appear in any order.
*****************************************************************
========================= CLASS #382 =============================
(2242) {349203} [349443]: NOTES Because the index machinery does not check access permissions on functions before using them, including a function or operator in an operator class is tantamount to granting public execute permission on it.
(2798) {437179} [437407]: Because the index machinery does not check access permissions on functions before using them, including a function or operator in an operator family is tantamount to granting public execute permission on it.
*****************************************************************
========================= CLASS #383 =============================
(2243) {349444} [349544]: This is usually not an issue for the sorts of functions that are useful in an operator class.
(2444) {378077} [378177]: This is usually not an issue for the sorts of functions that are useful in a type definition.
(2799) {437408} [437509]: This is usually not an issue for the sorts of functions that are useful in an operator family.
*****************************************************************
========================= CLASS #384 =============================
(2244) {349553} [349606]: The operators should not be defined by SQL functions.
(2800) {437518} [437571]: The operators should not be defined by SQL functions.
*****************************************************************
========================= CLASS #385 =============================
(2245) {349607} [349766]: A SQL function is likely to be inlined into the calling query, which will prevent the optimizer from recognizing that the query matches an index.
(2801) {437572} [437731]: A SQL function is likely to be inlined into the calling query, which will prevent the optimizer from recognizing that the query matches an index.
*****************************************************************
========================= CLASS #386 =============================
(2246) {349775} [349856]: Before PostgreSQL 8.4, the OPERATOR clause could include a RECHECK option.
(2802) {437740} [437821]: Before PostgreSQL 8.4, the OPERATOR clause could include a RECHECK option.
*****************************************************************
========================= CLASS #387 =============================
(2247) {349857} [349978]: This is no longer supported because whether an index operator is "lossy" is now determined on-the-fly at run time.
(2803) {437822} [437943]: This is no longer supported because whether an index operator is "lossy" is now determined on-the-fly at run time.
*****************************************************************
========================= CLASS #388 =============================
(2248) {349979} [350079]: This allows efficient handling of cases where an operator might or might not be lossy.
(2804) {437944} [438044]: This allows efficient handling of cases where an operator might or might not be lossy.
*****************************************************************
========================= CLASS #389 =============================
(2253) {351381} [351938]: SEE ALSO ALTER OPERATOR CLASS (ALTER_OPERATOR_CLASS(7)), DROP OPERATOR CLASS (DROP_OPERATOR_CLASS(7)), CREATE OPERATOR FAMILY (CREATE_OPERATOR_FAMILY(7)), ALTER OPERATOR FAMILY (ALTER_OPERATOR_FAMILY(7)) PostgreSQL 9.6.1 2016 CREATE OPERATOR CLASS(7) DROP ROLE(7) PostgreSQL 9.6.1 Documentation DROP ROLE(7) NAME DROP_ROLE - remove a database role SYNOPSIS DROP ROLE [ IF EXISTS ] name [, ...] DESCRIPTION DROP ROLE removes the specified role(s).
(2479) {385118} [385660]: SEE ALSO CREATE OPERATOR CLASS (CREATE_OPERATOR_CLASS(7)), DROP OPERATOR CLASS (DROP_OPERATOR_CLASS(7)), ALTER OPERATOR FAMILY (ALTER_OPERATOR_FAMILY(7)) PostgreSQL 9.6.1 2016 ALTER OPERATOR CLASS(7) DROP EXTENSION(7) PostgreSQL 9.6.1 Documentation DROP EXTENSION(7) NAME DROP_EXTENSION - remove an extension SYNOPSIS DROP EXTENSION [ IF EXISTS ] name [, ...] [ CASCADE | RESTRICT ] DESCRIPTION DROP EXTENSION removes extensions from the database.
(3704) {588523} [588996]: SEE ALSO CREATE ROLE (CREATE_ROLE(7)), DROP ROLE (DROP_ROLE(7)), ALTER DATABASE (ALTER_DATABASE(7)), SET(7) PostgreSQL 9.6.1 2016 ALTER ROLE(7) DROP SCHEMA(7) PostgreSQL 9.6.1 Documentation DROP SCHEMA(7) NAME DROP_SCHEMA - remove a schema SYNOPSIS DROP SCHEMA [ IF EXISTS ] name [, ...] [ CASCADE | RESTRICT ] DESCRIPTION DROP SCHEMA removes schemas from the database.
(4073) {643582} [644265]: SEE ALSO ALTER OPERATOR FAMILY (ALTER_OPERATOR_FAMILY(7)), CREATE OPERATOR FAMILY (CREATE_OPERATOR_FAMILY(7)), ALTER OPERATOR CLASS (ALTER_OPERATOR_CLASS(7)), CREATE OPERATOR CLASS (CREATE_OPERATOR_CLASS(7)), DROP OPERATOR CLASS (DROP_OPERATOR_CLASS(7)) PostgreSQL 9.6.1 2016 DROP OPERATOR FAMILY(7) DROP OPERATOR CLASS(7) PostgreSQL 9.6.1 Documentation DROP OPERATOR CLASS(7) NAME DROP_OPERATOR_CLASS - remove an operator class SYNOPSIS DROP OPERATOR CLASS [ IF EXISTS ] name USING index_method [ CASCADE | RESTRICT ] DESCRIPTION DROP OPERATOR CLASS drops an existing operator class.
(5759) {914595} [915051]: SEE ALSO CREATE OPERATOR (CREATE_OPERATOR(7)), ALTER OPERATOR (ALTER_OPERATOR(7)) PostgreSQL 9.6.1 2016 DROP OPERATOR(7) DROP SEQUENCE(7) PostgreSQL 9.6.1 Documentation DROP SEQUENCE(7) NAME DROP_SEQUENCE - remove a sequence SYNOPSIS DROP SEQUENCE [ IF EXISTS ] name [, ...] [ CASCADE | RESTRICT ] DESCRIPTION DROP SEQUENCE removes sequence number generators.
*****************************************************************
========================= CLASS #390 =============================
(2257) {352385} [352594]: The REASSIGN OWNED (REASSIGN_OWNED(7)) and DROP OWNED (DROP_OWNED(7)) commands can be useful for this purpose; see Section 21.4, "Dropping Roles", in the documentation for more discussion.
(3490) {554395} [554479]: See Section 21.4, "Dropping Roles", in the documentation for more discussion.
(4887) {776003} [776087]: See Section 21.4, "Dropping Roles", in the documentation for more discussion.
*****************************************************************
========================= CLASS #391 =============================
(2263) {353069} [353257]: NOTES PostgreSQL includes a program dropuser(1) that has the same functionality as this command (in fact, it calls this command) but can be run from the command shell.
(4018) {635382} [635558]: PostgreSQL includes a program createuser(1) that has the same functionality as CREATE ROLE (in fact, it calls this command) but can be run from the command shell.
*****************************************************************
========================= CLASS #392 =============================
(2269) {355380} [355489]: The type name must be distinct from the name of any existing type or domain in the same schema.
(2669) {417136} [417252]: The tablespace name must be distinct from the name of any existing tablespace in the database cluster.
(3840) {609375} [609483]: The schema name must be distinct from the name of any existing schema in the current database.
*****************************************************************
========================= CLASS #393 =============================
(2290) {358096} [358200]: See Section 8.17.8, "Defining New Range Types", in the documentation for more information.
(2298) {359123} [359220]: See Section 8.17.8, "Defining New Range Types", in the documentation for more information.
*****************************************************************
========================= CLASS #394 =============================
(2292) {358319} [358459]: To do this, you must first create a shell type, which is a placeholder type that has no properties except a name and an owner.
(2334) {363370} [363538]: The answer is that the type should first be defined as a shell type, which is a placeholder type that has no properties except a name and an owner.
*****************************************************************
========================= CLASS #395 =============================
(2293) {358460} [358551]: This is done by issuing the command CREATE TYPE name, with no additional parameters.
(2335) {363539} [363630]: This is done by issuing the command CREATE TYPE name, with no additional parameters.
*****************************************************************
========================= CLASS #396 =============================
(2308) {360274} [360423]: The input function can be declared as taking one argument of type cstring, or as taking three arguments of types cstring, oid, integer.
(2322) {361981} [362134]: The receive function can be declared as taking one argument of type internal, or as taking three arguments of types internal, oid, integer.
*****************************************************************
========================= CLASS #397 =============================
(2310) {360712} [360775]: The input function must return a value of the data type itself.
(2324) {362306} [362378]: The receive function must return a value of the data type itself.
(5454) {869963} [870031]: The function must return a value of type state_data_type.
*****************************************************************
========================= CLASS #398 =============================
(2311) {360783} [360943]: Usually, an input function should be declared STRICT; if it is not, it will be called with a NULL first parameter when reading a NULL input value.
(2325) {362379} [362540]: Usually, a receive function should be declared STRICT; if it is not, it will be called with a NULL first parameter when reading a NULL input value.
*****************************************************************
========================= CLASS #399 =============================
(2312) {360944} [361027]: The function must still return NULL in this case, unless it raises an error.
(2326) {362541} [362631]: The function must still return NULL in this case, unless it raises an error.
*****************************************************************
========================= CLASS #400 =============================
(2313) {361028} [361137]: (This case is mainly meant to support domain input functions, which might need to reject NULL inputs.)
(2327) {362632} [362743]: (This case is mainly meant to support domain receive functions, which might need to reject NULL inputs.)
*****************************************************************
========================= CLASS #401 =============================
(2314) {361138} [361226]: The output function must be declared as taking one argument of the new data type.
(2330) {362964} [363050]: The send function must be declared as taking one argument of the new data type.
*****************************************************************
========================= CLASS #402 =============================
(2316) {361280} [361336]: Output functions are not invoked for NULL values.
(2332) {363100} [363147]: Send functions are not invoked for NULL values.
*****************************************************************
========================= CLASS #403 =============================
(2318) {361465} [361550]: If this function is not supplied, the type cannot participate in binary input.
(2329) {362877} [362963]: If this function is not supplied, the type cannot participate in binary output.
*****************************************************************
========================= CLASS #404 =============================
(2370) {368328} [368595]: All storage values other than plain imply that the functions of the data type can handle values that have been toasted, as described in Section 65.2, "TOAST", in the documentation and Section 36.11.1, "TOAST Considerations", in the documentation.
(5081) {808029} [808118]: For more on STORAGE settings, see Section 65.2, "TOAST", in the documentation.
*****************************************************************
========================= CLASS #405 =============================
(2409) {374136} [374275]: collation The name of an existing collation to be associated with a column of a composite type, or with a range type.
(5001) {793848} [793920]: existing_collation The name of an existing collation to copy.
*****************************************************************
========================= CLASS #406 =============================
(2415) {374811} [374949]: input_function The name of a function that converts data from the type's external textual form to its internal form.
(2416) {374958} [375097]: output_function The name of a function that converts data from the type's internal form to its external textual form.
(2417) {375106} [375245]: receive_function The name of a function that converts data from the type's external binary form to its internal form.
(2418) {375254} [375390]: send_function The name of a function that converts data from the type's internal form to its external binary form.
*****************************************************************
========================= CLASS #407 =============================
(2435) {377161} [377182]: The default is false.
(2442) {377791} [377823]: The default is false.
*****************************************************************
========================= CLASS #408 =============================
(2491) {386857} [388170]: SEE ALSO CREATE EXTENSION (CREATE_EXTENSION(7)), ALTER EXTENSION (ALTER_EXTENSION(7)) PostgreSQL 9.6.1 2016 DROP EXTENSION(7) INSERT(7) PostgreSQL 9.6.1 Documentation INSERT(7) NAME INSERT - create new rows in a table SYNOPSIS [ WITH [ RECURSIVE ] with_query [, ...] ] INSERT INTO table_name [ AS alias ] [ ( column_name [, ...] ) ] { DEFAULT VALUES | VALUES ( { expression | DEFAULT } [, ...] ) [, ...] | query } [ ON CONFLICT [ conflict_target ] conflict_action ] [ RETURNING * | output_expression [ [ AS ] output_name ] [, ...] ] where conflict_target can be one of: ( { index_column_name | ( index_expression ) } [ COLLATE collation ] [ opclass ] [, ...] ) [ WHERE index_predicate ] ON CONSTRAINT constraint_name and conflict_action is one of: DO NOTHING DO UPDATE SET { column_name = { expression | DEFAULT } | ( column_name [, ...] ) = ( { expression | DEFAULT } [, ...] ) | ( column_name [, ...] ) = ( sub-SELECT ) } [, ...] [ WHERE condition ] DESCRIPTION INSERT inserts new rows into a table.
(4089) {646141} [647150]: SEE ALSO ALTER OPERATOR CLASS (ALTER_OPERATOR_CLASS(7)), CREATE OPERATOR CLASS (CREATE_OPERATOR_CLASS(7)), DROP OPERATOR FAMILY (DROP_OPERATOR_FAMILY(7)) PostgreSQL 9.6.1 2016 DROP OPERATOR CLASS(7) UPDATE(7) PostgreSQL 9.6.1 Documentation UPDATE(7) NAME UPDATE - update rows of a table SYNOPSIS [ WITH [ RECURSIVE ] with_query [, ...] ] UPDATE [ ONLY ] table_name [ * ] [ [ AS ] alias ] SET { column_name = { expression | DEFAULT } | ( column_name [, ...] ) = ( { expression | DEFAULT } [, ...] ) | ( column_name [, ...] ) = ( sub-SELECT ) } [, ...] [ FROM from_list ] [ WHERE condition | WHERE CURRENT OF cursor_name ] [ RETURNING * | output_expression [ [ AS ] output_name ] [, ...] ] DESCRIPTION UPDATE changes the values of the specified columns in all rows that satisfy the condition.
(4152) {657883} [658483]: PostgreSQL 9.6.1 2016 UPDATE(7) DELETE(7) PostgreSQL 9.6.1 Documentation DELETE(7) NAME DELETE - delete rows of a table SYNOPSIS [ WITH [ RECURSIVE ] with_query [, ...] ] DELETE FROM [ ONLY ] table_name [ * ] [ [ AS ] alias ] [ USING using_list ] [ WHERE condition | WHERE CURRENT OF cursor_name ] [ RETURNING * | output_expression [ [ AS ] output_name ] [, ...] ] DESCRIPTION DELETE deletes rows that satisfy the WHERE clause from the specified table.
*****************************************************************
========================= CLASS #409 =============================
(2500) {389221} [389404]: The optional RETURNING clause causes INSERT to compute and return value(s) based on each row actually inserted (or updated, if an ON CONFLICT DO UPDATE clause was used).
(4093) {647577} [647694]: The optional RETURNING clause causes UPDATE to compute and return value(s) based on each row actually updated.
(4158) {659041} [659158]: The optional RETURNING clause causes DELETE to compute and return value(s) based on each row actually deleted.
*****************************************************************
========================= CLASS #410 =============================
(2503) {389600} [389690]: The syntax of the RETURNING list is identical to that of the output list of SELECT.
(4096) {647887} [647977]: The syntax of the RETURNING list is identical to that of the output list of SELECT.
(4160) {659283} [659373]: The syntax of the RETURNING list is identical to that of the output list of SELECT.
*****************************************************************
========================= CLASS #411 =============================
(2509) {390218} [390362]: Similarly, when ON CONFLICT DO UPDATE is specified, you only need UPDATE privilege on the column(s) that are listed to be updated.
(4097) {647986} [648101]: You must have the UPDATE privilege on the table, or at least on the column(s) that are listed to be updated.
*****************************************************************
========================= CLASS #412 =============================
(2510) {390363} [390529]: However, ON CONFLICT DO UPDATE also requires SELECT privilege on any column whose values are read in the ON CONFLICT DO UPDATE expressions or condition.
(4098) {648102} [648224]: You must also have the SELECT privilege on any column whose values are read in the expressions or condition.
*****************************************************************
========================= CLASS #413 =============================
(2515) {391009} [391154]: with_query The WITH clause allows you to specify one or more subqueries that can be referenced by name in the INSERT query.
(4099) {648226} [648389]: PARAMETERS with_query The WITH clause allows you to specify one or more subqueries that can be referenced by name in the UPDATE query.
(4162) {659573} [659736]: PARAMETERS with_query The WITH clause allows you to specify one or more subqueries that can be referenced by name in the DELETE query.
(4247) {671572} [671725]: PARAMETERS WITH Clause The WITH clause allows you to specify one or more subqueries that can be referenced by name in the primary query.
*****************************************************************
========================= CLASS #414 =============================
(2516) {391155} [391284]: See Section 7.8, "WITH Queries (Common Table Expressions)", in the documentation and SELECT(7) for details.
(4100) {648390} [648519]: See Section 7.8, "WITH Queries (Common Table Expressions)", in the documentation and SELECT(7) for details.
(4163) {659737} [659866]: See Section 7.8, "WITH Queries (Common Table Expressions)", in the documentation and SELECT(7) for details.
(4259) {673130} [673233]: See Section 7.8, "WITH Queries (Common Table Expressions)", in the documentation for an example.
(4268) {674332} [674447]: See Section 7.8, "WITH Queries (Common Table Expressions)", in the documentation for additional information.
(4552) {723826} [723941]: (See Section 7.8, "WITH Queries (Common Table Expressions)", in the documentation for more examples.)
*****************************************************************
========================= CLASS #415 =============================
(2521) {391703} [391790]: When an alias is provided, it completely hides the actual name of the table.
(4106) {649044} [649131]: When an alias is provided, it completely hides the actual name of the table.
(4169) {660405} [660492]: When an alias is provided, it completely hides the actual name of the table.
*****************************************************************
========================= CLASS #416 =============================
(2523) {392009} [392086]: column_name The name of a column in the table named by table_name.
(2724) {425360} [425421]: column_name The name of a column in the new table.
(3540) {562814} [562889]: column_name The name of a column to be created in the new table.
(3767) {598177} [598250]: column_name The name of a column in the new materialized view.
(4108) {649275} [649352]: column_name The name of a column in the table named by table_name.
(5047) {803398} [803473]: column_name The name of a column to be created in the new table.
*****************************************************************
========================= CLASS #417 =============================
(2524) {392087} [392193]: The column name can be qualified with a subfield name or array subscript, if needed.
(4109) {649353} [649459]: The column name can be qualified with a subfield name or array subscript, if needed.
*****************************************************************
========================= CLASS #418 =============================
(2533) {393053} [393195]: output_expression An expression to be computed and returned by the INSERT command after each row is inserted or updated.
(4128) {651524} [651654]: output_expression An expression to be computed and returned by the UPDATE command after each row is updated.
(4181) {661685} [661815]: output_expression An expression to be computed and returned by the DELETE command after each row is deleted.
*****************************************************************
========================= CLASS #419 =============================
(2534) {393196} [393280]: The expression can use any column names of the table named by table_name.
(4129) {651655} [651766]: The expression can use any column names of the table named by table_name or table(s) listed in FROM.
(4182) {661816} [661928]: The expression can use any column names of the table named by table_name or table(s) listed in USING.
*****************************************************************
========================= CLASS #420 =============================
(2535) {393281} [393356]: Write * to return all columns of the inserted or updated row(s).
(4130) {651767} [651808]: Write * to return all columns.
(4183) {661929} [661970]: Write * to return all columns.
*****************************************************************
========================= CLASS #421 =============================
(2536) {393365} [393424]: output_name A name to use for a returned column.
(4131) {651817} [651876]: output_name A name to use for a returned column.
(4184) {661979} [662038]: output_name A name to use for a returned column.
*****************************************************************
========================= CLASS #422 =============================
(2560) {396557} [396585]: Follows CREATE INDEX format.
(2563) {396846} [396874]: Follows CREATE INDEX format.
(2567) {397286} [397325]: Follows CREATE INDEX format.
(2570) {397798} [397826]: Follows CREATE INDEX format.
(2573) {398036} [398064]: Follows CREATE INDEX format.
*****************************************************************
========================= CLASS #423 =============================
(2564) {396876} [396964]: SELECT privilege on any column appearing within index_expression is required.
(2574) {398066} [398153]: SELECT privilege on any column appearing within index_predicate is required.
*****************************************************************
========================= CLASS #424 =============================
(2565) {396973} [397165]: collation When specified, mandates that corresponding index_column_name or index_expression use a particular collation in order to be matched during inference.
(2568) {397334} [397527]: opclass When specified, mandates that corresponding index_column_name or index_expression use particular operator class in order to be matched during inference.
*****************************************************************
========================= CLASS #425 =============================
(2576) {398305} [398377]: condition An expression that returns a value of type boolean.
(4121) {650913} [650985]: condition An expression that returns a value of type boolean.
(4174) {661074} [661146]: condition An expression that returns a value of type boolean.
*****************************************************************
========================= CLASS #426 =============================
(2577) {398378} [398546]: Only rows for which this expression returns true will be updated, although all rows will be locked when the ON CONFLICT DO UPDATE action is taken.
(4122) {650986} [651062]: Only rows for which this expression returns true will be updated.
(4175) {661147} [661223]: Only rows for which this expression returns true will be deleted.
*****************************************************************
========================= CLASS #427 =============================
(2590) {400175} [400429]: If the INSERT command contains a RETURNING clause, the result will be similar to that of a SELECT statement containing the columns and values defined in the RETURNING list, computed over the row(s) inserted or updated by the command.
(4135) {652365} [652607]: If the UPDATE command contains a RETURNING clause, the result will be similar to that of a SELECT statement containing the columns and values defined in the RETURNING list, computed over the row(s) updated by the command.
(4188) {662467} [662709]: If the DELETE command contains a RETURNING clause, the result will be similar to that of a SELECT statement containing the columns and values defined in the RETURNING list, computed over the row(s) deleted by the command.
*****************************************************************
========================= CLASS #428 =============================
(2594) {403648} [403934]: Example assumes a unique index has been defined that constrains values appearing in the did column: INSERT INTO distributors (did, dname) VALUES (7, 'Redline GmbH') ON CONFLICT (did) DO NOTHING; Insert or update new distributors as appropriate.
(2595) {403935} [404048]: Example assumes a unique index has been defined that constrains values appearing in the did column.
*****************************************************************
========================= CLASS #429 =============================
(2604) {406894} [406987]: For more information on the creation and usage of prepared statements, see PREPARE(7).
(4826) {766042} [766102]: For more information on prepared statements, see PREPARE(7).
*****************************************************************
========================= CLASS #430 =============================
(2605) {406989} [407069]: PARAMETERS name The name of the prepared statement to execute.
(4828) {766175} [766240]: name The name of the prepared statement to deallocate.
*****************************************************************
========================= CLASS #431 =============================
(2606) {407078} [407157]: parameter The actual value of a parameter to the prepared statement.
(4929) {782452} [782528]: data_type The data type of a parameter to the prepared statement.
*****************************************************************
========================= CLASS #432 =============================
(2610) {407563} [407678]: COMPATIBILITY The SQL standard includes an EXECUTE statement, but it is only for use in embedded SQL.
(4830) {766301} [766418]: COMPATIBILITY The SQL standard includes a DEALLOCATE statement, but it is only for use in embedded SQL.
(4954) {786954} [787068]: COMPATIBILITY The SQL standard includes a PREPARE statement, but it is only for use in embedded SQL.
*****************************************************************
========================= CLASS #433 =============================
(2611) {407679} [407762]: This version of the EXECUTE statement also uses a somewhat different syntax.
(4955) {787069} [787152]: This version of the PREPARE statement also uses a somewhat different syntax.
*****************************************************************
========================= CLASS #434 =============================
(2630) {411286} [411425]: More information about the lock modes and locking strategies can be found in Section 13.3, "Explicit Locking", in the documentation.
(2638) {412137} [412242]: Lock modes are described in Section 13.3, "Explicit Locking", in the documentation.
*****************************************************************
========================= CLASS #435 =============================
(2641) {412589} [412616]: NOTES LOCK TABLE ...
(2643) {412694} [412708]: LOCK TABLE ...
*****************************************************************
========================= CLASS #436 =============================
(2675) {418054} [418124]: user_name The name of the user who will own the tablespace.
(3849) {610666} [610741]: user_name The role name of the user who will own the new schema.
*****************************************************************
========================= CLASS #437 =============================
(2676) {418125} [418191]: If omitted, defaults to the user executing the command.
(3850) {610742} [610808]: If omitted, defaults to the user executing the command.
*****************************************************************
========================= CLASS #438 =============================
(2709) {423110} [423958]: SEE ALSO CREATE COLLATION (CREATE_COLLATION(7)), DROP COLLATION (DROP_COLLATION(7)) PostgreSQL 9.6.1 2016 ALTER COLLATION(7) CREATE TABLE AS(7) PostgreSQL 9.6.1 Documentation CREATE TABLE AS(7) NAME CREATE_TABLE_AS - define a new table from the results of a query SYNOPSIS CREATE [ [ GLOBAL | LOCAL ] { TEMPORARY | TEMP } | UNLOGGED ] TABLE [ IF NOT EXISTS ] table_name [ (column_name [, ...] ) ] [ WITH ( storage_parameter [= value] [, ... ] ) | WITH OIDS | WITHOUT OIDS ] [ ON COMMIT { PRESERVE ROWS | DELETE ROWS | DROP } ] [ TABLESPACE tablespace_name ] AS query [ WITH [ NO ] DATA ] DESCRIPTION CREATE TABLE AS creates a table and fills it with data computed by a SELECT command.
(3759) {596535} [597176]: SEE ALSO CREATE INDEX (CREATE_INDEX(7)), REINDEX(7) PostgreSQL 9.6.1 2016 ALTER INDEX(7) CREATE MATERIALIZED VIEWPostgreSQL 9.6.1 DocumentatCREATE MATERIALIZED VIEW(7) NAME CREATE_MATERIALIZED_VIEW - define a new materialized view SYNOPSIS CREATE MATERIALIZED VIEW [ IF NOT EXISTS ] table_name [ (column_name [, ...] ) ] [ WITH ( storage_parameter [= value] [, ... ] ) ] [ TABLESPACE tablespace_name ] AS query [ WITH [ NO ] DATA ] DESCRIPTION CREATE MATERIALIZED VIEW defines a materialized view of a query.
*****************************************************************
========================= CLASS #439 =============================
(2710) {423959} [424172]: The table columns have the names and data types associated with the output columns of the SELECT (except that you can override the column names by giving an explicit list of new column names).
(5330) {850221} [850331]: The new table's columns have the names and data types associated with the output columns of the SELECT.
*****************************************************************
========================= CLASS #440 =============================
(2715) {424635} [424735]: Use of these keywords is deprecated; refer to CREATE TABLE (CREATE_TABLE(7)) for details.
(2717) {424830} [424893]: Refer to CREATE TABLE (CREATE_TABLE(7)) for details.
(2719) {424979} [425042]: Refer to CREATE TABLE (CREATE_TABLE(7)) for details.
(2722) {425191} [425254]: Refer to CREATE TABLE (CREATE_TABLE(7)) for details.
*****************************************************************
========================= CLASS #441 =============================
(2716) {424744} [424829]: TEMPORARY or TEMP If specified, the table is created as a temporary table.
(2718) {424902} [424978]: UNLOGGED If specified, the table is created as an unlogged table.
(4749) {753048} [753149]: PARAMETERS TEMPORARY or TEMP If specified, the view is created as a temporary view.
(5025) {800553} [800656]: PARAMETERS TEMPORARY or TEMP If specified, the table is created as a temporary table.
(5034) {801727} [801803]: UNLOGGED If specified, the table is created as an unlogged table.
(5331) {850333} [850436]: PARAMETERS TEMPORARY or TEMP If specified, the table is created as a temporary table.
(5333) {850509} [850585]: UNLOGGED If specified, the table is created as an unlogged table.
*****************************************************************
========================= CLASS #442 =============================
(2725) {425422} [425524]: If column names are not provided, they are taken from the output column names of the query.
(3768) {598251} [598364]: If column names are not provided, they are taken from the output column names of the query.
*****************************************************************
========================= CLASS #443 =============================
(2726) {425533} [425714]: WITH ( storage_parameter [= value] [, ... ] ) This clause specifies optional storage parameters for the new table; see Storage Parameters for more information.
(3769) {598373} [598566]: WITH ( storage_parameter [= value] [, ... ] ) This clause specifies optional storage parameters for the new materialized view; see Storage Parameters for more information.
(5171) {821049} [821233]: WITH ( storage_parameter [= value] [, ... ] ) This clause specifies optional storage parameters for a table or index; see Storage Parameters for more information.
*****************************************************************
========================= CLASS #444 =============================
(2727) {425715} [425960]: The WITH clause can also include OIDS=TRUE (or just OIDS) to specify that rows of the new table should have OIDs (object identifiers) assigned to them, or OIDS=FALSE to specify that the rows should not have OIDs.
(5172) {821234} [821502]: The WITH clause for a table can also include OIDS=TRUE (or just OIDS) to specify that rows of the new table should have OIDs (object identifiers) assigned to them, or OIDS=FALSE to specify that the rows should not have OIDs.
*****************************************************************
========================= CLASS #445 =============================
(2729) {426037} [426182]: WITH OIDS WITHOUT OIDS These are obsolescent syntaxes equivalent to WITH (OIDS) and WITH (OIDS=FALSE), respectively.
(5180) {822538} [822683]: WITH OIDS WITHOUT OIDS These are obsolescent syntaxes equivalent to WITH (OIDS) and WITH (OIDS=FALSE), respectively.
*****************************************************************
========================= CLASS #446 =============================
(2730) {426183} [426318]: If you wish to give both an OIDS setting and storage parameters, you must use the WITH ( ... ) syntax; see above.
(5181) {822684} [822819]: If you wish to give both an OIDS setting and storage parameters, you must use the WITH ( ... ) syntax; see above.
*****************************************************************
========================= CLASS #447 =============================
(2731) {426327} [426460]: ON COMMIT The behavior of temporary tables at the end of a transaction block can be controlled using ON COMMIT.
(5182) {822828} [822961]: ON COMMIT The behavior of temporary tables at the end of a transaction block can be controlled using ON COMMIT.
*****************************************************************
========================= CLASS #448 =============================
(2732) {426461} [426580]: The three options are: PRESERVE ROWS No special action is taken at the ends of transactions.
(5183) {822962} [823081]: The three options are: PRESERVE ROWS No special action is taken at the ends of transactions.
*****************************************************************
========================= CLASS #449 =============================
(2734) {426638} [426765]: DELETE ROWS All rows in the temporary table will be deleted at the end of each transaction block.
(5185) {823139} [823266]: DELETE ROWS All rows in the temporary table will be deleted at the end of each transaction block.
*****************************************************************
========================= CLASS #450 =============================
(2735) {426766} [426842]: Essentially, an automatic TRUNCATE(7) is done at each commit.
(5186) {823267} [823343]: Essentially, an automatic TRUNCATE(7) is done at each commit.
*****************************************************************
========================= CLASS #451 =============================
(2736) {426855} [426970]: DROP The temporary table will be dropped at the end of the current transaction block.
(5187) {823356} [823471]: DROP The temporary table will be dropped at the end of the current transaction block.
*****************************************************************
========================= CLASS #452 =============================
(2737) {426979} [427118]: TABLESPACE tablespace_name The tablespace_name is the name of the tablespace in which the new table is to be created.
(3772) {598783} [598934]: TABLESPACE tablespace_name The tablespace_name is the name of the tablespace in which the new materialized view is to be created.
(5188) {823480} [823619]: TABLESPACE tablespace_name The tablespace_name is the name of the tablespace in which the new table is to be created.
*****************************************************************
========================= CLASS #453 =============================
(2739) {427236} [427383]: query A SELECT(7), TABLE, or VALUES(7) command, or an EXECUTE(7) command that runs a prepared SELECT, TABLE, or VALUES query.
(3774) {599005} [599063]: query A SELECT(7), TABLE, or VALUES(7) command.
*****************************************************************
========================= CLASS #454 =============================
(2740) {427392} [427535]: WITH [ NO ] DATA This clause specifies whether or not the data produced by the query should be copied into the new table.
(3776) {599239} [599374]: WITH [ NO ] DATA This clause specifies whether or not the materialized view should be populated at creation time.
*****************************************************************
========================= CLASS #455 =============================
(2744) {427824} [427922]: Furthermore, CREATE TABLE AS offers a superset of the functionality offered by SELECT INTO.
(5339) {851093} [851192]: Furthermore, CREATE TABLE AS offers a superset of the functionality provided by SELECT INTO.
*****************************************************************
========================= CLASS #456 =============================
(2752) {429491} [429605]: o The WITH clause is a PostgreSQL extension; neither storage parameters nor OIDs are in the standard.
(5277) {840733} [840858]: WITH Clause The WITH clause is a PostgreSQL extension; neither storage parameters nor OIDs are in the standard.
*****************************************************************
========================= CLASS #457 =============================
(2753) {429614} [429684]: o The PostgreSQL concept of tablespaces is not part of the standard.
(5278) {840863} [840948]: Tablespaces The PostgreSQL concept of tablespaces is not part of the standard.
*****************************************************************
========================= CLASS #458 =============================
(2815) {441427} [441575]: The SQL standard requires commas between successive transaction_modes, but for historical reasons PostgreSQL allows the commas to be omitted.
(4874) {773940} [774088]: The SQL standard requires commas between successive transaction_modes, but for historical reasons PostgreSQL allows the commas to be omitted.
*****************************************************************
========================= CLASS #459 =============================
(2824) {442987} [443048]: role_name The role(s) to which the policy applies.
(3258) {515891} [515950]: command The command to which the policy applies.
(3262) {516118} [516188]: role_name The role(s) to which the policy is to be applied.
*****************************************************************
========================= CLASS #460 =============================
(2894) {456954} [457033]: argtype An input data type on which the aggregate function operates.
(4632) {734922} [735001]: argtype An input data type on which the aggregate function operates.
(5445) {868904} [868990]: arg_data_type An input data type on which this aggregate function operates.
*****************************************************************
========================= CLASS #461 =============================
(2895) {457034} [457161]: To reference a zero-argument aggregate function, write * in place of the list of argument specifications.
(4633) {735002} [735129]: To reference a zero-argument aggregate function, write * in place of the list of argument specifications.
(5446) {868991} [869115]: To create a zero-argument aggregate function, write * in place of the list of argument specifications.
*****************************************************************
========================= CLASS #462 =============================
(2896) {457162} [457305]: To reference an ordered-set aggregate function, write ORDER BY between the direct and aggregated argument specifications.
(4634) {735130} [735273]: To reference an ordered-set aggregate function, write ORDER BY between the direct and aggregated argument specifications.
*****************************************************************
========================= CLASS #463 =============================
(2918) {461680} [461713]: This parameter defaults to FALSE.
(2921) {462100} [462144]: This parameter defaults to FALSE.
(2923) {462348} [462380]: This parameter defaults to TRUE.
(2932) {463599} [463620]: It defaults to FALSE.
(2937) {464190} [464210]: It defaults to TRUE.
(2940) {464435} [464478]: This parameter defaults to TEXT.
*****************************************************************
========================= CLASS #464 =============================
(2931) {463526} [463598]: This parameter may only be used when ANALYZE is also enabled.
(2936) {464117} [464189]: This parameter may only be used when ANALYZE is also enabled.
*****************************************************************
========================= CLASS #465 =============================
(2944) {464770} [464971]: statement Any SELECT, INSERT, UPDATE, DELETE, VALUES, EXECUTE, DECLARE, CREATE TABLE AS, or CREATE MATERIALIZED VIEW AS statement, whose execution plan you wish to see.
(4932) {782814} [782891]: statement Any SELECT, INSERT, UPDATE, DELETE, or VALUES statement.
*****************************************************************
========================= CLASS #466 =============================
(2980) {474240} [474426]: An I/O conversion cast is performed by invoking the output function of the source data type, and passing the resulting string to the input function of the target data type.
(3015) {478940} [479181]: WITH INOUT Indicates that the cast is an I/O conversion cast, performed by invoking the output function of the source data type, and passing the resulting string to the input function of the target data type.
*****************************************************************
========================= CLASS #467 =============================
(2986) {475186} [475267]: (We generally use the term assignment cast to describe this kind of cast.)
(2988) {475418} [475497]: (We generally use the term implicit cast to describe this kind of cast.)
*****************************************************************
========================= CLASS #468 =============================
(3009) {478424} [478510]: function_name(argument_type [, ...]) The function used to perform the cast.
(4052) {640355} [640424]: function_name The function used to perform the conversion.
*****************************************************************
========================= CLASS #469 =============================
(3011) {478565} [478647]: If it is not, the function will be looked up in the schema search path.
(4054) {640479} [640547]: If it is not, the function will be looked up in the path.
*****************************************************************
========================= CLASS #470 =============================
(3016) {479190} [479299]: AS ASSIGNMENT Indicates that the cast can be invoked implicitly in assignment contexts.
(3017) {479308} [479396]: AS IMPLICIT Indicates that the cast can be invoked implicitly in any context.
*****************************************************************
========================= CLASS #471 =============================
(3066) {486680} [487376]: SEE ALSO CREATE DOMAIN (CREATE_DOMAIN(7)), ALTER DOMAIN (ALTER_DOMAIN(7)) PostgreSQL 9.6.1 2016 DROP DOMAIN(7) SET SESSION AUTHORIZATIOPostgreSQL 9.6.1 DocumentaSETnSESSION AUTHORIZATION(7) NAME SET_SESSION_AUTHORIZATION - set the session user identifier and the current user identifier of the current session SYNOPSIS SET [ SESSION | LOCAL ] SESSION AUTHORIZATION user_name SET [ SESSION | LOCAL ] SESSION AUTHORIZATION DEFAULT RESET SESSION AUTHORIZATION DESCRIPTION This command sets the session user identifier and the current user identifier of the current SQL session to be user_name.
(4889) {776161} [776711]: SEE ALSO REASSIGN OWNED (REASSIGN_OWNED(7)), DROP ROLE (DROP_ROLE(7)) PostgreSQL 9.6.1 2016 DROP OWNED(7) SET ROLE(7) PostgreSQL 9.6.1 Documentation SET ROLE(7) NAME SET_ROLE - set the current user identifier of the current session SYNOPSIS SET [ SESSION | LOCAL ] ROLE role_name SET [ SESSION | LOCAL ] ROLE NONE RESET ROLE DESCRIPTION This command sets the current user identifier of the current SQL session to be role_name.
*****************************************************************
========================= CLASS #472 =============================
(3074) {488308} [488394]: The SESSION and LOCAL modifiers act the same as for the regular SET(7) command.
(4894) {777124} [777210]: The SESSION and LOCAL modifiers act the same as for the regular SET(7) command.
*****************************************************************
========================= CLASS #473 =============================
(3076) {488531} [488578]: These forms can be executed by any user.
(4896) {777328} [777375]: These forms can be executed by any user.
*****************************************************************
========================= CLASS #474 =============================
(3077) {488580} [488676]: NOTES SET SESSION AUTHORIZATION cannot be used within a SECURITY DEFINER function.
(4904) {778759} [778818]: SET ROLE cannot be used within a SECURITY DEFINER function.
*****************************************************************
========================= CLASS #475 =============================
(3078) {488678} [489224]: EXAMPLES SELECT SESSION_USER, CURRENT_USER; session_user | current_user --------------+-------------- peter | peter SET SESSION AUTHORIZATION 'paul'; SELECT SESSION_USER, CURRENT_USER; session_user | current_user --------------+-------------- paul | paul COMPATIBILITY The SQL standard allows some other expressions to appear in place of the literal user_name, but these options are not important in practice.
(4905) {778820} [779339]: EXAMPLES SELECT SESSION_USER, CURRENT_USER; session_user | current_user --------------+-------------- peter | peter SET ROLE 'paul'; SELECT SESSION_USER, CURRENT_USER; session_user | current_user --------------+-------------- peter | paul COMPATIBILITY PostgreSQL allows identifier syntax ("rolename"), while the SQL standard requires the role name to be written as a string literal.
*****************************************************************
========================= CLASS #476 =============================
(3080) {489309} [489442]: SQL does not allow this command during a transaction; PostgreSQL does not make this restriction because there is no reason to.
(4906) {779340} [779480]: SQL does not allow this command during a transaction; PostgreSQL does not make this restriction because there is no reason to.
*****************************************************************
========================= CLASS #477 =============================
(3081) {489443} [489533]: The SESSION and LOCAL modifiers are a PostgreSQL extension, as is the RESET syntax.
(4907) {779481} [779571]: The SESSION and LOCAL modifiers are a PostgreSQL extension, as is the RESET syntax.
*****************************************************************
========================= CLASS #478 =============================
(3083) {489648} [490360]: SEE ALSO SET ROLE (SET_ROLE(7)) PostgreSQL 9.6.1 2016 SET SESSION AUTHORIZATION(7) MOVE(7) PostgreSQL 9.6.1 Documentation MOVE(7) NAME MOVE - position a cursor SYNOPSIS MOVE [ direction [ FROM | IN ] ] cursor_name where direction can be empty or one of: NEXT PRIOR FIRST LAST ABSOLUTE count RELATIVE count count ALL FORWARD FORWARD count FORWARD ALL BACKWARD BACKWARD count BACKWARD ALL DESCRIPTION MOVE repositions a cursor without retrieving any data.
(3869) {613764} [614541]: SEE ALSO ALTER SCHEMA (ALTER_SCHEMA(7)), DROP SCHEMA (DROP_SCHEMA(7)) PostgreSQL 9.6.1 2016 CREATE SCHEMA(7) FETCH(7) PostgreSQL 9.6.1 Documentation FETCH(7) NAME FETCH - retrieve rows from a query using a cursor SYNOPSIS FETCH [ direction [ FROM | IN ] ] cursor_name where direction can be empty or one of: NEXT PRIOR FIRST LAST ABSOLUTE count RELATIVE count count ALL FORWARD FORWARD count FORWARD ALL BACKWARD BACKWARD count BACKWARD ALL DESCRIPTION FETCH retrieves rows using a previously-created cursor.
*****************************************************************
========================= CLASS #479 =============================
(3086) {490629} [490878]: OUTPUTS On successful completion, a MOVE command returns a command tag of the form MOVE count The count is the number of rows that a FETCH command with the same parameters would have returned (possibly zero).
(3906) {618423} [618609]: OUTPUTS On successful completion, a FETCH command returns a command tag of the form FETCH count The count is the number of rows fetched (possibly zero).
*****************************************************************
========================= CLASS #480 =============================
(3088) {491550} [492033]: SEE ALSO CLOSE(7), DECLARE(7), FETCH(7) PostgreSQL 9.6.1 2016 MOVE(7) DROP TEXT SEARCH CONFIGUPostgreSQL 9.6.1 DocuDROPaTEXT SEARCH CONFIGURATION(7) NAME DROP_TEXT_SEARCH_CONFIGURATION - remove a text search configuration SYNOPSIS DROP TEXT SEARCH CONFIGURATION [ IF EXISTS ] name [ CASCADE | RESTRICT ] DESCRIPTION DROP TEXT SEARCH CONFIGURATION drops an existing text search configuration.
(3921) {621587} [622007]: SEE ALSO CLOSE(7), DECLARE(7), MOVE(7) PostgreSQL 9.6.1 2016 FETCH(7) DROP SERVER(7) PostgreSQL 9.6.1 Documentation DROP SERVER(7) NAME DROP_SERVER - remove a foreign server descriptor SYNOPSIS DROP SERVER [ IF EXISTS ] name [ CASCADE | RESTRICT ] DESCRIPTION DROP SERVER removes an existing foreign server descriptor.
*****************************************************************
========================= CLASS #481 =============================
(3097) {493009} [493090]: Add CASCADE to drop such indexes along with the text search configuration.
(4071) {643423} [643494]: Add CASCADE to drop such indexes along with the operator family.
(4087) {645984} [646054]: Add CASCADE to drop such indexes along with the operator class.
*****************************************************************
========================= CLASS #482 =============================
(3099) {493195} [493672]: SEE ALSO ALTER TEXT SEARCH CONFIGURATION (ALTER_TEXT_SEARCH_CONFIGURATION(7)), CREATE TEXT SEARCH CONFIGURATION (CREATE_TEXT_SEARCH_CONFIGURATION(7)) PostgreSQL 9.6.1 2016 DROP TEXT SEARCH CONFIGURATION(7) END(7) PostgreSQL 9.6.1 Documentation END(7) NAME END - commit the current transaction SYNOPSIS END [ WORK | TRANSACTION ] DESCRIPTION END commits the current transaction.
(5738) {911813} [912132]: PostgreSQL 9.6.1 2016 TRUNCATE(7) COMMIT(7) PostgreSQL 9.6.1 Documentation COMMIT(7) NAME COMMIT - commit the current transaction SYNOPSIS COMMIT [ WORK | TRANSACTION ] DESCRIPTION COMMIT commits the current transaction.
*****************************************************************
========================= CLASS #483 =============================
(3100) {493673} [493799]: All changes made by the transaction become visible to others and are guaranteed to be durable if a crash occurs.
(5739) {912133} [912259]: All changes made by the transaction become visible to others and are guaranteed to be durable if a crash occurs.
*****************************************************************
========================= CLASS #484 =============================
(3104) {493975} [494027]: NOTES Use ROLLBACK(7) to abort a transaction.
(5742) {912356} [912408]: NOTES Use ROLLBACK(7) to abort a transaction.
*****************************************************************
========================= CLASS #485 =============================
(3105) {494036} [494137]: Issuing END when not inside a transaction does no harm, but it will provoke a warning message.
(5743) {912417} [912521]: Issuing COMMIT when not inside a transaction does no harm, but it will provoke a warning message.
*****************************************************************
========================= CLASS #486 =============================
(3121) {496314} [496375]: TABLE Recreate all indexes of the specified table.
(3123) {496466} [496529]: SCHEMA Recreate all indexes of the specified schema.
*****************************************************************
========================= CLASS #487 =============================
(3122) {496376} [496457]: If the table has a secondary "TOAST" table, that is reindexed as well.
(3124) {496530} [496624]: If a table of this schema has a secondary "TOAST" table, that is reindexed as well.
*****************************************************************
========================= CLASS #488 =============================
(3125) {496636} [496689]: Indexes on shared system catalogs are also processed.
(3128) {496847} [496911]: Indexes on shared system catalogs are also processed.
(3131) {497097} [497144]: Indexes on shared system catalogs are included.
*****************************************************************
========================= CLASS #489 =============================
(3137) {497602} [497673]: VERBOSE Prints a progress report as each index is reindexed.
(3508) {556854} [556925]: VERBOSE Prints a progress report as each table is clustered.
*****************************************************************
========================= CLASS #490 =============================
(3180) {504339} [504513]: The new foreign tables will be owned by the user issuing the command and are created with the correct column definitions and options to match the remote tables.
(3529) {561525} [561581]: The table will be owned by the user issuing the command.
(4688) {743445} [743505]: The generator will be owned by the user issuing the command.
(5011) {798898} [798954]: The table will be owned by the user issuing the command.
*****************************************************************
========================= CLASS #491 =============================
(3206) {508132} [508204]: start_function The name of the start function for the parser.
(3207) {508213} [508297]: gettoken_function The name of the get-next-token function for the parser.
(3208) {508306} [508374]: end_function The name of the end function for the parser.
*****************************************************************
========================= CLASS #492 =============================
(3265) {516353} [516440]: The conditional expression cannot contain any aggregate or window functions.
(3271) {516983} [517070]: The conditional expression cannot contain any aggregate or window functions.
*****************************************************************
========================= CLASS #493 =============================
(3266) {516441} [516561]: This expression will be added to queries that refer to the table if row level security is enabled.
(3272) {517071} [517202]: This expression will be used in INSERT and UPDATE queries against the table if row level security is enabled.
*****************************************************************
========================= CLASS #494 =============================
(3276) {517601} [517754]: Per-Command Policies ALL Using ALL for a policy means that it will apply to all commands, regardless of the type of command.
(3284) {519483} [519582]: INSERT Using INSERT for a policy means that it will apply to INSERT commands.
(3300) {522367} [522466]: DELETE Using DELETE for a policy means that it will apply to DELETE commands.
*****************************************************************
========================= CLASS #495 =============================
(3283) {519319} [519474]: A SELECT policy cannot have a WITH CHECK expression, as it only applies in cases where records are being retrieved from the relation.
(3286) {519742} [519887]: An INSERT policy cannot have a USING expression, as it only applies in cases where records are being added to the relation.
(3305) {523343} [523534]: A DELETE policy cannot have a WITH CHECK expression, as it only applies in cases where records are being deleted from the relation, so that there is no new row to check.
*****************************************************************
========================= CLASS #496 =============================
(3291) {520739} [521094]: When an UPDATE command is used with a WHERE clause or a RETURNING clause, SELECT rights are also required on the relation being updated and the appropriate SELECT and ALL policies will be combined (using OR for any overlapping SELECT related policies found) with the USING clause of the UPDATE policy using AND.
(3303) {522731} [523085]: When a DELETE command is used with a WHERE clause or a RETURNING clause, SELECT rights are also required on the relation being updated and the appropriate SELECT and ALL policies will be combined (using OR for any overlapping SELECT related policies found) with the USING clause of the DELETE policy using AND.
*****************************************************************
========================= CLASS #497 =============================
(3292) {521106} [521339]: Therefore, in order for a user to be able to UPDATE specific rows, the user must have access to the row(s) through a SELECT or ALL policy and the row(s) must pass the UPDATE policy's USING expression.
(3304) {523097} [523330]: Therefore, in order for a user to be able to DELETE specific rows, the user must have access to the row(s) through a SELECT or ALL policy and the row(s) must pass the DELETE policy's USING expression.
*****************************************************************
========================= CLASS #498 =============================
(3346) {532443} [532617]: The possible privileges are: SELECT Allows SELECT(7) from any column, or the specific columns listed, of the specified table, view, or sequence.
(3354) {533225} [533341]: UPDATE Allows UPDATE(7) of any column, or the specific columns listed, of the specified table.
*****************************************************************
========================= CLASS #499 =============================
(3355) {533342} [533573]: (In practice, any nontrivial UPDATE command will require SELECT privilege as well, since it must reference table columns to determine which rows to update, and/or to compute new values for columns.)
(3360) {533990} [534179]: (In practice, any nontrivial DELETE command will require SELECT privilege as well, since it must reference table columns to determine which rows to delete.)
*****************************************************************
========================= CLASS #500 =============================
(3357) {533733} [533825]: For sequences, this privilege allows the use of the nextval and setval functions.
(3384) {536805} [536898]: For sequences, this privilege allows the use of the currval and nextval functions.
*****************************************************************
========================= CLASS #501 =============================
(3375) {535807} [535885]: This is the only type of privilege that is applicable to functions.
(3378) {536102} [536191]: This is the only type of privilege that is applicable to procedural languages.
*****************************************************************
========================= CLASS #502 =============================
(3442) {546649} [546700]: This is not possible according to the SQL standard.
(4564) {725637} [725699]: This is not valid syntax according to the SQL standard.
*****************************************************************
========================= CLASS #503 =============================
(3471) {550897} [550998]: All currently available prepared transactions are listed in the pg_prepared_xacts system view.
(3653) {579895} [579996]: All currently available prepared transactions are listed in the pg_prepared_xacts system view.
(3937) {623848} [623949]: All currently available prepared transactions are listed in the pg_prepared_xacts system view.
*****************************************************************
========================= CLASS #504 =============================
(3473) {551115} [551414]: This will interfere with the ability of VACUUM to reclaim storage, and in extreme cases could cause the database to shut down to prevent transaction ID wraparound (see Section 24.1.5, "Preventing Transaction ID Wraparound Failures", in the documentation).
(5210) {826497} [826646]: See Section 24.1.5, "Preventing Transaction ID Wraparound Failures", in the documentation for more about wraparound prevention.
*****************************************************************
========================= CLASS #505 =============================
(3479) {552410} [552612]: It is intended for use by external transaction management systems, some of which are covered by standards (such as X/Open XA), but the SQL side of those systems is not standardized.
(3655) {580189} [580391]: It is intended for use by external transaction management systems, some of which are covered by standards (such as X/Open XA), but the SQL side of those systems is not standardized.
(3939) {624156} [624358]: It is intended for use by external transaction management systems, some of which are covered by standards (such as X/Open XA), but the SQL side of those systems is not standardized.
*****************************************************************
========================= CLASS #506 =============================
(3484) {553650} [553747]: NOTES REASSIGN OWNED is often used to prepare for the removal of one or more roles.
(4881) {775260} [775353]: NOTES DROP OWNED is often used to prepare for the removal of one or more roles.
*****************************************************************
========================= CLASS #507 =============================
(3485) {553748} [553958]: Because REASSIGN OWNED does not affect objects within other databases, it is usually necessary to execute this command in each database that contains objects owned by a role that is to be removed.
(4882) {775354} [775562]: Because DROP OWNED only affects the objects in the current database, it is usually necessary to execute this command in each database that contains objects owned by a role that is to be removed.
*****************************************************************
========================= CLASS #508 =============================
(3487) {554065} [554199]: The DROP OWNED (DROP_OWNED(7)) command is an alternative that simply drops all the database objects owned by one or more roles.
(4884) {775675} [775838]: The REASSIGN OWNED (REASSIGN_OWNED(7)) command is an alternative that reassigns the ownership of all the database objects owned by one or more roles.
*****************************************************************
========================= CLASS #509 =============================
(3491) {554481} [554555]: COMPATIBILITY The REASSIGN OWNED command is a PostgreSQL extension.
(4888) {776089} [776159]: COMPATIBILITY The DROP OWNED command is a PostgreSQL extension.
*****************************************************************
========================= CLASS #510 =============================
(3532) {561785} [561965]: The name of the foreign table must be distinct from the name of any other foreign table, table, sequence, index, view, or materialized view in the same schema.
(4692) {743778} [743920]: The sequence name must be distinct from the name of any other sequence, table, index, view, or foreign table in the same schema.
(4748) {752909} [753046]: The name of the view must be distinct from the name of any other view, table, sequence, index or foreign table in the same schema.
(5015) {799274} [799420]: The name of the table must be distinct from the name of any other table, sequence, index, view, or foreign table in the same schema.
*****************************************************************
========================= CLASS #511 =============================
(3533) {561974} [562129]: CREATE FOREIGN TABLE also automatically creates a data type that represents the composite type corresponding to one row of the foreign table.
(5016) {799429} [799561]: CREATE TABLE also automatically creates a data type that represents the composite type corresponding to one row of the table.
*****************************************************************
========================= CLASS #512 =============================
(3534) {562130} [562234]: Therefore, foreign tables cannot have the same name as any existing data type in the same schema.
(5017) {799562} [799658]: Therefore, tables cannot have the same name as any existing data type in the same schema.
*****************************************************************
========================= CLASS #513 =============================
(3535) {562243} [562413]: To be able to create a foreign table, you must have USAGE privilege on the foreign server, as well as USAGE privilege on all column types used in the table.
(5024) {800421} [800551]: To be able to create a table, you must have USAGE privilege on all column types or the type in the OF clause, respectively.
*****************************************************************
========================= CLASS #514 =============================
(3543) {562983} [563122]: For more information on the data types supported by PostgreSQL, refer to Chapter 8, Data Types, in the documentation.
(5050) {803567} [803706]: For more information on the data types supported by PostgreSQL, refer to Chapter 8, Data Types, in the documentation.
*****************************************************************
========================= CLASS #515 =============================
(3544) {563131} [563266]: COLLATE collation The COLLATE clause assigns a collation to the column (which must be of a collatable data type).
(5051) {803715} [803850]: COLLATE collation The COLLATE clause assigns a collation to the column (which must be of a collatable data type).
*****************************************************************
========================= CLASS #516 =============================
(3546) {563354} [563535]: INHERITS ( parent_table [, ... ] ) The optional INHERITS clause specifies a list of tables from which the new foreign table automatically inherits all columns.
(5053) {803938} [804111]: INHERITS ( parent_table [, ... ] ) The optional INHERITS clause specifies a list of tables from which the new table automatically inherits all columns.
*****************************************************************
========================= CLASS #517 =============================
(3547) {563536} [563599]: Parent tables can be plain tables or foreign tables.
(5054) {804112} [804175]: Parent tables can be plain tables or foreign tables.
*****************************************************************
========================= CLASS #518 =============================
(3550) {563781} [564033]: If the constraint is violated, the constraint name is present in error messages, so constraint names like col must be positive can be used to communicate helpful constraint information to client applications.
(5090) {809152} [809404]: If the constraint is violated, the constraint name is present in error messages, so constraint names like col must be positive can be used to communicate helpful constraint information to client applications.
*****************************************************************
========================= CLASS #519 =============================
(3551) {564034} [564120]: (Double-quotes are needed to specify constraint names that contain spaces.)
(5091) {809405} [809491]: (Double-quotes are needed to specify constraint names that contain spaces.)
*****************************************************************
========================= CLASS #520 =============================
(3553) {564208} [564277]: NOT NULL The column is not allowed to contain null values.
(3554) {564286} [564347]: NULL The column is allowed to contain null values.
(5093) {809579} [809648]: NOT NULL The column is not allowed to contain null values.
(5094) {809657} [809718]: NULL The column is allowed to contain null values.
*****************************************************************
========================= CLASS #521 =============================
(3556) {564381} [564471]: This clause is only provided for compatibility with non-standard SQL databases.
(5096) {809752} [809842]: This clause is only provided for compatibility with non-standard SQL databases.
*****************************************************************
========================= CLASS #522 =============================
(3558) {564524} [564835]: CHECK ( expression ) [ NO INHERIT ] The CHECK clause specifies an expression producing a Boolean result which each row in the foreign table is expected to satisfy; that is, the expression should produce TRUE or UNKNOWN, never FALSE, for all rows in the foreign table.
(5098) {809895} [810116]: CHECK ( expression ) [ NO INHERIT ] The CHECK clause specifies an expression producing a Boolean result which new or updated rows must satisfy for an insert or update operation to succeed.
*****************************************************************
========================= CLASS #523 =============================
(3559) {564836} [565047]: A check constraint specified as a column constraint should reference that column's value only, while an expression appearing in a table constraint can reference multiple columns.
(5101) {810356} [810567]: A check constraint specified as a column constraint should reference that column's value only, while an expression appearing in a table constraint can reference multiple columns.
*****************************************************************
========================= CLASS #524 =============================
(3561) {565188} [565277]: The system column tableoid may be referenced, but not any other system column.
(5103) {810708} [810797]: The system column tableoid may be referenced, but not any other system column.
*****************************************************************
========================= CLASS #525 =============================
(3562) {565290} [565372]: A constraint marked with NO INHERIT will not propagate to child tables.
(5104) {810810} [810892]: A constraint marked with NO INHERIT will not propagate to child tables.
*****************************************************************
========================= CLASS #526 =============================
(3563) {565381} [565529]: DEFAULT default_expr The DEFAULT clause assigns a default data value for the column whose column definition it appears within.
(5107) {811190} [811338]: DEFAULT default_expr The DEFAULT clause assigns a default data value for the column whose column definition it appears within.
*****************************************************************
========================= CLASS #527 =============================
(3564) {565530} [565682]: The value is any variable-free expression (subqueries and cross-references to other columns in the current table are not allowed).
(5108) {811339} [811491]: The value is any variable-free expression (subqueries and cross-references to other columns in the current table are not allowed).
*****************************************************************
========================= CLASS #528 =============================
(3567) {565903} [565976]: If there is no default for a column, then the default is null.
(5111) {811712} [811785]: If there is no default for a column, then the default is null.
*****************************************************************
========================= CLASS #529 =============================
(3614) {572992} [573291]: The extent of analysis can be controlled by adjusting the default_statistics_target configuration variable, or on a column-by-column basis by setting the per-column statistics target with ALTER TABLE ... ALTER COLUMN ... SET STATISTICS (see ALTER TABLE (ALTER_TABLE(7))).
(3752) {595547} [595630]: NOTES These operations are also possible using ALTER TABLE (ALTER_TABLE(7)).
*****************************************************************
========================= CLASS #530 =============================
(3647) {578811} [579403]: SEE ALSO CREATE MATERIALIZED VIEW (CREATE_MATERIALIZED_VIEW(7)), ALTER MATERIALIZED VIEW (ALTER_MATERIALIZED_VIEW(7)), DROP MATERIALIZED VIEW (DROP_MATERIALIZED_VIEW(7)) PostgreSQL 9.6.1 2016 REFRESH MATERIALIZED VIEW(7) COMMIT PREPARED(7) PostgreSQL 9.6.1 Documentation COMMIT PREPARED(7) NAME COMMIT_PREPARED - commit a transaction that was earlier prepared for two-phase commit SYNOPSIS COMMIT PREPARED transaction_id DESCRIPTION COMMIT PREPARED commits a transaction that is in prepared state.
(3931) {622858} [623349]: SEE ALSO CREATE SERVER (CREATE_SERVER(7)), ALTER SERVER (ALTER_SERVER(7)) PostgreSQL 9.6.1 2016 DROP SERVER(7) ROLLBACK PREPARED(7) PostgreSQL 9.6.1 Documentation ROLLBACK PREPARED(7) NAME ROLLBACK_PREPARED - cancel a transaction that was earlier prepared for two-phase commit SYNOPSIS ROLLBACK PREPARED transaction_id DESCRIPTION ROLLBACK PREPARED rolls back a transaction that is in prepared state.
*****************************************************************
========================= CLASS #531 =============================
(3648) {579405} [579530]: PARAMETERS transaction_id The transaction identifier of the transaction that is to be committed.
(3932) {623351} [623478]: PARAMETERS transaction_id The transaction identifier of the transaction that is to be rolled back.
*****************************************************************
========================= CLASS #532 =============================
(3649) {579532} [579676]: NOTES To commit a prepared transaction, you must be either the same user that executed the transaction originally, or a superuser.
(3933) {623480} [623627]: NOTES To roll back a prepared transaction, you must be either the same user that executed the transaction originally, or a superuser.
*****************************************************************
========================= CLASS #533 =============================
(3650) {579677} [579760]: But you do not have to be in the same session that executed the transaction.
(3934) {623628} [623711]: But you do not have to be in the same session that executed the transaction.
*****************************************************************
========================= CLASS #534 =============================
(3654) {579998} [580188]: EXAMPLES Commit the transaction identified by the transaction identifier foobar: COMMIT PREPARED 'foobar'; COMPATIBILITY COMMIT PREPARED is a PostgreSQL extension.
(3938) {623951} [624155]: EXAMPLES Roll back the transaction identified by the transaction identifier foobar: ROLLBACK PREPARED 'foobar'; COMPATIBILITY ROLLBACK PREPARED is a PostgreSQL extension.
*****************************************************************
========================= CLASS #535 =============================
(3658) {582067} [582229]: (All the possible attributes are covered, except that there are no options for adding or removing memberships; use GRANT(7) and REVOKE(7) for that.)
(3697) {586734} [586779]: Use GRANT(7) and REVOKE(7) to do that.
*****************************************************************
========================= CLASS #536 =============================
(3663) {582578} [582626]: The second variant changes the name of the role.
(4979) {791236} [791284]: The third variant changes the name of the group.
*****************************************************************
========================= CLASS #537 =============================
(3682) {584570} [584658]: CURRENT_USER Alter the current user instead of an explicitly identified role.
(3683) {584667} [584774]: SESSION_USER Alter the current session user instead of an explicitly identified role.
*****************************************************************
========================= CLASS #538 =============================
(3695) {586561} [586678]: NOTES Use CREATE ROLE (CREATE_ROLE(7)) to add new roles, and DROP ROLE (DROP_ROLE(7)) to remove a role.
(4003) {633292} [633425]: NOTES Use ALTER ROLE (ALTER_ROLE(7)) to change the attributes of a role, and DROP ROLE (DROP_ROLE(7)) to remove a role.
*****************************************************************
========================= CLASS #539 =============================
(3698) {586788} [586879]: Caution must be exercised when specifying an unencrypted password with this command.
(4021) {635845} [635936]: Caution must be exercised when specifying an unencrypted password with this command.
*****************************************************************
========================= CLASS #540 =============================
(3699) {586880} [587033]: The password will be transmitted to the server in cleartext, and it might also be logged in the client's command history or the server log.
(4022) {635937} [636090]: The password will be transmitted to the server in cleartext, and it might also be logged in the client's command history or the server log.
*****************************************************************
========================= CLASS #541 =============================
(3700) {587035} [587171]: psql(1) contains a command \password that can be used to change a role's password without exposing the cleartext password.
(4024) {636168} [636271]: Also, psql(1) contains a command \password that can be used to safely change the password later.
*****************************************************************
========================= CLASS #542 =============================
(3705) {589005} [589062]: A schema can only be dropped by its owner or a superuser.
(4612) {731977} [732038]: A tablespace can only be dropped by its owner or a superuser.
(5760) {915052} [915118]: A sequence can only be dropped by its owner or a superuser.
*****************************************************************
========================= CLASS #543 =============================
(3739) {594293} [594379]: See CREATE INDEX (CREATE_INDEX(7)) for details on the available parameters.
(5239) {831199} [831264]: (See CREATE INDEX (CREATE_INDEX(7)) for more information.)
*****************************************************************
========================= CLASS #544 =============================
(3816) {605358} [605526]: Values can be specified as string constants, identifiers, numbers, or comma-separated lists of these, as appropriate for the particular parameter.
(5569) {887213} [887381]: Values can be specified as string constants, identifiers, numbers, or comma-separated lists of these, as appropriate for the particular parameter.
*****************************************************************
========================= CLASS #545 =============================
(3825) {606718} [606829]: Here are examples of valid values: 'PST8PDT' The time zone for Berkeley, California.
(3826) {606842} [606895]: 'Europe/Rome' The time zone for Italy.
*****************************************************************
========================= CLASS #546 =============================
(3834) {607650} [607803]: NOTES The function set_config provides equivalent functionality; see Section 9.26, "System Administration Functions", in the documentation.
(5606) {892608} [892759]: NOTES The function current_setting produces equivalent output; see Section 9.26, "System Administration Functions", in the documentation.
*****************************************************************
========================= CLASS #547 =============================
(3851) {610809} [610945]: To create a schema owned by another role, you must be a direct or indirect member of that role, or be a superuser.
(5633) {897311} [897449]: To create a database owned by another role, you must be a direct or indirect member of that role, or be a superuser.
*****************************************************************
========================= CLASS #548 =============================
(3889) {616861} [617002]: ABSOLUTE count Fetch the count'th row of the query, or the abs(count)'th row from the end if count is negative.
(3891) {617173} [617305]: RELATIVE count Fetch the count'th succeeding row, or the abs(count)'th prior row if count is negative.
*****************************************************************
========================= CLASS #549 =============================
(3892) {617307} [617368]: RELATIVE 0 re-fetches the current row, if any.
(3897) {617671} [617723]: FORWARD 0 re-fetches the current row.
(3901) {617954} [618007]: BACKWARD 0 re-fetches the current row.
*****************************************************************
========================= CLASS #550 =============================
(3893) {617381} [617452]: count Fetch the next count rows (same as FORWARD count).
(3896) {617614} [617669]: FORWARD count Fetch the next count rows.
*****************************************************************
========================= CLASS #551 =============================
(3894) {617465} [617531]: ALL Fetch all remaining rows (same as FORWARD ALL).
(3898) {617736} [617788]: FORWARD ALL Fetch all remaining rows.
*****************************************************************
========================= CLASS #552 =============================
(3957) {627699} [627755]: If not specified, NOSUPERUSER is the default.
(3961) {628056} [628111]: If not specified, NOCREATEDB is the default.
(3964) {628363} [628420]: If not specified, NOCREATEROLE is the default.
(3968) {628956} [629008]: If not specified, INHERIT is the default.
(3975) {629984} [630031]: If not specified, NOREPLICATION is the default.
*****************************************************************
========================= CLASS #553 =============================
(3972) {629459} [629620]: If not specified, NOLOGIN is the default, except when CREATE ROLE is invoked through its alternative spelling CREATE USER (CREATE_USER(7)).
(5626) {896555} [896588]: See CREATE USER (CREATE_USER(7)).
*****************************************************************
========================= CLASS #554 =============================
(3982) {630677} [630709]: -1 (the default) means no limit.
(5655) {899442} [899485]: -1 (the default) means no limit.
*****************************************************************
========================= CLASS #555 =============================
(4019) {635567} [635779]: The CONNECTION LIMIT option is only enforced approximately; if two new sessions start at about the same time when just one connection "slot" remains for the role, it is possible that both will fail.
(5675) {902268} [902484]: The CONNECTION LIMIT option is only enforced approximately; if two new sessions start at about the same time when just one connection "slot" remains for the database, it is possible that both will fail.
*****************************************************************
========================= CLASS #556 =============================
(4033) {637793} [638333]: SEE ALSO SET ROLE (SET_ROLE(7)), ALTER ROLE (ALTER_ROLE(7)), DROP ROLE (DROP_ROLE(7)), GRANT(7), REVOKE(7), createuser(1) PostgreSQL 9.6.1 2016 CREATE ROLE(7) ROLLBACK(7) PostgreSQL 9.6.1 Documentation ROLLBACK(7) NAME ROLLBACK - abort the current transaction SYNOPSIS ROLLBACK [ WORK | TRANSACTION ] DESCRIPTION ROLLBACK rolls back the current transaction and causes all the updates made by the transaction to be discarded.
(5549) {884161} [884676]: SEE ALSO BEGIN(7), COMMIT(7), ROLLBACK(7), ROLLBACK TO SAVEPOINT (ROLLBACK_TO_SAVEPOINT(7)), SAVEPOINT(7) PostgreSQL 9.6.1 2016 RELEASE SAVEPOINT(7) ABORT(7) PostgreSQL 9.6.1 Documentation ABORT(7) NAME ABORT - abort the current transaction SYNOPSIS ABORT [ WORK | TRANSACTION ] DESCRIPTION ABORT rolls back the current transaction and causes all the updates made by the transaction to be discarded.
*****************************************************************
========================= CLASS #557 =============================
(4039) {638770} [638814]: Otherwise, this command is fully conforming.
(5745) {912724} [912768]: Otherwise, this command is fully conforming.
*****************************************************************
========================= CLASS #558 =============================
(4043) {639596} [639733]: To be able to create a conversion, you must have EXECUTE privilege on the function and CREATE privilege on the destination schema.
(4987) {792609} [792707]: To be able to create a collation, you must have CREATE privilege on the destination schema.
*****************************************************************
========================= CLASS #559 =============================
(4048) {640096} [640169]: If it is not, the conversion is defined in the current schema.
(4990) {792825} [792897]: If it is not, the collation is defined in the current schema.
*****************************************************************
========================= CLASS #560 =============================
(4061) {642153} [642332]: DROP OPERATOR FAMILY includes dropping any operator classes contained in the family, but it does not drop any of the operators or functions referenced by the family.
(4075) {644350} [644449]: DROP OPERATOR CLASS does not drop any of the operators or functions referenced by the class.
*****************************************************************
========================= CLASS #561 =============================
(4062) {642333} [642479]: If there are any indexes depending on operator classes within the family, you will need to specify CASCADE for the drop to complete.
(4076) {644450} [644580]: If there are any indexes depending on the operator class, you will need to specify CASCADE for the drop to complete.
*****************************************************************
========================= CLASS #562 =============================
(4070) {643182} [643422]: EXAMPLES Remove the B-tree operator family float_ops: DROP OPERATOR FAMILY float_ops USING btree; This command will not succeed if there are any existing indexes that use operator classes within the family.
(4086) {645759} [645983]: EXAMPLES Remove the B-tree operator class widget_ops: DROP OPERATOR CLASS widget_ops USING btree; This command will not succeed if there are any existing indexes that use the operator class.
*****************************************************************
========================= CLASS #563 =============================
(4091) {647304} [647486]: There are two ways to modify a table using information contained in other tables in the database: using sub-selects, or specifying additional tables in the FROM clause.
(4156) {658759} [658950]: There are two ways to delete rows in a table using information contained in other tables in the database: using sub-selects, or specifying additional tables in the USING clause.
*****************************************************************
========================= CLASS #564 =============================
(4092) {647487} [647568]: Which technique is more appropriate depends on the specific circumstances.
(4157) {658951} [659032]: Which technique is more appropriate depends on the specific circumstances.
*****************************************************************
========================= CLASS #565 =============================
(4094) {647695} [647817]: Any expression using the table's columns, and/or columns of other tables mentioned in FROM, can be computed.
(4159) {659159} [659282]: Any expression using the table's columns, and/or columns of other tables mentioned in USING, can be computed.
*****************************************************************
========================= CLASS #566 =============================
(4102) {648613} [648729]: If ONLY is specified before the table name, matching rows are updated in the named table only.
(4165) {659981} [660088]: If ONLY is specified before the table name, matching rows are deleted from the named table only.
*****************************************************************
========================= CLASS #567 =============================
(4103) {648730} [648844]: If ONLY is not specified, matching rows are also updated in any tables inheriting from the named table.
(4166) {660089} [660216]: If ONLY is not specified, matching rows are also deleted from any tables inheriting from the named table.
*****************************************************************
========================= CLASS #568 =============================
(4105) {648987} [649043]: alias A substitute name for the target table.
(4168) {660348} [660404]: alias A substitute name for the target table.
*****************************************************************
========================= CLASS #569 =============================
(4107) {649132} [649266]: For example, given UPDATE foo AS f, the remainder of the UPDATE statement must refer to this table as f not foo.
(4170) {660493} [660632]: For example, given DELETE FROM foo AS f, the remainder of the DELETE statement must refer to this table as f not foo.
*****************************************************************
========================= CLASS #570 =============================
(4118) {650448} [650604]: from_list A list of table expressions, allowing columns from other tables to appear in the WHERE condition and the update expressions.
(4171) {660641} [660771]: using_list A list of table expressions, allowing columns from other tables to appear in the WHERE condition.
*****************************************************************
========================= CLASS #571 =============================
(4119) {650605} [650728]: This is similar to the list of tables that can be specified in the FROM Clause of a SELECT statement.
(4172) {660772} [660965]: This is similar to the list of tables that can be specified in the FROM Clause of a SELECT statement; for example, an alias for the table name can be specified.
*****************************************************************
========================= CLASS #572 =============================
(4123) {651071} [651156]: cursor_name The name of the cursor to use in a WHERE CURRENT OF condition.
(4176) {661232} [661317]: cursor_name The name of the cursor to use in a WHERE CURRENT OF condition.
*****************************************************************
========================= CLASS #573 =============================
(4124) {651157} [651251]: The row to be updated is the one most recently fetched from this cursor.
(4177) {661318} [661412]: The row to be deleted is the one most recently fetched from this cursor.
*****************************************************************
========================= CLASS #574 =============================
(4125) {651252} [651332]: The cursor must be a non-grouping query on the UPDATE's target table.
(4178) {661413} [661493]: The cursor must be a non-grouping query on the DELETE's target table.
*****************************************************************
========================= CLASS #575 =============================
(4126) {651333} [651425]: Note that WHERE CURRENT OF cannot be specified together with a Boolean condition.
(4179) {661494} [661586]: Note that WHERE CURRENT OF cannot be specified together with a Boolean condition.
*****************************************************************
========================= CLASS #576 =============================
(4127) {651426} [651515]: See DECLARE(7) for more information about using cursors with WHERE CURRENT OF.
(4180) {661587} [661676]: See DECLARE(7) for more information about using cursors with WHERE CURRENT OF.
(4918) {781057} [781116]: Refer to EXECUTE(7) for more information about that.
*****************************************************************
========================= CLASS #577 =============================
(4133) {652111} [652265]: Note that the number may be less than the number of rows that matched the condition when updates were suppressed by a BEFORE UPDATE trigger.
(4186) {662213} [662367]: Note that the number may be less than the number of rows that matched the condition when deletes were suppressed by a BEFORE DELETE trigger.
*****************************************************************
========================= CLASS #578 =============================
(4134) {652266} [652356]: If count is 0, no rows were updated by the query (this is not considered an error).
(4187) {662368} [662458]: If count is 0, no rows were deleted by the query (this is not considered an error).
*****************************************************************
========================= CLASS #579 =============================
(4200) {665453} [668167]: SEE ALSO DROP ROLE (DROP_ROLE(7)) PostgreSQL 9.6.1 2016 DROP GROUP(7) SELECT(7) PostgreSQL 9.6.1 Documentation SELECT(7) NAME SELECT, TABLE, WITH - retrieve rows from a table or view SYNOPSIS [ WITH [ RECURSIVE ] with_query [, ...] ] SELECT [ ALL | DISTINCT [ ON ( expression [, ...] ) ] ] [ * | expression [ [ AS ] output_name ] [, ...] ] [ FROM from_item [, ...] ] [ WHERE condition ] [ GROUP BY grouping_element [, ...] ] [ HAVING condition [, ...] ] [ WINDOW window_name AS ( window_definition ) [, ...] ] [ { UNION | INTERSECT | EXCEPT } [ ALL | DISTINCT ] select ] [ ORDER BY expression [ ASC | DESC | USING operator ] [ NULLS { FIRST | LAST } ] [, ...] ] [ LIMIT { count | ALL } ] [ OFFSET start [ ROW | ROWS ] ] [ FETCH { FIRST | NEXT } [ count ] { ROW | ROWS } ONLY ] [ FOR { UPDATE | NO KEY UPDATE | SHARE | KEY SHARE } [ OF table_name [, ...] ] [ NOWAIT | SKIP LOCKED ] [...] ] where from_item can be one of: [ ONLY ] table_name [ * ] [ [ AS ] alias [ ( column_alias [, ...] ) ] ] [ TABLESAMPLE sampling_method ( argument [, ...] ) [ REPEATABLE ( seed ) ] ] [ LATERAL ] ( select ) [ AS ] alias [ ( column_alias [, ...] ) ] with_query_name [ [ AS ] alias [ ( column_alias [, ...] ) ] ] [ LATERAL ] function_name ( [ argument [, ...] ] ) [ WITH ORDINALITY ] [ [ AS ] alias [ ( column_alias [, ...] ) ] ] [ LATERAL ] function_name ( [ argument [, ...] ] ) [ AS ] alias ( column_definition [, ...] ) [ LATERAL ] function_name ( [ argument [, ...] ] ) AS ( column_definition [, ...] ) [ LATERAL ] ROWS FROM( function_name ( [ argument [, ...] ] ) [ AS ( column_definition [, ...] ) ] [, ...] ) [ WITH ORDINALITY ] [ [ AS ] alias [ ( column_alias [, ...] ) ] ] from_item [ NATURAL ] join_type from_item [ ON join_condition | USING ( join_column [, ...] ) ] and grouping_element can be one of: ( ) expression ( expression [, ...] ) ROLLUP ( { expression | ( expression [, ...] ) } [, ...] ) CUBE ( { expression | ( expression [, ...] ) } [, ...] ) GROUPING SETS ( grouping_element [, ...] ) and with_query is: with_query_name [ ( column_name [, ...] ) ] AS ( select | values | insert | update | delete ) TABLE [ ONLY ] table_name [ * ] DESCRIPTION SELECT retrieves rows from zero or more tables.
(5328) {848847} [850142]: SEE ALSO CREATE FUNCTION (CREATE_FUNCTION(7)), DROP FUNCTION (DROP_FUNCTION(7)) PostgreSQL 9.6.1 2016 ALTER FUNCTION(7) SELECT INTO(7) PostgreSQL 9.6.1 Documentation SELECT INTO(7) NAME SELECT_INTO - define a new table from the results of a query SYNOPSIS [ WITH [ RECURSIVE ] with_query [, ...] ] SELECT [ ALL | DISTINCT [ ON ( expression [, ...] ) ] ] * | expression [ [ AS ] output_name ] [, ...] INTO [ TEMPORARY | TEMP | UNLOGGED ] [ TABLE ] new_table [ FROM from_item [, ...] ] [ WHERE condition ] [ GROUP BY expression [, ...] ] [ HAVING condition [, ...] ] [ WINDOW window_name AS ( window_definition ) [, ...] ] [ { UNION | INTERSECT | EXCEPT } [ ALL | DISTINCT ] select ] [ ORDER BY expression [ ASC | DESC | USING operator ] [ NULLS { FIRST | LAST } ] [, ...] ] [ LIMIT { count | ALL } ] [ OFFSET start [ ROW | ROWS ] ] [ FETCH { FIRST | NEXT } [ count ] { ROW | ROWS } ONLY ] [ FOR { UPDATE | SHARE } [ OF table_name [, ...] ] [ NOWAIT ] [...] ] DESCRIPTION SELECT INTO creates a new table and fills it with data computed by a query.
*****************************************************************
========================= CLASS #580 =============================
(4212) {668773} [668892]: If the WHERE clause is specified, all rows that do not satisfy the condition are eliminated from the output.
(4368) {689781} [689844]: HAVING eliminates group rows that do not satisfy the condition.
*****************************************************************
========================= CLASS #581 =============================
(4279) {675741} [675892]: If an alias is written, a column alias list can also be written to provide substitute names for one or more columns of the table.
(4309) {679691} [679947]: If an alias is written, a column alias list can also be written to provide substitute names for one or more attributes of the function's composite return type, including the column added by ORDINALITY if present.
*****************************************************************
========================= CLASS #582 =============================
(4296) {678281} [678342]: select A sub-SELECT can appear in the FROM clause.
(4304) {679098} [679168]: function_name Function calls can appear in the FROM clause.
*****************************************************************
========================= CLASS #583 =============================
(4297) {678343} [678477]: This acts as though its output were created as a temporary table for the duration of this single SELECT command.
(4306) {679288} [679422]: This acts as though the function's output were created as a temporary table for the duration of this single SELECT command.
*****************************************************************
========================= CLASS #584 =============================
(4303) {679022} [679089]: An alias can be provided in the same way as for a table.
(4308) {679634} [679690]: An alias can be provided in the same way as for a table.
*****************************************************************
========================= CLASS #585 =============================
(4315) {680871} [681089]: When using the ROWS FROM( ... ) syntax, if one of the functions requires a column definition list, it's preferred to put the column definition list after the function call inside ROWS FROM( ... ).
(4317) {681281} [681461]: To use ORDINALITY together with a column definition list, you must use the ROWS FROM( ... ) syntax and put the column definition list inside ROWS FROM( ... ).
*****************************************************************
========================= CLASS #586 =============================
(4332) {683444} [683605]: Conversely, RIGHT OUTER JOIN returns all the joined rows, plus one row for each unmatched right-hand row (extended with nulls on the left).
(4334) {683767} [684008]: FULL OUTER JOIN returns all the joined rows, plus one row for each unmatched left-hand row (extended with nulls on the right), plus one row for each unmatched right-hand row (extended with nulls on the left).
*****************************************************************
========================= CLASS #587 =============================
(4353) {687071} [687295]: An expression used inside a grouping_element can be an input column name, or the name or ordinal number of an output column (SELECT list item), or an arbitrary expression formed from input-column values.
(4469) {705618} [705791]: Each expression can be the name or ordinal number of an output column (SELECT list item), or it can be an arbitrary expression formed from input-column values.
*****************************************************************
========================= CLASS #588 =============================
(4366) {689488} [689599]: Currently, FOR NO KEY UPDATE, FOR UPDATE, FOR SHARE and FOR KEY SHARE cannot be specified with GROUP BY.
(4375) {690773} [690882]: Currently, FOR NO KEY UPDATE, FOR UPDATE, FOR SHARE and FOR KEY SHARE cannot be specified with HAVING.
(4401) {695825} [695934]: Currently, FOR NO KEY UPDATE, FOR UPDATE, FOR SHARE and FOR KEY SHARE cannot be specified with WINDOW.
(4435) {700851} [700962]: Currently, FOR NO KEY UPDATE, FOR UPDATE, FOR SHARE and FOR KEY SHARE cannot be specified with DISTINCT.
(4447) {702411} [702569]: Currently, FOR NO KEY UPDATE, FOR UPDATE, FOR SHARE and FOR KEY SHARE cannot be specified either for a UNION result or for any input of a UNION.
(4457) {703727} [703895]: Currently, FOR NO KEY UPDATE, FOR UPDATE, FOR SHARE and FOR KEY SHARE cannot be specified either for an INTERSECT result or for any input of an INTERSECT.
(4465) {704899} [705061]: Currently, FOR NO KEY UPDATE, FOR UPDATE, FOR SHARE and FOR KEY SHARE cannot be specified either for an EXCEPT result or for any input of an EXCEPT.
*****************************************************************
========================= CLASS #589 =============================
(4379) {691876} [692099]: The elements of the PARTITION BY list are interpreted in much the same fashion as elements of a GROUP BY Clause, except that they are always simple expressions and never the name or number of an output column.
(4382) {692350} [692608]: Similarly, the elements of the ORDER BY list are interpreted in much the same fashion as elements of an ORDER BY Clause, except that the expressions are always taken as simple expressions and never the name or number of an output column.
*****************************************************************
========================= CLASS #590 =============================
(4436) {700967} [701248]: UNION Clause The UNION clause has this general form: select_statement UNION [ ALL | DISTINCT ] select_statement select_statement is any SELECT statement without an ORDER BY, LIMIT, FOR NO KEY UPDATE, FOR UPDATE, FOR SHARE, or FOR KEY SHARE clause.
(4448) {702574} [702867]: INTERSECT Clause The INTERSECT clause has this general form: select_statement INTERSECT [ ALL | DISTINCT ] select_statement select_statement is any SELECT statement without an ORDER BY, LIMIT, FOR NO KEY UPDATE, FOR UPDATE, FOR SHARE, or FOR KEY SHARE clause.
(4458) {703900} [704184]: EXCEPT Clause The EXCEPT clause has this general form: select_statement EXCEPT [ ALL | DISTINCT ] select_statement select_statement is any SELECT statement without an ORDER BY, LIMIT, FOR NO KEY UPDATE, FOR UPDATE, FOR SHARE, or FOR KEY SHARE clause.
*****************************************************************
========================= CLASS #591 =============================
(4439) {701501} [701605]: The UNION operator computes the set union of the rows returned by the involved SELECT statements.
(4449) {702876} [702991]: The INTERSECT operator computes the set intersection of the rows returned by the involved SELECT statements.
*****************************************************************
========================= CLASS #592 =============================
(4440) {701606} [701707]: A row is in the set union of two result sets if it appears in at least one of the result sets.
(4450) {702992} [703081]: A row is in the intersection of two result sets if it appears in both result sets.
*****************************************************************
========================= CLASS #593 =============================
(4442) {701912} [702010]: The result of UNION does not contain any duplicate rows unless the ALL option is specified.
(4451) {703090} [703192]: The result of INTERSECT does not contain any duplicate rows unless the ALL option is specified.
(4460) {704345} [704444]: The result of EXCEPT does not contain any duplicate rows unless the ALL option is specified.
*****************************************************************
========================= CLASS #594 =============================
(4445) {702157} [702261]: DISTINCT can be written to explicitly specify the default behavior of eliminating duplicate rows.
(4453) {703346} [703450]: DISTINCT can be written to explicitly specify the default behavior of eliminating duplicate rows.
(4462) {704600} [704704]: DISTINCT can be written to explicitly specify the default behavior of eliminating duplicate rows.
*****************************************************************
========================= CLASS #595 =============================
(4446) {702270} [702402]: Multiple UNION operators in the same SELECT statement are evaluated left to right, unless otherwise indicated by parentheses.
(4454) {703459} [703590]: Multiple INTERSECT operators in the same SELECT statement are evaluated left to right, unless parentheses dictate otherwise.
(4463) {704713} [704841]: Multiple EXCEPT operators in the same SELECT statement are evaluated left to right, unless parentheses dictate otherwise.
*****************************************************************
========================= CLASS #596 =============================
(4452) {703193} [703344]: With ALL, a row that has m duplicates in the left table and n duplicates in the right table will appear min(m,n) times in the result set.
(4461) {704445} [704598]: With ALL, a row that has m duplicates in the left table and n duplicates in the right table will appear max(m-n,0) times in the result set.
*****************************************************************
========================= CLASS #597 =============================
(4523) {713814} [713919]: Similarly, a table is processed as NOWAIT if that is specified in any of the clauses affecting it.
(4524) {713920} [714025]: Otherwise, it is processed as SKIP LOCKED if that is specified in any of the clauses affecting it.
*****************************************************************
========================= CLASS #598 =============================
(4546) {718019} [720192]: EXAMPLES To join the table films with the table distributors: SELECT f.title, f.did, d.name, f.date_prod, f.kind FROM distributors d, films f WHERE f.did = d.did title | did | name | date_prod | kind -------------------+-----+--------------+------------+---------- The Third Man | 101 | British Lion | 1949-12-23 | Drama The African Queen | 101 | British Lion | 1951-08-11 | Romantic ... To sum the column len of all films and group the results by kind: SELECT kind, sum(len) AS total FROM films GROUP BY kind; kind | total ----------+------- Action | 07:34 Comedy | 02:58 Drama | 14:28 Musical | 06:42 Romantic | 04:38 To sum the column len of all films, group the results by kind and show those group totals that are less than 5 hours: SELECT kind, sum(len) AS total FROM films GROUP BY kind HAVING sum(len) &amp;lt; interval '5 hours'; kind | total ----------+------- Comedy | 02:58 Romantic | 04:38 The following two examples are identical ways of sorting the individual results according to the contents of the second column (name): SELECT * FROM distributors ORDER BY name; SELECT * FROM distributors ORDER BY 2; did | name -----+------------------ 109 | 20th Century Fox 110 | Bavaria Atelier 101 | British Lion 107 | Columbia 102 | Jean Luc Godard 113 | Luso films 104 | Mosfilm 103 | Paramount 106 | Toho 105 | United Artists 111 | Walt Disney 112 | Warner Bros. 108 | Westward The next example shows how to obtain the union of the tables distributors and actors, restricting the results to those that begin with the letter W in each table.
(4548) {720275} [720645]: distributors: actors: did | name id | name -----+-------------- ----+---------------- 108 | Westward 1 | Woody Allen 111 | Walt Disney 2 | Warren Beatty 112 | Warner Bros. 3 | Walter Matthau ... ...
*****************************************************************
========================= CLASS #599 =============================
(4602) {730368} [730451]: Nonstandard Clauses DISTINCT ON ( ... ) is an extension of the SQL standard.
(4603) {730460} [730513]: ROWS FROM( ... ) is an extension of the SQL standard.
*****************************************************************
========================= CLASS #600 =============================
(4691) {743648} [743777]: Temporary sequences exist in a special schema, so a schema name cannot be given when creating a temporary sequence.
(4747) {752787} [752908]: Temporary views exist in a special schema, so a schema name cannot be given when creating a temporary view.
(5014) {799150} [799273]: Temporary tables exist in a special schema, so a schema name cannot be given when creating a temporary table.
*****************************************************************
========================= CLASS #601 =============================
(4699) {744771} [744978]: Existing permanent sequences with the same name are not visible (in this session) while the temporary sequence exists, unless they are referenced with schema-qualified names.
(4751) {753249} [753446]: Existing permanent relations with the same name are not visible to the current session while the temporary view exists, unless they are referenced with schema-qualified names.
(5027) {800833} [801028]: Existing permanent tables with the same name are not visible to the current session while the temporary table exists, unless they are referenced with schema-qualified names.
*****************************************************************
========================= CLASS #602 =============================
(4707) {745858} [745956]: If this clause is not supplied or NO MINVALUE is specified, then defaults will be used.
(4710) {746196} [746300]: If this clause is not supplied or NO MAXVALUE is specified, then default values will be used.
*****************************************************************
========================= CLASS #603 =============================
(4839) {768037} [768243]: REPEATABLE READ All statements of the current transaction can only see rows committed before the first query or data-modification statement was executed in this transaction.
(4840) {768252} [768455]: SERIALIZABLE All statements of the current transaction can only see rows committed before the first query or data-modification statement was executed in this transaction.
*****************************************************************
========================= CLASS #604 =============================
(4844) {768910} [769111]: The transaction isolation level cannot be changed after the first query or data-modification statement (SELECT, INSERT, DELETE, UPDATE, FETCH, or COPY) of a transaction has been executed.
(4857) {770963} [771183]: SET TRANSACTION SNAPSHOT can only be executed at the start of a transaction, before the first query or data-modification statement (SELECT, INSERT, DELETE, UPDATE, FETCH, or COPY) of the transaction.
*****************************************************************
========================= CLASS #605 =============================
(4995) {793310} [793420]: lc_collate Use the specified operating system locale for the LC_COLLATE locale category.
(4998) {793581} [793687]: lc_ctype Use the specified operating system locale for the LC_CTYPE locale category.
*****************************************************************
========================= CLASS #606 =============================
(4996) {793421} [793495]: The locale must be applicable to the current database encoding.
(4999) {793688} [793762]: The locale must be applicable to the current database encoding.
*****************************************************************
========================= CLASS #607 =============================
(4997) {793496} [793572]: (See CREATE DATABASE (CREATE_DATABASE(7)) for the precise rules.)
(5000) {793763} [793839]: (See CREATE DATABASE (CREATE_DATABASE(7)) for the precise rules.)
*****************************************************************
========================= CLASS #608 =============================
(5070) {806603} [806723]: Default expressions for the copied column definitions will be copied only if INCLUDING DEFAULTS is specified.
(5074) {807132} [807230]: CHECK constraints will be copied only if INCLUDING CONSTRAINTS is specified.
(5079) {807749} [807865]: STORAGE settings for the copied column definitions will be copied only if INCLUDING STORAGE is specified.
*****************************************************************
========================= CLASS #609 =============================
(5071) {806724} [806872]: The default behavior is to exclude default expressions, resulting in the copied columns in the new table having null defaults.
(5080) {807866} [808028]: The default behavior is to exclude STORAGE settings, resulting in the copied columns in the new table having type-specific default settings.
(5083) {808256} [808407]: The default behavior is to exclude comments, resulting in the copied columns and constraints in the new table having no comments.
*****************************************************************
========================= CLASS #610 =============================
(5115) {812292} [812486]: Each unique table constraint must name a set of columns that is different from the set of columns named by any other unique or primary key constraint defined for the table.
(5119) {812955} [813133]: The primary key constraint should name a set of columns that is different from the set of columns named by any unique constraint defined for the same table.
*****************************************************************
========================= CLASS #611 =============================
(5128) {814861} [815033]: Each exclude_element can optionally specify an operator class and/or ordering options; these are described fully under CREATE INDEX (CREATE_INDEX(7)).
(5193) {824243} [824330]: Storage parameters for indexes are documented in CREATE INDEX (CREATE_INDEX(7)).
*****************************************************************
========================= CLASS #612 =============================
(5129) {815046} [815233]: The access method must support amgettuple (see Chapter 59, Index Access Method Interface Definition, in the documentation); at present this means GIN cannot be used.
(5622) {895125} [895266]: The index access method API is described in Chapter 59, Index Access Method Interface Definition, in the documentation.
*****************************************************************
========================= CLASS #613 =============================
(5140) {816972} [817209]: MATCH FULL will not allow one column of a multicolumn foreign key to be null unless all foreign key columns are null; if they are all null, the row is not required to have a match in the referenced table.
(5141) {817211} [817396]: MATCH SIMPLE allows any of the foreign key columns to be null; if any of them are null, the row is not required to have a match in the referenced table.
*****************************************************************
========================= CLASS #614 =============================
(5143) {817436} [817572]: (Of course, NOT NULL constraints can be applied to the referencing column(s) to prevent these cases from arising.)
(5155) {819188} [819250]: SET NULL Set the referencing column(s) to null.
(5156) {819263} [819344]: SET DEFAULT Set the referencing column(s) to their default values.
*****************************************************************
========================= CLASS #615 =============================
(5149) {818289} [818514]: There are the following possible actions for each clause: NO ACTION Produce an error indicating that the deletion or update would create a foreign key constraint violation.
(5152) {818727} [818870]: RESTRICT Produce an error indicating that the deletion or update would create a foreign key constraint violation.
*****************************************************************
========================= CLASS #616 =============================
(5203) {825589} [825635]: This parameter cannot be set for TOAST tables.
(5232) {830055} [830112]: This parameter cannot be set for TOAST tables.
*****************************************************************
========================= CLASS #617 =============================
(5213) {827022} [827171]: autovacuum_vacuum_threshold, toast.autovacuum_vacuum_threshold (integer) Per-table value for autovacuum_vacuum_threshold parameter.
(5215) {827346} [827455]: autovacuum_analyze_threshold (integer) Per-table value for autovacuum_analyze_threshold parameter.
*****************************************************************
========================= CLASS #618 =============================
(5214) {827180} [827337]: autovacuum_vacuum_scale_factor, toast.autovacuum_vacuum_scale_factor (float4) Per-table value for autovacuum_vacuum_scale_factor parameter.
(5216) {827464} [827578]: autovacuum_analyze_scale_factor (float4) Per-table value for autovacuum_analyze_scale_factor parameter.
*****************************************************************
========================= CLASS #619 =============================
(5220) {828042} [828231]: Note that autovacuum will ignore per-table autovacuum_freeze_min_age parameters that are larger than half the system-wide autovacuum_freeze_max_age setting.
(5225) {828897} [829106]: Note that autovacuum will ignore per-table autovacuum_multixact_freeze_min_age parameters that are larger than half the system-wide autovacuum_multixact_freeze_max_age setting.
*****************************************************************
========================= CLASS #620 =============================
(5222) {828377} [828564]: Note that autovacuum will ignore per-table autovacuum_freeze_max_age parameters that are larger than the system-wide setting (it can only be set smaller).
(5227) {829300} [829486]: Note that autovacuum will ignore per-table autovacuum_multixact_freeze_max_age parameters that are larger than the system-wide setting (it can only be set smaller).
*****************************************************************
========================= CLASS #621 =============================
(5244) {831608} [832395]: EXAMPLES Create table films and table distributors: CREATE TABLE films ( code char(5) CONSTRAINT firstkey PRIMARY KEY, title varchar(40) NOT NULL, did integer NOT NULL, date_prod date, kind varchar(10), len interval hour to minute ); CREATE TABLE distributors ( did integer PRIMARY KEY DEFAULT nextval('serial'), name varchar(40) NOT NULL CHECK (name &amp;lt;&amp;gt; '') ); Create a table with a 2-dimensional array: CREATE TABLE array_int ( vector int[][] ); Define a unique table constraint for the table films.
(5245) {832396} [833729]: Unique table constraints can be defined on one or more columns of the table: CREATE TABLE films ( code char(5), title varchar(40), did integer, date_prod date, kind varchar(10), len interval hour to minute, CONSTRAINT production UNIQUE(date_prod) ); Define a check column constraint: CREATE TABLE distributors ( did integer CHECK (did &amp;gt; 100), name varchar(40) ); Define a check table constraint: CREATE TABLE distributors ( did integer, name varchar(40) CONSTRAINT con1 CHECK (did &amp;gt; 100 AND name &amp;lt;&amp;gt; '') ); Define a primary key table constraint for the table films: CREATE TABLE films ( code char(5), title varchar(40), did integer, date_prod date, kind varchar(10), len interval hour to minute, CONSTRAINT code_title PRIMARY KEY(code,title) ); Define a primary key constraint for table distributors.
*****************************************************************
========================= CLASS #622 =============================
(5401) {862841} [862907]: If it is not supplied then the state value starts out null.
(5486) {874498} [874559]: If not specified, the state value starts out null.
*****************************************************************
========================= CLASS #623 =============================
(5452) {869636} [869738]: sfunc The name of the state transition function to be called for each input row.
(5487) {874568} [874704]: msfunc The name of the forward state transition function to be called for each input row in moving-aggregate mode.
(5489) {874919} [875036]: minvfunc The name of the inverse state transition function to be used in moving-aggregate mode.
*****************************************************************
========================= CLASS #624 =============================
(5458) {870418} [870491]: state_data_type The data type for the aggregate's state value.
(5492) {875365} [875484]: mstate_data_type The data type for the aggregate's state value, when using moving-aggregate mode.
(5498) {876231} [876346]: minitial_condition The initial setting for the state value, when using moving-aggregate mode.
*****************************************************************
========================= CLASS #625 =============================
(5459) {870500} [870609]: state_data_size The approximate average size (in bytes) of the aggregate's state value.
(5493) {875493} [875637]: mstate_data_size The approximate average size (in bytes) of the aggregate's state value, when using moving-aggregate mode.
*****************************************************************
========================= CLASS #626 =============================
(5463) {871062} [871203]: ffunc The name of the final function called to compute the aggregate's result after all input rows have been traversed.
(5495) {875697} [875884]: mffunc The name of the final function called to compute the aggregate's result after all input rows have been traversed, when using moving-aggregate mode.
*****************************************************************
========================= CLASS #627 =============================
(5494) {875638} [875688]: This works the same as state_data_size.
(5499) {876347} [876388]: This works the same as initial_condition.
*****************************************************************
========================= CLASS #628 =============================
(5509) {877747} [877855]: The parameters of CREATE AGGREGATE can be written in any order, not just the order illustrated above.
(5657) {899714} [899807]: Optional parameters can be written in any order, not only the order illustrated above.
*****************************************************************
========================= CLASS #629 =============================
(5599) {891770} [891914]: At present, this parameter can be shown but not set, because the encoding is determined at database creation time.
(5601) {892035} [892163]: At present, this parameter can be shown but not set, because the setting is determined at database creation time.
(5603) {892281} [892424]: At present, this parameter can be shown but not set, because the setting is determined at database creation time.
*****************************************************************
========================= CLASS #630 =============================
(5600) {891927} [892034]: LC_COLLATE Shows the database's locale setting for collation (text ordering).
(5602) {892176} [892280]: LC_CTYPE Shows the database's locale setting for character classification.
*****************************************************************
========================= CLASS #631 =============================
(5638) {898042} [898080]: See below for additional restrictions.
(5643) {898402} [898451]: See below for additional restrictions.
(5648) {898730} [898768]: See below for additional restrictions.
*****************************************************************
========================= CLASS #632 =============================
(5639) {898089} [898167]: lc_collate Collation order (LC_COLLATE) to use in the new database.
(5644) {898460} [898543]: lc_ctype Character classification (LC_CTYPE) to use in the new database.
*****************************************************************
========================= CLASS #633 =============================
(5642) {898323} [898401]: The default is to use the collation order of the template database.
(5647) {898642} [898729]: The default is to use the character classification of the template database.
*****************************************************************
