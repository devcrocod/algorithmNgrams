========================= CLASS #1 =============================
(20) {2463} [2516]: Class names may only contain alphanumeric characters.
(47) {6234} [6317]: Variables Variable names may only contain alphanumeric characters.
*****************************************************************
========================= CLASS #2 =============================
(21) {2519} [2592]: Numbers are permitted in class names but are discouraged.
(34) {4613} [4673]: Numbers are permitted in function names but are discouraged.
(49) {6365} [6425]: Numbers are permitted in variable names but are discouraged.
*****************************************************************
========================= CLASS #3 =============================
(23) {2818} [2940]: If a class name is comprised of more than one word, the first letter of each new word must be capitalized.
(36) {4762} [4885]: When a function name consists of more than one word, the first letter of each new word must be capitalized.
*****************************************************************
========================= CLASS #4 =============================
(33) {4566} [4596]: Underscores are not permitted.
(48) {6318} [6348]: Underscores are not permitted.
*****************************************************************
========================= CLASS #5 =============================
(38) {4990} [5014]: Verbosity is encouraged.
(54) {7078} [7102]: Verbosity is encouraged.
*****************************************************************
========================= CLASS #6 =============================
(42) {5640} [5831]: For methods on objects that are declared with the &quot;private&quot; or &quot;protected&quot; construct, the first character of the variable name must be a single underscore.
(50) {6456} [6651]: For class member variables that are declared with the &quot;private&quot; or &quot;protected&quot; construct, the first character of the variable name must be a single underscore.
*****************************************************************
========================= CLASS #7 =============================
(43) {5832} [5916]: This is the only acceptable usage of an underscore in a method name.
(51) {6652} [6738]: This is the only acceptable usage of an underscore in a variable name.
*****************************************************************
========================= CLASS #8 =============================
(44) {5917} [6004]: Methods declared &quot;public&quot; may never start with an underscore.
(52) {6739} [6835]: Member variables declared &quot;public&quot; may never start with an underscore.
*****************************************************************
========================= CLASS #9 =============================
(75) {11211} [11311]: The brace is always written on the line underneath the class name (&quot;one true brace&quot; form).
(88) {13015} [13152]: Like classes, the brace is always written on the line underneath the function name (&quot;one true brace&quot; form).
*****************************************************************
========================= CLASS #10 =============================
(84) {12294} [12450]: Member variables always declare their visibility by using one of the private , protected , or public constructs.
(87) {12809} [12976]: Methods inside classes must always declare their visibility by using one of the private , protected , or public constructs.
*****************************************************************
========================= CLASS #11 =============================
(91) {13417} [13665]: This is an example of an acceptable function declaration in a class: NOTE: Pass-by-reference is permitted in the function declaration only: Call-time pass-by-reference is prohibited.
(95) {14060} [14258]: This is an example of an acceptable function call for a function that takes three arguments: Call-time pass-by-reference is prohibited.
*****************************************************************
========================= CLASS #12 =============================
(113) {17254} [17605]: For more information, visit: http://phpdoc.org/ All source code files written for Zend Framework or that operate with the framework must contain a &quot;file-level&quot; docblock at the top of each file and a &quot;class-level&quot; docblock immediately above each class.
(1357) {254171} [254200]: For more information, read .
*****************************************************************
========================= CLASS #13 =============================
(115) {17661} [18497]: Files Every file that contains PHP code must have a header block at the top of the file that contains these phpDocumentor tags at a minimum: Classes Every class must have a docblock that contains these phpDocumentor tags at a minimum: Functions Every function, including object methods, must have a docblock that contains at a minimum: A description of the function All of the arguments All of the possible return values It is not necessary to use the &quot;@access&quot; tag because the access level is already known from the &quot;public&quot;, &quot;private&quot;, or &quot;protected&quot; construct used to declare the function.
(4682) {829235} [829371]: Access sets the visibility of items to be returned, as &quot;all&quot;, &quot;public&quot;, or &quot;private&quot;.
(4683) {829373} [829424]: The default is &quot;all&quot;.
(4694) {830337} [830372]: The default is &quot;default&quot;.
*****************************************************************
========================= CLASS #14 =============================
(124) {19723} [19855]: If you anticipate working with the latest Zend Framework developments, consider using a Subversion (SVN) client.
(125) {19894} [19928]: Using a Subversion (SVN) client.
*****************************************************************
========================= CLASS #15 =============================
(148) {23173} [23268]: This can help guide you to know which extensions are required for your application.
(153) {27869} [27964]: This can help guide you to know which extensions are required for your application.
*****************************************************************
========================= CLASS #16 =============================
(149) {23281} [23370]: Not all extensions used by Zend Framework are required for every application.
(154) {27977} [28066]: Not all extensions used by Zend Framework are required for every application.
*****************************************************************
========================= CLASS #17 =============================
(165) {38347} [38650]: In order to use the rule assertion interface, a developer writes a class that implements the assert() method of the interface: Once an assertion class is available, the developer must supply an instance of the assertion class when assigning conditional rules.
(7603) {1284600} [1284626]: In order to use the Yahoo!
*****************************************************************
========================= CLASS #18 =============================
(174) {40253} [40517]: For the example CMS, it has been determined that whilst the &#39;staff&#39; group covers the needs of the vast majority of users, there is a need for a new &#39;marketing&#39; group that requires access to the newsletter and latest news in the CMS.
(379) {79419} [79430]: the &#39; .
*****************************************************************
========================= CLASS #19 =============================
(179) {41065} [41459]: We have determined that the &#39;marketing&#39; group has the same basic permissions as &#39;staff&#39;, so we define &#39;marketing&#39; in such a way that it inherits permissions from &#39;staff&#39;: Next, note that the above access controls refer to specific Resources (e.g., &quot;newsletter&quot;, &quot;latest news&quot;, &quot;announcement news&quot;).
(5686) {999585} [999603]: &quot;3.14&quot;).
(6585) {1126535} [1126553]: &quot;arg1&quot;).
*****************************************************************
========================= CLASS #20 =============================
(189) {43259} [43368]: Zend_Acl provides Zend_Acl_Resource_Interface to facilitate developers&#39; creating Resources.
(200) {45147} [45248]: Zend_Acl provides Zend_Acl_Role_Interface to facilitate developers&#39; creating Roles.
*****************************************************************
========================= CLASS #21 =============================
(190) {43369} [43553]: A class need only implement this interface, which consists of a single method, getResourceId() , in order for Zend_Acl to consider the object to be a Resource.
(201) {45249} [45425]: A class need only implement this interface, which consists of a single method, getRoleId() , in order for Zend_Acl to consider the object to be a Role.
*****************************************************************
========================= CLASS #22 =============================
(191) {43554} [43702]: Additionally, Zend_Acl_Resource is included with Zend_Acl as a basic Resource implementation for developers to extend where desirable.
(202) {45426} [45566]: Additionally, Zend_Acl_Role is included with Zend_Acl as a basic Role implementation for developers to extend where desirable.
*****************************************************************
========================= CLASS #23 =============================
(240) {53047} [53217]: This means that using the new operator and the clone keyword will not work with the Zend_Auth class; use Zend_Auth::getInstance() instead.
(2256) {415017} [415037]: Use get() instead.
*****************************************************************
========================= CLASS #24 =============================
(246) {54022} [54092]: Each adapter class must be prepared prior to calling authenticate() .
(951) {180158} [180173]: addContexts() .
*****************************************************************
========================= CLASS #25 =============================
(256) {56269} [56311]: For more information, see the notes below.
(322) {71419} [71435]: See notes below.
*****************************************************************
========================= CLASS #26 =============================
(279) {62312} [62430]: identityColumn : This is the name of the database table column used to represent the identity.
(281) {62538} [62660]: credentialColumn : This is the name of the database table column used to represent the credential.
*****************************************************************
========================= CLASS #27 =============================
(299) {66374} [66665]: Digest Authentication Introduction Digest authentication is a method of HTTP authentication that improves upon Basic authentication by providing a way to authenticate without having to transmit the password in clear text across the network.
(304) {68403} [68620]: Digest authentication is a method of HTTP authentication that improves upon Basic authentication by providing a way to authenticate without having to transmit the password in clear text across the network.
*****************************************************************
========================= CLASS #28 =============================
(319) {70945} [71141]: digest_domains Yes, when &#39;accept_schemes&#39; contains &#39;digest&#39; Space-separated list of URIs for which the same authentication information is valid.
(321) {71251} [71418]: nonce_timeout Yes, when &#39;accept_schemes&#39; contains &#39;digest&#39; Sets the number of seconds for which the nonce is valid.
*****************************************************************
========================= CLASS #29 =============================
(393) {82015} [82039]: This option is required.
(415) {85089} [85113]: This option is required.
*****************************************************************
========================= CLASS #30 =============================
(396) {82219} [82495]: If useSsl is false , the default port value is 389. useSsl If true , this value indicates that the LDAP client should use SSL / TLS encrypted transport.
(5189) {919816} [919924]: useSsl Whether or not the LDAP client should use SSL / TLS encrypted transport.
*****************************************************************
========================= CLASS #31 =============================
(397) {82496} [82640]: A value of true is strongly favored in production environments to prevent passwords from be transmitted in clear text.
(5190) {919925} [920101]: A value of true is strongly favored in production environments to prevent passwords from be transmitted in clear text.
*****************************************************************
========================= CLASS #32 =============================
(398) {82641} [82787]: The default value is false , as servers frequently require that a certificate be installed separately after installation.
(408) {84320} [84373]: The default value is false .
(1923) {350158} [350183]: The default value is 2 .
(3730) {653217} [653268]: The default value is PHP_EOL .
(5191) {920102} [920252]: The default value is false , as servers frequently require that a certificate be installed separately after installation.
(5196) {920751} [920808]: The default value is false .
*****************************************************************
========================= CLASS #33 =============================
(400) {82938} [83029]: username The DN of the account used to perform account DN lookups.
(404) {83554} [83651]: password The password of the account used to perform account DN lookups.
*****************************************************************
========================= CLASS #34 =============================
(419) {85625} [85815]: accountCanonicalForm A value of 2, 3 or 4 indicating the form to which account names should be canonicalized after successful authentication.
(5199) {921133} [921266]: accountCanonicalForm A small integer indicating the form to which account names should be canonicalized.
*****************************************************************
========================= CLASS #35 =============================
(420) {85816} [86050]: Values are as follows: 2 for traditional username style names (e.g., alice ), 3 for backslash-style names (e.g., FOO\alice ) or 4 for principal style usernames (e.g., alice@foo.net ).
(421) {86051} [86122]: The default value is 4 (e.g., alice@foo.net ).
*****************************************************************
========================= CLASS #36 =============================
(423) {86548} [86689]: See the Account Name Canonicalization section in the Zend_Ldap documentation for details.
(5200) {921267} [921349]: See the Account Name Canonicalization section below.
*****************************************************************
========================= CLASS #37 =============================
(425) {87275} [87434]: accountDomainName The FQDN domain name for which the target LDAP server is an authority (e.g., example.com ).
(5201) {921375} [921507]: accountDomainName The FQDN domain for which the target LDAP server is an authority (e.g., example.com).
*****************************************************************
========================= CLASS #38 =============================
(428) {87907} [88062]: This option is not required, but if it is not supplied, usernames in principal name form (e.g., alice@foo.net ) are not supported.
(433) {88875} [89044]: This option is not required but if it is not supplied, usernames in backslash form (e.g., FOO\alice ) are not supported.
*****************************************************************
========================= CLASS #39 =============================
(430) {88265} [88427]: accountDomainNameShort The &#39;short&#39; domain for which the target LDAP server is an authority (e.g., FOO ).
(5202) {921533} [921661]: accountDomainNameShort The &#39;short&#39; domain for which the target LDAP server is an authority.
*****************************************************************
========================= CLASS #40 =============================
(432) {88571} [88874]: This option should be used to specify the NetBIOS domain name for Windows networks but may also be used by non-AD servers (e.g., for consistency when multiple sets of server options with the backslash style accountCanonicalForm ).
(5203) {921662} [921834]: This is usually used to specify the NetBIOS domain name for Windows networks but may also be used by non-AD servers.
*****************************************************************
========================= CLASS #41 =============================
(434) {89066} [89162]: accountFilterFormat The LDAP search filter used to search for accounts.
(5204) {921860} [921960]: accountFilterFormat The LDAP search filter used to search for accounts.
*****************************************************************
========================= CLASS #42 =============================
(435) {89163} [89320]: This string is a printf() -style expression that must contain one &#39; %s &#39; to accomodate the username.
(5205) {921961} [922126]: This string is a printf() style expression that must contain one &#39; %s &#39; to accomodate the username.
*****************************************************************
========================= CLASS #43 =============================
(436) {89321} [89597]: The default value is &#39; (&amp;(objectClass=user)(sAMAccountName=%s)) &#39;, unless bindRequiresDn is set to true , in which case the default is &#39; (&amp;(objectClass=posixAccount)(uid=%s)) &#39;.
(1502) {281910} [281988]: Default value is &#39;Zend_Controller_Plugin_ActionStack&#39;.
(5127) {907453} [907504]: Default value is &#39;content&#39;.
(5206) {922127} [922414]: The default value is &#39; (&amp;(objectClass=user)(sAMAccountName=%s)) &#39; unless bindRequiresDn is set to true , in which case the default is &#39; (&amp;(objectClass=posixAccount)(uid=%s)) &#39;.
*****************************************************************
========================= CLASS #44 =============================
(442) {90643} [90701]: If the authentication is successful, this string is empty.
(444) {90914} [90996]: If the authentication is successful, this string is empty.
*****************************************************************
========================= CLASS #45 =============================
(447) {91462} [91739]: Common Options for Specific Servers Options for Active Directory For ADS, the following options are noteworthy: Options for Active Directory Name Additional Notes host As with all servers, this option is required.
(449) {91957} [92038]: baseDn As with all servers, this option is required.
(460) {94092} [94405]: Options for OpenLDAP For OpenLDAP or a generic LDAP server using a typical posixAccount style schema, the following options are noteworthy: Options for OpenLDAP Name Additional Notes host As with all servers, this option is required.
*****************************************************************
========================= CLASS #46 =============================
(448) {91765} [91931]: useSsl For the sake of security, this should be true if the server has the necessary certificate installed.
(461) {94431} [94597]: useSsl For the sake of security, this should be true if the server has the necessary certificate installed.
*****************************************************************
========================= CLASS #47 =============================
(462) {94623} [94789]: username Required and must be a DN, as OpenLDAP requires that usernames be in DN form when performing a bind.
(465) {95088} [95262]: bindRequiresDn Required and must be true , as OpenLDAP requires that usernames be in DN form when performing a bind.
*****************************************************************
========================= CLASS #48 =============================
(478) {97648} [97733]: Zend_OpenId takes advantage of the GMP extension , where available.
(6275) {1085007} [1085092]: Zend_OpenId takes advantage of the GMP extension , where available.
*****************************************************************
========================= CLASS #49 =============================
(479) {97734} [97847]: Consider enabling the GMP extension for better performance when using Zend_Auth_Adapter_OpenId .
(6276) {1085093} [1085193]: Consider enabling the GMP extension for better performance when using Zend_OpenId .
*****************************************************************
========================= CLASS #50 =============================
(503) {102168} [103058]: hashed_directory_umask int 0700 Umask for the hashed directory structure file_name_prefix string &#39;zend_cache&#39; prefix for cache files ; be really carefull with this option because a too generic value in a system cache dir (like /tmp) can cause disasters when cleaning the cache cache_file_umask int 0700 umask for cache files metatadatas_array_max_size int 100 internal max size for the metadatas array (don&#39;t change this value unless you know what you are doing) Zend_Cache_Backend_Sqlite This backends stores cache records into a SQLite database.
(506) {103903} [104004]: Zend_Cache_Backend_Memcached This backends stores cache records into a memcached server.
*****************************************************************
========================= CLASS #51 =============================
(509) {104212} [104362]: Be careful : with this backend, &quot;tags&quot; are not supported for the moment as the &quot;doNotTestCacheValidity=true&quot; argument.
(511) {105332} [105482]: Be careful : with this backend, &quot;tags&quot; are not supported for the moment as the &quot;doNotTestCacheValidity=true&quot; argument.
*****************************************************************
========================= CLASS #52 =============================
(516) {105872} [106162]: Specify this backend using a word separator -- &#39;-&#39;, &#39;.&#39;, &#39; &#39;, or &#39;_&#39; -- between the words &#39;Zend&#39; and &#39;Platform&#39; when using the Zend_Cache::factory() method: There is no options for this backend.
(841) {161605} [161842]: Since controller and action names may contain word delimiter characters such as &#39;_&#39;, &#39;.&#39;, and &#39;-&#39;, render() normalizes these to &#39;-&#39; when determining the script name.
(1014) {188874} [189245]: On the client end, your AJAX library will simply request the endpoints &#39;/comment/view&#39;, &#39;/comment/form&#39;, and &#39;/comment/process&#39;, and pass the &#39;format&#39; parameter: &#39;/comment/view/format/html&#39;, &#39;/comment/form/format/html&#39;, &#39;/comment/process/format/json&#39;.
(1127) {208854} [209063]: Keys for this array may include any of the path specification keys (&#39;moduleDir&#39;, &#39;module&#39;, &#39;controller&#39;, &#39;action&#39;, and &#39;suffix&#39;).
(1468) {276407} [276582]: The above example contains three module controllers, &#39;Blog_IndexController&#39;, &#39;News_IndexController&#39;, and &#39;News_ListController&#39;.
(1514) {283848} [284068]: setErrorHandler() takes an associative array, which may contain any of the keys &#39;module&#39;, &#39;controller&#39;, or &#39;action&#39;, with which it will set the appropriate values.
(1682) {313565} [313665]: Each array element is an array with the keys &#39;name&#39; and &#39;value&#39;.
(1807) {334424} [334565]: There are three special variables which can be used in your routes - &#39;module&#39;, &#39;controller&#39; and &#39;action&#39;.
(2620) {471798} [471950]: The argument can be an associative array containing any or all of the keys &#39; enabled &#39;, &#39; instance &#39;, and &#39; class &#39;.
(2621) {471951} [472079]: The &#39; enabled &#39; and &#39; instance &#39; keys correspond to the boolean and instance types documented above.
(2625) {472293} [472394]: The &#39; class &#39; option is ignored when the &#39; instance &#39; option is supplied.
(2899) {514234} [514422]: In the example PHP code above, the rule keys in the Bugs table class are: &#39;Reporter&#39; , &#39;Engineer&#39; , &#39;Verifier&#39; , and &#39;Product&#39; .
(2927) {518096} [518146]: This is the rule &#39;Reporter&#39; .
(2949) {521748} [521786]: This is the rule &#39;Reporter&#39; .
(2974) {525800} [525895]: In this case, $rule1 is &#39;Reporter&#39; and $rule2 is &#39;Product&#39; .
(3442) {604308} [604543]: For example, assuming the two rule names &#39;moduleDir&#39; and &#39;module&#39;, the &#39;moduleDir&#39; rule should appear before module since &#39;module&#39; is contained within &#39;moduleDir&#39;.
(3443) {604545} [604762]: If &#39;module&#39; were added before &#39;moduleDir&#39;, &#39;module&#39; will match part of &#39;moduleDir&#39; and process it leaving &#39;Dir&#39; inside of the target uninflected.
(3759) {658384} [658534]: The following loader types are used with the various plugin loader methods: &#39;validate&#39;, &#39;filter&#39;, and &#39;decorator&#39;.
(3892) {686360} [686490]: The following loader types are used with the various plugin loader methods: &#39;element&#39; and &#39;decorator&#39;.
(6063) {1054038} [1054080]: Memory container &#39;value&#39; property.
(6886) {1166954} [1167103]: The field &#39;name&#39; is taken from &#39;name&#39; attribute, and the &#39;content&#39; attribute populates the field &#39;value&#39;.
(6947) {1176392} [1176569]: download&#39; and match &#39;zend platform download&#39;, &#39;zend studio download&#39;, &#39;zend core download&#39;, &#39;zend framework download&#39;, and so on.
(6954) {1177269} [1177446]: download&#39; and match &#39;zend platform download&#39;, &#39;zend studio download&#39;, &#39;zend core download&#39;, &#39;zend framework download&#39;, and so on.
(8165) {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
(8262) {1380193} [1380335]: There are three supported tokens which can be used: A point &#39;.&#39;, a underline &#39;_&#39;, or a hyphen &#39;-&#39;.
(8266) {1380587} [1380724]: The first one is the point &#39;.&#39;, the second is the underline &#39;_&#39; and the third the hyphen &#39;-&#39;.
(8709) {1449161} [1449296]: You may also pass an associative array with the keys &#39;checked&#39; and &#39;unChecked&#39;.
*****************************************************************
========================= CLASS #53 =============================
(526) {109053} [109394]: ignore_user_abort boolean false if set to true, the core will set the ignore_user_abort PHP flag inside the save() method to avoid cache corruptions in some cases Examples An example is given in the manual at the very beginning.
(530) {110148} [110230]: Examples An example is given in the manual at the very beginning.
*****************************************************************
========================= CLASS #54 =============================
(538) {113001} [113095]: It&#39;s really interesting for examples in configuration or templates issues.
(6980) {1180579} [1180608]: It&#39;s the default setting.
*****************************************************************
========================= CLASS #55 =============================
(557) {118176} [118352]: When specifying them to the factory, separate them using a word separator, such as a space (&#39; &#39;), hyphen (&#39;-&#39;), or period (&#39;.&#39;).
(922) {176062} [176082]: [your suffix]&#39;).
*****************************************************************
========================= CLASS #56 =============================
(579) {121219} [121375]: &#39;Cache hit&#39; is a term for a condition when a cache record is found, is valid and is &#39;fresh&#39; (in other words hasn&#39;t expired yet).
(580) {121376} [121416]: &#39;Cache miss&#39; is everything else.
*****************************************************************
========================= CLASS #57 =============================
(588) {122413} [122965]: Then you will be able to clean all cache records tagged with a given tag (or tags): note than the save() method accepts an optional fourth argument : $specificLifetime (if != false, it sets a specific lifetime for this particular cache record) Cleaning the cache To remove/invalidate in particular cache id, you can use the remove() method : To remove/invalidate several cache ids in one operation, you can use the clean() method.
(2091) {384665} [384721]: Therefor you can use the now() method.
*****************************************************************
========================= CLASS #58 =============================
(632) {129628} [129807]: For example: Using Zend_Config_Ini This example illustrates a basic use of Zend_Config_Ini for loading configuration data from an INI file.
(652) {132273} [132426]: Using Zend_Config_Xml This example illustrates a basic use of Zend_Config_Xml for loading configuration data from an XML file.
*****************************************************************
========================= CLASS #59 =============================
(633) {129808} [129919]: In this example there are configuration data for both a production system and for a staging system.
(653) {132427} [132538]: In this example there are configuration data for both a production system and for a staging system.
*****************************************************************
========================= CLASS #60 =============================
(634) {129920} [130077]: Because the staging system configuration data are very similar to those for production, the staging section inherits from the production section.
(654) {132539} [132696]: Because the staging system configuration data are very similar to those for production, the staging section inherits from the production section.
*****************************************************************
========================= CLASS #61 =============================
(635) {130078} [130307]: In this case, the decision is arbitrary and could have been written conversely, with the production section inheriting from the staging section, though this may not be the case for more complex situations.
(655) {132697} [132926]: In this case, the decision is arbitrary and could have been written conversely, with the production section inheriting from the staging section, though this may not be the case for more complex situations.
*****************************************************************
========================= CLASS #62 =============================
(636) {130308} [130534]: Suppose, then, that the following configuration data are contained in /path/to/config.ini : Next, assume that the application developer needs the staging configuration data from the INI file.
(656) {132927} [133153]: Suppose, then, that the following configuration data are contained in /path/to/config.xml : Next, assume that the application developer needs the staging configuration data from the XML file.
*****************************************************************
========================= CLASS #63 =============================
(666) {134853} [134978]: The setHelp() method is the only way to define help strings if you declared the options using the short syntax.
(675) {135885} [136008]: The setAliases() method is the only way to define aliases if you declared the options using the short syntax.
*****************************************************************
========================= CLASS #64 =============================
(673) {135561} [135763]: Using setAliases() In the example above, after declaring these aliases, &quot; -a &quot;, &quot; --apple &quot; and &quot; --apfel &quot; are aliases for each other.
(674) {135776} [135862]: Also &quot; -p &quot; and &quot; --pear &quot; are aliases for each other.
(800) {152937} [153054]: &quot; --apple &quot; and &quot; -a &quot; are aliases for each other, and the option takes no parameter.
(801) {153067} [153202]: &quot; --banana &quot; and &quot; -b &quot; are aliases for each other, and the option takes a mandatory integer parameter.
(802) {153215} [153359]: Finally, &quot; --pear &quot; and &quot; -p &quot; are aliases for each other, and the option may take an optional string parameter.
*****************************************************************
========================= CLASS #65 =============================
(676) {136018} [136192]: Adding Argument Lists By default, Zend_Console_Getopt uses $_SERVER[&#39;argv&#39;] for the array of command-line arguments to parse.
(782) {150087} [150131]: This defaults to $_SERVER[&#39;argv&#39;] .
*****************************************************************
========================= CLASS #66 =============================
(688) {138191} [138256]: This configuration option is true by default.
(691) {138589} [138635]: This configuration option is false by default.
(3863) {678099} [678129]: This flag is false by default.
(3867) {678516} [678545]: This flag is true by default.
*****************************************************************
========================= CLASS #67 =============================
(699) {139688} [139797]: Using setOption() The argument to the setOptions() method is an associative array.
(3557) {622776} [622831]: The data structure is an associative array.
*****************************************************************
========================= CLASS #68 =============================
(702) {139996} [140127]: The configuration values you specify are merged with the current configuration; you don&#39;t have to list all options.
(8230) {1375972} [1376043]: So you don&#39;t have to declare each source file manually.
*****************************************************************
========================= CLASS #69 =============================
(729) {143445} [143485]: As an array: use the toArray() method.
(8609) {1434451} [1434517]: Object implementing toArray() method .
*****************************************************************
========================= CLASS #70 =============================
(731) {143692} [143752]: As a string containing JSON data: use the toJson() method.
(732) {143791} [143849]: As a string containing XML data: use the toXml() method.
*****************************************************************
========================= CLASS #71 =============================
(738) {144578} [144668]: This method returns an array of the strings that were not part of any options.
(7887) {1332614} [1332687]: This method returns an array of the contents of $namespace .
*****************************************************************
========================= CLASS #72 =============================
(793) {151377} [151485]: Declaring Options with the Long Syntax A different syntax with more features is also available.
(5754) {1009705} [1009734]: A shortcut is also available.
*****************************************************************
========================= CLASS #73 =============================
(840) {161344} [161570]: Finally, templates are rendered into the response object; if you wish to render to a specific named segment in the response object, pass a value to $name .
(1701) {316593} [316600]: $name .
*****************************************************************
========================= CLASS #74 =============================
(850) {163238} [163388]: You may set this option globally within the controller using the setRedirectExit() accessor.
(852) {163633} [163790]: You may set this option globally within the controller using the setRedirectPrependBase() accessor.
(855) {164055} [164205]: You may set this option globally within the controller using the setRedirectCode() accessor.
*****************************************************************
========================= CLASS #75 =============================
(862) {165355} [165574]: If the method requested ends in &#39;Action&#39;, the assumption is that an action was requested and does not exist; such errors result in an exception with a code of 404.
(863) {165575} [165651]: All other methods result in an exception with a code of 500.
*****************************************************************
========================= CLASS #76 =============================
(881) {169277} [169352]: Typically, this is called within prepareAutoCompletion() .
(882) {169327} [169352]: prepareAutoCompletion() .
*****************************************************************
========================= CLASS #77 =============================
(887) {169934} [170119]: In both cases, they require a data store that implements the QueryReadStore; for more information on these topics, see the dojo.data documentation.
(2867) {510408} [510466]: See for more information on these modes.
(3232) {567959} [568025]: See for more information on table relationships.
*****************************************************************
========================= CLASS #78 =============================
(920) {175699} [175922]: Instead of creating a different action, we can hint that it can return an XML response: What this will do is: Set the &#39;Content-Type&#39; response header to &#39;text/xml&#39;.
(929) {177258} [177445]: The JSON context sets the &#39;Content-Type&#39; response header to &#39;application/json&#39;, and the view script suffix to &#39;json.phtml&#39;.
(933) {177900} [178077]: The XML context sets the &#39;Content-Type&#39; response header to &#39;text/xml&#39;, and the view script suffix to &#39;xml.phtml&#39;.
(1026) {191015} [191093]: Sets the &#39;Content-Type&#39; response header to &#39;application/json&#39;.
*****************************************************************
========================= CLASS #79 =============================
(949) {179977} [180060]: $contexts array should be an array of context/specification pairs.
(956) {180513} [180577]: Returns an array of context/specification pairs.
*****************************************************************
========================= CLASS #80 =============================
(953) {180294} [180371]: getContext($context) : retrieve a single context by name.
(957) {180591} [180665]: removeContext($context) : remove a single context by name.
*****************************************************************
========================= CLASS #81 =============================
(955) {180474} [180512]: getContexts() : retrieve all contexts.
(3733) {653486} [653522]: getOptions() : retrieve all options.
*****************************************************************
========================= CLASS #82 =============================
(959) {180759} [180797]: clearContexts() : remove all contexts.
(3735) {653594} [653630]: clearOptions() : remove all options.
*****************************************************************
========================= CLASS #83 =============================
(964) {181323} [181560]: As an example, consider the following controller class: Let&#39;s say we wanted to add an XML context to the &#39;list&#39; action, and XML and JSON contexts to the &#39;comments&#39; action.
(8687) {1445632} [1445686]: Let&#39;s say we want a helper named &#39;fooBar&#39;.
*****************************************************************
========================= CLASS #84 =============================
(966) {181823} [181976]: The following methods can be used to build the context mappings: $context may be a single context, or an array of contexts.
(969) {182282} [182361]: $context may be a single context, or an array of contexts.
(973) {182712} [182790]: $context may be a single context or an array of contexts.
*****************************************************************
========================= CLASS #85 =============================
(990) {185485} [185573]: getCallbacks($context) : retrieve all callbacks for a given context.
(992) {185655} [185743]: clearCallbacks($context) : remove all callbacks for a given context.
*****************************************************************
========================= CLASS #86 =============================
(995) {186052} [186133]: getContextParam() can be used to retrieve the current value.
(5957) {1039421} [1039464]: to overwrite the current value.
*****************************************************************
========================= CLASS #87 =============================
(1034) {192593} [192694]: setGoto() can be used to set a default URL to use if none is passed to goto() .
(1037) {193179} [193286]: setGotoUrl() can be used to set a default URL to use if none is passed to gotoUrl() .
*****************************************************************
========================= CLASS #88 =============================
(1047) {195158} [195278]: Using goto()&#39;s _forward() API goto() &#39;s API mimics that of Zend_Controller_Action::_forward() .
(1436) {270260} [270345]: Zend_Controller_Action::_forward() &#39;s arguments have changed.
*****************************************************************
========================= CLASS #89 =============================
(1067) {199750} [199871]: postDispatch() will not automatically call render() in the current controller.
(1069) {199958} [200059]: postDispatch() will not automatically call render() in the current controller.
*****************************************************************
========================= CLASS #90 =============================
(1068) {199874} [199940]: getNeverRender() retrieves the current value.
(1071) {200308} [200351]: getNoRender() retrieves the current value.
(1073) {200533} [200600]: getNoController() retrieves the current value.
(1075) {200765} [200835]: getNeverController() retrieves the current value.
(1079) {201289} [201356]: getScriptAction() retrieves the current value.
(1082) {201592} [201662]: getResponseSegment() retrieves the current value.
*****************************************************************
========================= CLASS #91 =============================
(1095) {203777} [203902]: You may retrieve the current specification at any time using getViewBasePathSpec() .
(1099) {204225} [204352]: You may retrieve the current specification at any time using getViewScriptPathSpec() .
(1103) {204729} [204868]: You may retrieve the current specification at any time using getViewScriptPathNoControllerSpec() .
*****************************************************************
========================= CLASS #92 =============================
(1096) {203920} [204124]: setViewScriptPathSpec($spec) allows you to change the path specification used to determine the path to an individual view script (minus the base view script path).
(1100) {204370} [204659]: setViewScriptPathNoControllerSpec($spec) allows you to change the path specification used to determine the path to an individual view script when noController is in effect (minus the base view script path).
*****************************************************************
========================= CLASS #93 =============================
(1097) {204145} [204215]: The default specification is :controller/:action.
(1101) {204661} [204719]: The default specification is :action.
*****************************************************************
========================= CLASS #94 =============================
(1098) {204215} [204224]: :suffix .
(1102) {204719} [204728]: :suffix .
*****************************************************************
========================= CLASS #95 =============================
(1114) {206337} [206417]: : &quot;FooBarBaz&quot; becomes &quot;foo-bar-baz&quot;.
(1117) {206878} [207019]: Examples: &quot;FooBar&quot; becomes &quot;foo-bar&quot;; &quot;FooBar_Admin&quot; becomes &quot;foo-bar/admin&quot;.
(1120) {207546} [207683]: Examples: &quot;fooBar&quot; becomes &quot;foo-bar&quot;; &quot;foo-barBaz&quot; becomes &quot;foo-bar-baz&quot;.
*****************************************************************
========================= CLASS #96 =============================
(1115) {206464} [206622]: Internally, the inflector uses the filters Zend_Filter_Word_CamelCaseToDash and Zend_Filter_StringToLower .
(1118) {207066} [207291]: Internally, the inflector uses the filters Zend_Filter_Word_CamelCaseToDash , Zend_Filter_Word_UnderscoreToSeparator , and Zend_Filter_StringToLower .
(1121) {207730} [207940]: Internally, the inflector uses the filters Zend_Filter_Word_CamelCaseToDash , Zend_Filter_PregReplace , and Zend_Filter_StringToLower .
*****************************************************************
========================= CLASS #97 =============================
(1116) {206644} [206853]: :controller : MixedCase and camelCasedWords are separated by dashes; underscores are converted to directory separators, and the entire string cast to lower case.
(1119) {207313} [207521]: :action : MixedCase and camelCasedWords are separated by dashes; non-alphanumeric characters are translated to dashes, and the entire string cast to lower case.
*****************************************************************
========================= CLASS #98 =============================
(1125) {208639} [208824]: By default, Zend_Controller_Action::renderScript() proxies to the ViewRenderer &#39;s renderScript() method.
(1132) {209889} [210076]: By default, Zend_Controller_Action::getViewScript() proxies to the ViewRenderer &#39;s getViewScript() method.
(1138) {210919} [211092]: By default, Zend_Controller_Action::render() proxies to the ViewRenderer &#39;s render() method.
*****************************************************************
========================= CLASS #99 =============================
(1216) {226441} [226592]: Routing occurs only once: when the request is initially received and before the first controller is dispatched.
(1785) {330737} [330860]: Routing occurs only once: when the request is initially received and before the first controller is dispatched.
*****************************************************************
========================= CLASS #100 =============================
(1219) {227227} [227398]: Zend_Controller_Router_Rewrite can also be used to match arbitrary paths; see the router documentation for more information.
(2258) {415282} [415373]: See for more information.
(2891) {513462} [513505]: See for more information.
(2914) {516438} [516485]: See for more information.
(2916) {516639} [516686]: See for more information.
(3579) {626203} [626246]: See for more information.
(7711) {1299424} [1299471]: See for more information.
*****************************************************************
========================= CLASS #101 =============================
(1335) {250581} [250789]: (set|get)DefaultControllerName() let you specify a different name to use for the default controller (&#39;index&#39; is used otherwise) and retrieve the current value.
(1337) {250883} [251083]: (set|get)DefaultActionName() let you specify a different name to use for the default action (&#39;index&#39; is used otherwise) and retrieve the current value.
*****************************************************************
========================= CLASS #102 =============================
(1336) {250810} [250865]: They proxy to the dispatcher .
(1338) {251085} [251160]: They proxy to the dispatcher .
*****************************************************************
========================= CLASS #103 =============================
(1339) {251178} [251354]: (set|get)Request() let you specify the request class or object to use during the dispatch process and to retrieve the current object.
(1341) {251553} [251727]: (set|get)Router() let you specify the router class or object to use during the dispatch process and to retrieve the current object.
(1346) {252406} [252589]: (set|get)Dispatcher() let you specify the dispatcher class or object to use during the dispatch process and retrieve the current object.
(1349) {253022} [253200]: (set|get)Response() let you specify the response class or object to use during the dispatch process and to retrieve the current object.
*****************************************************************
========================= CLASS #104 =============================
(1340) {251355} [251535]: When setting the request object, you may pass in a request class name, in which case the method will load the class file and instantiate it.
(1342) {251728} [251906]: When setting the router object, you may pass in a router class name, in which case the method will load the class file and instantiate it.
(1347) {252590} [252796]: When setting the dispatcher object, you may pass in a dispatcher class name, in which case the method will load the class file and instantiate it.
(1350) {253201} [253383]: When setting the response object, you may pass in a response class name, in which case the method will load the class file and instantiate it.
*****************************************************************
========================= CLASS #105 =============================
(1343) {251945} [252123]: When retrieving the router object, it first checks to see if one is present, and if not, instantiates the default router (rewrite router).
(1348) {252835} [253004]: When retrieving the dispatcher object, it first checks to see if one is present, and if not, instantiates the default dispatcher.
*****************************************************************
========================= CLASS #106 =============================
(1370) {256648} [256672]: By default, this is off.
(5136) {908483} [908581]: By default, this is Zend_Layout_Controller_Action_Helper_Layout .
(5139) {908817} [908892]: By default, this is Zend_Layout_Controller_Plugin_Layout .
*****************************************************************
========================= CLASS #107 =============================
(1375) {257233} [257274]: Set this parameter to true to disable it.
(1377) {257379} [257440]: Set this parameter to true to disable it.
*****************************************************************
========================= CLASS #108 =============================
(1378) {257458} [257989]: Subclassing the Front Controller To subclass the Front Controller, at the very minimum you will need to override the getInstance() method: Overriding the getInstance() method ensures that subsequent calls to Zend_Controller_Front::getInstance() will return an instance of your new subclass instead of a Zend_Controller_Front instance -- this is particularly useful for some of the alternate routers and view helpers.
(8836) {1471346} [1471423]: This will return an instance of Zend_XmlRpc_Client_ServerProxy .
*****************************************************************
========================= CLASS #109 =============================
(1425) {267972} [268058]: Migrating from 0.9.2 to 0.9.3 or newer 0.9.3 introduces action helpers .
(5075) {898772} [898794]: Custom action helpers.
*****************************************************************
========================= CLASS #110 =============================
(1426) {268071} [268334]: As part of this change, the following methods have been removed as they are now encapsulated in the redirector action helper : setRedirectCode() ; use Zend_Controller_Action_Helper_Redirector::setCode() .
(1427) {268352} [268464]: setRedirectPrependBase() ; use Zend_Controller_Action_Helper_Redirector::setPrependBase() .
(1428) {268482} [268580]: setRedirectExit() ; use Zend_Controller_Action_Helper_Redirector::setExit() .
*****************************************************************
========================= CLASS #111 =============================
(1449) {272276} [272741]: You can override this in several ways: Set throwExceptions() in the front controller: Set renderExceptions() in the response object: Zend_Controller_Dispatcher_Interface::dispatch() now accepts and returns a object instead of a dispatcher token.
(1450) {272755} [272895]: Zend_Controller_Router_Interface::route() now accepts and returns a object instead of a dispatcher token.
(1465) {275842} [275949]: All methods now accept and return a object instead of a dispatcher token.
*****************************************************************
========================= CLASS #112 =============================
(1511) {283476} [283659]: You may set alternate values for these by using the various accessors available to the plugin: setErrorHandlerModule() sets the controller module to use.
(1512) {283673} [283745]: setErrorHandlerController() sets the controller to use.
(1513) {283759} [283834]: setErrorHandlerAction() sets the controller action to use.
*****************************************************************
========================= CLASS #113 =============================
(1536) {288017} [288137]: preDispatch() is called before an action is dispatched by the dispatcher .
(1539) {288459} [288579]: postDispatch() is called after an action is dispatched by the dispatcher .
*****************************************************************
========================= CLASS #114 =============================
(1537) {288138} [288208]: This callback allows for proxy or filter behavior.
(1540) {288580} [288650]: This callback allows for proxy or filter behavior.
*****************************************************************
========================= CLASS #115 =============================
(1538) {288209} [288441]: By altering the request and resetting its dispatched flag (via Zend_Controller_Request_Abstract::setDispatched(false) ), the current action may be skipped and/or replaced.
(1541) {288651} [288879]: By altering the request and resetting its dispatched flag (via Zend_Controller_Request_Abstract::setDispatched(false) ), a new action may be specified for dispatching.
*****************************************************************
========================= CLASS #116 =============================
(1621) {302202} [302364]: For example, the raw value of $_POST[&#39;user&#39;] can be accessed by calling getPost(&#39;user&#39;) on the request object.
(4317) {765374} [765449]: This link can be accessed by calling getLink(&#39;next&#39;) .
*****************************************************************
========================= CLASS #117 =============================
(1681) {313498} [313544]: getHeaders() returns an array of all headers.
(2630) {473286} [473365]: getQueryProfiles() returns an array of all query profiles.
*****************************************************************
========================= CLASS #118 =============================
(1697) {316169} [316239]: $name and place it at the beginning of the array.
(1699) {316384} [316448]: $name and place it at the end of the array.
*****************************************************************
========================= CLASS #119 =============================
(1698) {316240} [316366]: If the segment exists already, it will be removed prior to the operation (i.e., overwritten and replaced).
(1700) {316449} [316575]: If the segment exists already, it will be removed prior to the operation (i.e., overwritten and replaced).
(1703) {316814} [316960]: If the segment exists already, it will be removed prior to the operation (i.e., overwritten and replaced).
*****************************************************************
========================= CLASS #120 =============================
(1713) {318239} [318392]: hasExceptionOfMessage($message) allows you to determine if an exception with a specific message is in the stack.
(1714) {318410} [318554]: hasExceptionOfCode($code) allows you to determine if an exception with a specific code is in the stack.
*****************************************************************
========================= CLASS #121 =============================
(1716) {318713} [318810]: It will return false if none are found, and an array of exceptions otherwise.
(1718) {318979} [319076]: It will return false if none are found, and an array of exceptions otherwise.
(1720) {319236} [319333]: It will return false if none are found, and an array of exceptions otherwise.
*****************************************************************
========================= CLASS #122 =============================
(1717) {318828} [318958]: getExceptionByMessage($message) allows you to retrieve all exceptions with a specific message from the stack.
(1719) {319094} [319215]: getExceptionByCode($code) allows you to retrieve all exceptions with a specific code from the stack.
*****************************************************************
========================= CLASS #123 =============================
(1851) {341749} [341903]: The following options has been integrated: position : Replacement for the old &#39;rules&#39; parameter.
(1852) {341925} [342009]: script : Replacement for the old &#39;script&#39; parameter.
(1854) {342222} [342306]: display : Replacement for the old &#39;rules&#39; parameter.
(1856) {342400} [342481]: name : Replacement for the ole &#39;rules&#39; parameter.
*****************************************************************
========================= CLASS #124 =============================
(1855) {342328} [342378]: precision : New parameter.
(1858) {342558} [342607]: currency : New parameter.
(1859) {342629} [342676]: symbol : New parameter.
*****************************************************************
========================= CLASS #125 =============================
(1908) {348527} [348662]: For example is in english the &#39;,&#39; sign used as seperator for thousands, and in german the &#39;.&#39; sign.
(5708) {1002037} [1002157]: German for example defines &#39;,&#39; as precission seperation and in english the &#39;.&#39; sign is used.
*****************************************************************
========================= CLASS #126 =============================
(1912) {349051} [349123]: The supported position can be found in this table .
(1916) {349422} [349493]: All supported scripts can be found in this table .
*****************************************************************
========================= CLASS #127 =============================
(1924) {350201} [350285]: name : Defines the full currency name which has to be displayed.
(1926) {350418} [350514]: currency : Defines the international abbreviation which has to be displayed.
(1928) {350646} [350729]: symbol : Defines the currency symbol which has to be displayed.
*****************************************************************
========================= CLASS #128 =============================
(1925) {350286} [350400]: This option overwrites any currency name which is set through the creation of Zend_Currency .
(1927) {350515} [350628]: This option overwrites any abbreviation which is set through the creation of Zend_Currency .
(1929) {350730} [350837]: This option overwrites any symbol which is set through the creation of Zend_Currency .
*****************************************************************
========================= CLASS #129 =============================
(1931) {351656} [351822]: The supported methods are: getSymbol() : Returns the known sign of the actual currency or a given currency.
(1933) {351946} [352069]: getShortName() : Returns the abbreviation of the actual currency or a given currency.
*****************************************************************
========================= CLASS #130 =============================
(1932) {351823} [351928]: For example $ for the US Dollar within the locale &#39; en_US .
(1934) {352071} [352178]: For example USD for the US Dollar within the locale &#39; en_US .
(1936) {352312} [352425]: For example US Dollar for the US Dollar within the locale &#39; en_US .
*****************************************************************
========================= CLASS #131 =============================
(1939) {352752} [352886]: getCurrencyList() : Returns a list of currencies which are known to be used in the given region.
(5425) {960411} [960563]: Use Zend_Currency for simplicity CurrencyToRegion Returns a list of currencies which are known to be used within a region.
*****************************************************************
========================= CLASS #132 =============================
(2043) {366600} [369152]: Day Constants Constant Description Date Affected part/example Zend_Date::DAY Day (as a number, two digit) 2009-02-06T14:53:27+01:00 2009-02- 06 T14:53:27+01:00 (06) Zend_Date::DAY_SHORT Day (as a number, one or two digit) 2009-02-06T14:53:27+01:00 2009-02-0 6 T14:53:27+01:00 (6) Zend_Date::WEEKDAY Weekday (Name of the day, localized, complete) 2009-02-06T14:53:27+01:00 Friday Zend_Date::WEEKDAY_SHORT Weekday (Name of the day, localized, abbreviated, the first three digits) 2009-02-06T14:53:27+01:00 Fre for Friday Zend_Date::WEEKDAY_NAME Weekday (Name of the day, localized, abbreviated, the first two digits) 2009-02-06T14:53:27+01:00 Fr for Friday Zend_Date::WEEKDAY_NARROW Weekday (Name of the day, localized, abbreviated, only the first digit) 2009-02-06T14:53:27+01:00 F for Friday Zend_Date::WEEKDAY_DIGIT Weekday (0 = Sunday, 6 = Saturday) 2009-02-06T14:53:27+01:00 5 for Friday Zend_Date::WEEKDAY_8601 Weekday according to ISO 8601 (1 = Monday, 7 = Sunday) 2009-02-06T14:53:27+01:00 5 for Friday Zend_Date::DAY_OF_YEAR Day (as a number, one or two digit) 2009-02-06T14:53:27+01:00 43 Zend_Date::DAY_SUFFIX English addendum for the day (st, nd, rd, th) 2009-02-06T14:53:27+01:00 th Week Constants Constant Description Date Affected part/example Zend_Date::WEEK Week (as a number, 1-53) 2009-02-06T14:53:27+01:00 7 Month Constants Constant Description Date Affected part/example Zend_Date::MONTH_NAME Month (Name of the month, localized, complete) 2009-02-06T14:53:27+01:00 February Zend_Date::MONTH_NAME_SHORT Month (Name of the month, localized, abbreviated, three digit) 2009-02-06T14:53:27+01:00 Feb Zend_Date::MONTH_NAME_NARROW Month (Name of the month, localized, abbreviated, one digit) 2009-02-06T14:53:27+01:00 F Zend_Date::MONTH Month (Number of the month, two digit) 2009-02-06T14:53:27+01:00 2009- 02 -06T14:53:27+01:00 (02) Zend_Date::MONTH_SHORT Month (Number of the month, one or two digit) 2009-02-06T14:53:27+01:00 2009-0 2 -06T14:53:27+01:00 (2) Zend_Date::MONTH_DAYS Number of days for this month (number) 2009-02-06T14:53:27+01:00 28 Year Constants Constant Description Date Affected part/example Zend_Date::YEAR Year (number) 2009-02-06T14:53:27+01:00 2009 -02-06T14:53:27+01:00 Zend_Date::YEAR_8601 Year according to ISO 8601 (number) 2009-02-06T14:53:27+01:00 2009 Zend_Date::YEAR_SHORT Year (number, two digit) 2009-02-06T14:53:27+01:00 20 09 -02-06T14:53:27+01:00 Zend_Date::YEAR_SHORT_8601 Year according to ISO 8601 (number, two digit) 2009-02-06T14:53:27+01:00 09 Zend_Date::LEAPYEAR Is the year a leap year?
(2246) {410396} [410420]: Is the year a leap year?
*****************************************************************
========================= CLASS #133 =============================
(2053) {374341} [374466]: The following examples illustrate the usage of constants from the table below to create self-defined ISO formats.
(2078) {380276} [380397]: The following examples illustrate the usage of constants from the table below to create self-defined formats.
*****************************************************************
========================= CLASS #134 =============================
(2074) {379599} [379864]: Self-defined OUTPUT formats using PHP&#39;s date() format specifiers If you are more comfortable with PHP&#39;s date format specifier than with ISO format specifiers, then you can use the PHP&#39;s date() format specifiers .
(2148) {393418} [393569]: If you are more comfortable with PHP&#39;s date format specifier than with ISO format specifiers, then you can use $format parameter.
*****************************************************************
========================= CLASS #135 =============================
(2081) {381006} [382418]: Constants for PHP date output Constant Description Corresponds best to closest CLDR equivalent Affected part/example d Day of the month, two digit Zend_Date::DAY dd 09 D Day of the week, localized, abbreviated, three digit Zend_Date::WEEKDAY_SHORT EEE Mon j Day of the month, one or two digit Zend_Date::DAY_SHORT d 9 l (lowercase L) Day of the week, localized, complete Zend_Date::WEEKDAY EEEE Monday N Number of the weekday, one digit Zend_Date::WEEKDAY_8601 e 4 S English suffixes for day of month, two chars no equivalent no equivalent st w Number of the weekday, 0=sunday, 6=saturday Zend_Date::WEEKDAY_DIGIT no equivalent 4 z Day of the year, one, two or three digit Zend_Date::DAY_OF_YEAR D 7 W Week, one or two digit Zend_Date::WEEK w 5 F Month, localized, complete Zend_Date::MONTH_NAME MMMM February m Month, two digit Zend_Date::MONTH MM 02 M Month, localized, abbreviated Zend_Date::MONTH_NAME_SHORT MMM Feb n Month, one or two digit Zend_Date::MONTH_SHORT M 2 t Number of days per month, one or two digits Zend_Date::MONTH_DAYS no equivalent 30 L Leapyear, boolean Zend_Date::LEAPYEAR no equivalent true o Year according to ISO 8601, at least four digit Zend_Date::YEAR_8601 YYYY 2009 Y Year, at least four digit Zend_Date::YEAR yyyy 2009 y Year, at least two digit Zend_Date::YEAR_SHORT yy 09 a Time of day, localized Zend_Date::MERIDIEM a (sort of, but likely to be uppercase) vorm.
(2082) {382419} [382528]: A Time of day, localized Zend_Date::MERIDIEM a (sort of, but no guarantee that the format is uppercase) VORM.
*****************************************************************
========================= CLASS #136 =============================
(2138) {391407} [391681]: &quot;The size of a float is platform-dependent, although a maximum of ~1.8e308 with a precision of roughly 14 decimal digits is a common value (that&#39;s 64 bit IEEE format).&quot; [ http://www.php.net/float ].
(5619) {988883} [988900]: currency format).
*****************************************************************
========================= CLASS #137 =============================
(2145) {392540} [392740]: When date strings conform to &quot;Y/m/d&quot; or &quot;Y-m-d H:i:s&quot;, according to PHP date() format tokens, use Zend_Date&#39;s built-in support for ISO 8601 formatted dates.
(2230) {405641} [405677]: Zend_Date&#39;s results are correct.
*****************************************************************
========================= CLASS #138 =============================
(2162) {396197} [396414]: For ZF developers, the desired behavior is selectable using the extend_month option to choose either the SQL behaviour, if set to false, or the spreadsheet behaviour when set to true.
(4981) {881394} [881411]: Defaults to true.
*****************************************************************
========================= CLASS #139 =============================
(2173) {397969} [398026]: To examine an object&#39;s timezone use getTimeZone()) .
(2174) {398027} [398096]: To change an object&#39;s timezone, use setTimeZone()) .
*****************************************************************
========================= CLASS #140 =============================
(2216) {403770} [403895]: Day Zend_Date::DAY_SHORT is extracted from $date if the $date operand is an instance of Zend_Date or a numeric string.
(2223) {404708} [404834]: Zend_Date::WEEKDAY_DIGIT is extracted from $date , if the $date operand is an instance of Zend_Date or a numeric string.
*****************************************************************
========================= CLASS #141 =============================
(2217) {403897} [404262]: Otherwise, an attempt is made to extract the day according to the conventions documented for these constants: Zend_Date::WEEKDAY_NARROW , Zend_Date::WEEKDAY_NAME , Zend_Date::WEEKDAY_SHORT , Zend_Date::WEEKDAY (Gregorian calendar assumed) Week Zend_Date::WEEK is extracted from $date if the $date operand is an instance of Zend_Date or a numeric string.
(2219) {404297} [404433]: (Gregorian calendar assumed) Date Zend_Date::DAY_MEDIUM is extracted from $date if the $date operand is an instance of Zend_Date .
(2224) {404836} [405209]: Otherwise, an attempt is made to extract the day according to the conventions documented for these constants: Zend_Date::WEEKDAY_NARROW , Zend_Date::WEEKDAY_NAME , Zend_Date::WEEKDAY_SHORT , Zend_Date::WEEKDAY (Gregorian calendar assumed) DayOfYear In Zend_Date , the day of the year represents the number of calendar days elapsed since the start of the year (0-365).
*****************************************************************
========================= CLASS #142 =============================
(2233) {406083} [406369]: Basic Operations Basic Operation Explanation get() get($part = null, $locale = null) Use get($part) to retrieve the date $part of this object&#39;s date localized to $locale as a formatted string or integer.
(2257) {415067} [415281]: get() get($part = null, $locale = null) This method returns the $part of object&#39;s date localized to $locale as a formatted string or integer.
*****************************************************************
========================= CLASS #143 =============================
(2236) {406817} [407106]: set() set($date, $part = null, $locale = null) Sets the $part of the current object to the corresponding value for that part found in the input $date having a locale $locale .
(2237) {407140} [407347]: add() add($date, $part = null, $locale = null) Adds the $part of $date having a locale $locale to the current object&#39;s date.
(2238) {407381} [407595]: sub() sub($date, $part = null, $locale = null) Subtracts the $part of $date having a locale $locale from the current object&#39;s date.
*****************************************************************
========================= CLASS #144 =============================
(2242) {408520} [409585]: Date Comparison Methods Method Explanation equals() equals($date, $part = null, $locale = null) returns true, if $part of $date having locale $locale is the same as this object&#39;s date $part , otherwise false isEarlier() isEarlier($date, $part = null, $locale = null) returns true, if $part of this object&#39;s date is earlier than $part of $date having a locale $locale isLater() isLater($date, $part = null, $locale = null) returns true, if $part of this object&#39;s date is later than $part of $date having a locale $locale isToday() isToday() Tests if today&#39;s year, month, and day match this object&#39;s date value, using this object&#39;s timezone.
(2243) {409615} [409820]: isTomorrow() isTomorrow() Tests if tomorrow&#39;s year, month, and day match this object&#39;s date value, using this object&#39;s timezone.
(2244) {409850} [410058]: isYesterday() isYesterday() Tests if yesterday&#39;s year, month, and day match this object&#39;s date value, using this object&#39;s timezone.
*****************************************************************
========================= CLASS #145 =============================
(2301) {423878} [423904]: This argument is optional.
(2816) {503550} [503582]: The single argument is optional.
*****************************************************************
========================= CLASS #146 =============================
(2306) {424522} [424652]: username : account identifier for authenticating a connection to the RDBMS server.
(2307) {424674} [424813]: password : account password credential for authenticating a connection to the RDBMS server.
*****************************************************************
========================= CLASS #147 =============================
(2316) {426135} [426291]: Passing the case-folding option to the factory You can specify this option by the constant Zend_Db::CASE_FOLDING .
(2319) {426682} [426848]: Passing the auto-quoting option to the factory You can specify this option by the constant Zend_Db::AUTO_QUOTE_IDENTIFIERS .
*****************************************************************
========================= CLASS #148 =============================
(2354) {432302} [432473]: The modes supported are identified by constants: Zend_Db::FETCH_ASSOC : return data in an array of associative arrays.
(2364) {433672} [433751]: Zend_Db::FETCH_NUM : return data in an array of arrays.
(2366) {433945} [434025]: Zend_Db::FETCH_BOTH : return data in an array of arrays.
(2369) {434412} [434494]: Zend_Db::FETCH_COLUMN : return data in an array of values.
(2372) {434696} [434776]: Zend_Db::FETCH_OBJ : return data in an array of objects.
*****************************************************************
========================= CLASS #149 =============================
(2362) {433575} [433619]: Specify this when instantiating the Adapter.
(2491) {453829} [453889]: Specify this when instantiating the Adapter.
*****************************************************************
========================= CLASS #150 =============================
(2375) {435002} [435249]: Using setFetchMode() Fetching a Result Set as an Associative Array The fetchAssoc() method returns data in an array of associative arrays, regardless of what value you have set for the fetch mode.
(2376) {435263} [435474]: Using fetchAssoc() Fetching a Single Column from a Result Set The fetchCol() method returns data in an array of values, regardless of the value you have set for the fetch mode.
*****************************************************************
========================= CLASS #151 =============================
(2378) {435565} [435619]: Any other columns returned by the query are discarded.
(2383) {436144} [436214]: Any other columns returned by the query are discarded.
*****************************************************************
========================= CLASS #152 =============================
(2381) {435943} [436053]: The key of this associative array is taken from the first column returned by the SELECT query.
(2382) {436055} [436142]: The value is taken from the second column returned by the SELECT query.
*****************************************************************
========================= CLASS #153 =============================
(2392) {437587} [437757]: The first argument is a string that names the table, and the second argument is an associative array, mapping column names to data values.
(3068) {541864} [541945]: The argument is an associative array, mapping column names to values.
*****************************************************************
========================= CLASS #154 =============================
(2404) {439405} [439490]: Instead, the return value is the number of rows affected (usually 1).
(2434) {444666} [444754]: The return value is the number of rows affected by the update operation.
(2443) {445891} [445979]: The return value is the number of rows affected by the delete operation.
*****************************************************************
========================= CLASS #155 =============================
(2415) {441383} [441473]: For these RDBMS brands, the lastSequenceId() method always returns null .
(2561) {462811} [462880]: The lastSequenceId() method returns null .
(2576) {464896} [464965]: The lastSequenceId() method returns null .
(2586) {466563} [466632]: The lastSequenceId() method returns null .
(2599) {468587} [468656]: The lastSequenceId() method returns null .
*****************************************************************
========================= CLASS #156 =============================
(2430) {444221} [444345]: The third argument is a string containing an SQL expression that is used as criteria for the rows to change.
(2439) {445445} [445570]: The second argument is a string containing an SQL expression that is used as criteria for the rows to delete.
(2826) {504789} [504848]: The first argument is a string containing an SQL statement.
*****************************************************************
========================= CLASS #157 =============================
(2431) {444347} [444433]: The values and identifiers in this argument are not quoted or escaped.
(2440) {445572} [445658]: The values and identifiers in this argument are not quoted or escaped.
*****************************************************************
========================= CLASS #158 =============================
(2432) {444450} [444564]: You are responsible for ensuring that any dynamic content is interpolated into this string safely.
(2441) {445675} [445789]: You are responsible for ensuring that any dynamic content is interpolated into this string safely.
*****************************************************************
========================= CLASS #159 =============================
(2433) {444581} [444635]: See for methods to help you do this.
(2442) {445806} [445860]: See for methods to help you do this.
*****************************************************************
========================= CLASS #160 =============================
(2436) {444970} [445149]: If you provide an array of strings as the third argument, these strings are joined together as terms in an expression separated by AND operators.
(2445) {446166} [446346]: If you provide an array of strings as the second argument, these strings are joined together as terms in an expression separated by AND operators.
*****************************************************************
========================= CLASS #161 =============================
(2437) {445163} [445324]: Updating rows using an array of expressions Deleting Data You can delete rows from a database table using the delete() method.
(3102) {547074} [547184]: Deleting Rows from a Table You can delete rows from a database table using the delete() method.
*****************************************************************
========================= CLASS #162 =============================
(2467) {450284} [450415]: This method takes two arguments: the first argument is a string containing a placeholder symbol ( ?
(2772) {496297} [496372]: The first argument is a string containing a SQL expression.
*****************************************************************
========================= CLASS #163 =============================
(2511) {456630} [456897]: The value corresponding to each column is also an associative array, with the following keys and values: Metadata fields returned by describeTable() Key Type Description SCHEMA_NAME (string) Name of the database schema in which this table exists.
(2513) {456966} [457006]: COLUMN_NAME (string) Name of the column.
*****************************************************************
========================= CLASS #164 =============================
(2519) {457370} [457423]: SCALE (integer) Scale of SQL NUMERIC or DECIMAL type.
(2520) {457424} [457485]: PRECISION (integer) Precision of SQL NUMERIC or DECIMAL type.
*****************************************************************
========================= CLASS #165 =============================
(2552) {461440} [461570]: IBM DB2 Specify this Adapter to the factory() method with the name &#39;Db2&#39;.
(2558) {462316} [462450]: MySQLi Specify this Adapter to the factory() method with the name &#39;Mysqli&#39;.
(2562) {462902} [463036]: Oracle Specify this Adapter to the factory() method with the name &#39;Oracle&#39;.
(2569) {463808} [463986]: PDO for IBM DB2 and Informix Dynamic Server (IDS) Specify this Adapter to the factory() method with the name &#39;Pdo_Ibm&#39;.
(2573) {464357} [464512]: PDO Microsoft SQL Server Specify this Adapter to the factory() method with the name &#39;Pdo_Mssql&#39;.
(2583) {466054} [466194]: PDO MySQL Specify this Adapter to the factory() method with the name &#39;Pdo_Mysql&#39;.
(2587) {466654} [466793]: PDO Oracle Specify this Adapter to the factory() method with the name &#39;Pdo_Oci&#39;.
(2590) {467169} [467314]: PDO PostgreSQL Specify this Adapter to the factory() method with the name &#39;Pdo_Pgsql&#39;.
(2596) {468074} [468216]: PDO SQLite Specify this Adapter to the factory() method with the name &#39;Pdo_Sqlite&#39;.
*****************************************************************
========================= CLASS #166 =============================
(2553) {461617} [461661]: This Adapter uses the PHP extension ibm_db2.
(2563) {463083} [463124]: This Adapter uses the PHP extension oci8.
(2604) {469794} [469888]: Firebird/Interbase This Adapter uses the PHP extension php_interbase.
*****************************************************************
========================= CLASS #167 =============================
(2554) {461733} [461816]: IBM DB2 supports both sequences and auto-incrementing keys.
(2592) {467488} [467574]: PostgreSQL supports both sequences and auto-incrementing keys.
*****************************************************************
========================= CLASS #168 =============================
(2555) {461818} [461899]: Therefore the arguments to lastInsertId() are optional.
(2593) {467576} [467657]: Therefore the arguments to lastInsertId() are optional.
*****************************************************************
========================= CLASS #169 =============================
(2556) {461901} [462046]: If you give no arguments, the Adapter returns the last value generated for an auto-increment key.
(2594) {467659} [467804]: If you give no arguments, the Adapter returns the last value generated for an auto-increment key.
*****************************************************************
========================= CLASS #170 =============================
(2557) {462048} [462269]: If you give arguments, the Adapter returns the last value generated by the sequence named according to the convention &#39; table _ column _seq&#39;.
(2595) {467806} [468027]: If you give arguments, the Adapter returns the last value generated by the sequence named according to the convention &#39; table _ column _seq&#39;.
*****************************************************************
========================= CLASS #171 =============================
(2560) {462591} [462809]: MySQL does not support sequences, so lastInsertId() ignores its arguments and always returns the last value generated for an auto-increment key.
(2575) {464661} [464894]: Microsoft SQL Server does not support sequences, so lastInsertId() ignores its arguments and always returns the last value generated for an auto-increment key.
(2585) {466343} [466561]: MySQL does not support sequences, so lastInsertId() ignores its arguments and always returns the last value generated for an auto-increment key.
(2598) {468366} [468585]: SQLite does not support sequences, so lastInsertId() ignores its arguments and always returns the last value generated for an auto-increment key.
*****************************************************************
========================= CLASS #172 =============================
(2564) {463171} [463378]: Oracle does not support auto-incrementing keys, so you should specify the name of a sequence to lastInsertId() or lastSequenceId() .
(2589) {466940} [467147]: Oracle does not support auto-incrementing keys, so you should specify the name of a sequence to lastInsertId() or lastSequenceId() .
(2605) {469935} [470154]: Firebird/interbase does not support auto-incrementing keys, so you should specify the name of a sequence to lastInsertId() or lastSequenceId() .
*****************************************************************
========================= CLASS #173 =============================
(2567) {463588} [463696]: Currently the Zend_Db::CASE_FOLDING option is not supported by the Oracle adapter.
(2606) {470201} [470321]: Currently the Zend_Db::CASE_FOLDING option is not supported by the Firebird/interbase adapter.
*****************************************************************
========================= CLASS #174 =============================
(2570) {464033} [464086]: This Adapter uses the PHP extensions pdo and pdo_ibm.
(2574) {464559} [464614]: This Adapter uses the PHP extensions pdo and pdo_mssql.
(2584) {466241} [466296]: This Adapter uses the PHP extensions pdo and pdo_mysql.
(2588) {466840} [466893]: This Adapter uses the PHP extensions pdo and pdo_oci.
(2591) {467361} [467416]: This Adapter uses the PHP extensions pdo and pdo_pgsql.
(2597) {468263} [468319]: This Adapter uses the PHP extensions pdo and pdo_sqlite.
*****************************************************************
========================= CLASS #175 =============================
(2600) {468703} [468941]: To connect to an SQLite2 database, specify &#39;dsnprefix&#39;=&gt;&#39;sqlite2&#39; in the array of parameters when creating an instance of the Pdo_Sqlite Adapter.
(2601) {468988} [469233]: To connect to an in-memory SQLite database, specify &#39;dbname&#39;=&gt;&#39;:memory:&#39; in the array of parameters when creating an instance of the Pdo_Sqlite Adapter.
(5845) {1022857} [1022981]: to use CRAM-MD5 you would pass &#39;auth&#39; =&gt; &#39;crammd5&#39; in the Zend_Mail_Transport_Smtp constructor.
*****************************************************************
========================= CLASS #176 =============================
(2618) {471652} [471729]: The object type must be Zend_Db_Profiler or a subclass thereof.
(2623) {472172} [472235]: The class must be Zend_Db_Profiler or a subclass.
*****************************************************************
========================= CLASS #177 =============================
(2666) {479849} [480012]: Example of the using methods to add clauses You also can use most methods of the Zend_Db_Select object with a convenient fluent interface.
(5824) {1019539} [1019630]: You also can use most methods of the Zend_Mail object with a convenient fluent interface.
*****************************************************************
========================= CLASS #178 =============================
(2667) {480013} [480168]: A fluent interface means that each method returns a reference to the object on which it was called, so you can immediately call another method.
(5825) {1019631} [1019798]: A fluent interface means that each method returns a reference to the object on which it was called, so you can immediately call another method.
*****************************************************************
========================= CLASS #179 =============================
(2678) {481563} [481763]: You can specify the table name as &quot; schemaName.tableName &quot;, where Zend_Db_Select quotes each part individually, or you may specify the schema name separately.
(2687) {482978} [483023]: Zend_Db_Select quotes each part individually.
*****************************************************************
========================= CLASS #180 =============================
(2680) {481939} [482134]: Example of specifying a schema name Adding Columns In the second argument of the from() method, you can specify the columns to select from the respective table.
(3045) {537941} [538020]: By overriding this method, you can specify the columns.
(3047) {538255} [538346]: By overriding this method, you can specify the primary key columns.
*****************************************************************
========================= CLASS #181 =============================
(2713) {487137} [487381]: No quoting is applied to the expression you specify for the join condition; if you have column names that need to be quoted, you must use quoteIdentifier() as you form the string for the join condition.
(2750) {492940} [493103]: If you have column names that need to be quoted, you must use quoteIdentifier() as you form the string for the condition.
(2776) {496901} [497064]: If you have column names that need to be quoted, you must use quoteIdentifier() as you form the string for the condition.
*****************************************************************
========================= CLASS #182 =============================
(2725) {488859} [488899]: All RDBMS brands support this join type.
(2727) {489298} [489338]: All RDBMS brands support this join type.
*****************************************************************
========================= CLASS #183 =============================
(2726) {488921} [489251]: LEFT JOIN with the All rows from the left operand table are included, matching rows from the right operand table included, and the columns from the right operand table are filled with NULLs if no row exists matching the left table.
(2729) {489486} [489770]: All rows from the right operand table are included, matching rows from the left operand table included, and the columns from the left operand table are filled with NULLs if no row exists matching the right table.
*****************************************************************
========================= CLASS #184 =============================
(2730) {489817} [490018]: Some RDBMS brands don&#39;t support this join type, but in general any right join can be represented as a left join by reversing the order of the tables.
(2733) {490513} [490564]: Some RDBMS brands don&#39;t support this join type.
(2739) {491248} [491299]: Some RDBMS brands don&#39;t support this join type.
*****************************************************************
========================= CLASS #185 =============================
(2738) {491151} [491247]: The joinCross() method has no parameter to specify the join condition.
(2743) {491837} [491935]: The joinNatural() method has no parameter to specify the join condition.
*****************************************************************
========================= CLASS #186 =============================
(2748) {492635} [492771]: The first argument of this method is a SQL expression, and this expression is used in a SQL WHERE clause in the query.
(8456) {1407038} [1407137]: The first argument of this method is a string containing the error message.
*****************************************************************
========================= CLASS #187 =============================
(2749) {492785} [492939]: Example of the where() method No quoting is applied to expressions given to the where() or orWhere() methods.
(2775) {496743} [496900]: Example of the having() method No quoting is applied to expressions given to the having() or orHaving() methods.
*****************************************************************
========================= CLASS #188 =============================
(2786) {498263} [498391]: In Zend_Db_Select, you can use the limit() method to specify the count of rows and the number of rows to skip.
(2788) {498472} [498522]: The second argument is the number of rows to skip.
*****************************************************************
========================= CLASS #189 =============================
(2795) {499347} [499473]: The page number is the first argument of the limitPage() method, and the page length is the second argument.
(2851) {508158} [508225]: Cursor orientation is the second argument.
*****************************************************************
========================= CLASS #190 =============================
(2801) {500409} [500537]: The query() method returns an object of type Zend_Db_Statement or PDOStatement, depending on the adapter type.
(2803) {500809} [500944]: Both methods return an object of type Zend_Db_Statement or PDOStatement, depending on the adapter type.
*****************************************************************
========================= CLASS #191 =============================
(2827) {504861} [504976]: The optional second argument is an array of values to bind to parameter placeholders in the SQL string.
(2836) {506084} [506188]: The single argument is an array of value to bind to parameter placeholders in the statement.
*****************************************************************
========================= CLASS #192 =============================
(2856) {508963} [509052]: fetch() returns false if all rows of the result set have been fetched.
(2872) {510969} [511096]: This method returns a scalar value, or false if all rows of the result set have been fetched.
*****************************************************************
========================= CLASS #193 =============================
(2862) {509705} [509775]: Using fetchAll() See also PDOStatement::fetchAll() .
(2876) {511529} [511605]: Using fetchColumn() See also PDOStatement::fetchColumn() .
(2881) {512103} [512179]: Using fetchObject() See also PDOStatement::fetchObject() .
*****************************************************************
========================= CLASS #194 =============================
(2889) {513208} [513279]: Use the class name, not the physical name of the SQL table.
(2904) {514977} [515036]: Use the class name, not the physical name of the SQL table.
*****************************************************************
========================= CLASS #195 =============================
(2901) {514546} [514736]: The elements of this rule entry are described below: columns =&gt; A string or an array of strings naming the foreign key column name(s) in the dependent table.
(2908) {515578} [515706]: refColumns =&gt; A string or an array of strings naming the primary key column name(s) in the parent table.
*****************************************************************
========================= CLASS #196 =============================
(2902) {514775} [514882]: It&#39;s common for this to be a single column, but some tables have multi-column keys.
(2909) {515745} [515852]: It&#39;s common for this to be a single column, but some tables have multi-column keys.
*****************************************************************
========================= CLASS #197 =============================
(2913) {516327} [516437]: onDelete =&gt; The rule for an action to execute if a row is deleted in the parent table.
(2915) {516503} [516638]: onUpdate =&gt; The rule for an action to execute if values in primary key columns are updated in the parent table.
*****************************************************************
========================= CLASS #198 =============================
(2919) {517157} [517266]: The first argument $table can be a string that specifies the dependent table by its class name.
(2941) {520724} [520830]: The first argument $table can be a string that specifies the parent table by its class name.
(2960) {523817} [523961]: The first argument $table can be a string that specifies the destination table in the many-to-many relationship by its class name.
*****************************************************************
========================= CLASS #199 =============================
(2920) {517267} [517359]: You can also specify the dependent table by using an object of that table class.
(2942) {520831} [520920]: You can also specify the parent table by using an object of that table class.
(2961) {523962} [524056]: You can also specify the destination table by using an object of that table class.
(2963) {524277} [524372]: You can also specify the intersection table by using an object of that table class.
*****************************************************************
========================= CLASS #200 =============================
(2921) {517369} [517545]: Fetching a Dependent Rowset This example shows getting a Row object from the table Accounts , and finding the Bugs reported by that account.
(2928) {518156} [518375]: Fetching a Dependent Rowset By a Specific Rule This example shows getting a Row object from the table Accounts , and finding the Bugs assigned to be fixed by the user of that account.
(2931) {518675} [518976]: Fetching a Dependent Rowset using a Zend_Db_Table_Select This example shows getting a Row object from the table Accounts , and finding the Bugs assigned to be fixed by the user of that account, limited only to 3 rows and ordered by name.
*****************************************************************
========================= CLASS #201 =============================
(2922) {517572} [517612]: The second argument $rule is optional.
(2944) {521229} [521269]: The second argument $rule is optional.
*****************************************************************
========================= CLASS #202 =============================
(2923) {517613} [517723]: It is a string that names the rule key in the $_referenceMap array of the dependent table class.
(2945) {521270} [521380]: It is a string that names the rule key in the $_referenceMap array of the dependent table class.
*****************************************************************
========================= CLASS #203 =============================
(2924) {517724} [517838]: If you don&#39;t specify a rule, the first rule in the array that references the parent table is used.
(2946) {521381} [521495]: If you don&#39;t specify a rule, the first rule in the array that references the parent table is used.
*****************************************************************
========================= CLASS #204 =============================
(2925) {517851} [517927]: If you need to use a rule other than the first, you need to specify the key.
(2947) {521508} [521584]: If you need to use a rule other than the first, you need to specify the key.
(2972) {525559} [525647]: If you need to use a rule other than the first, you need to specify the key.
*****************************************************************
========================= CLASS #205 =============================
(2926) {517950} [518095]: In the example code above, the rule key is not specified, so the rule used by default is the first one that matches the parent table.
(2948) {521607} [521747]: In the example above, the rule key is not specified, so the rule used by default is the first one that matches the parent table.
(2973) {525670} [525799]: In the example code above, the rule key is not specified, so the rules used by default are the first ones that match.
*****************************************************************
========================= CLASS #206 =============================
(2929) {518376} [518516]: The rule key string that corresponds to this reference relationship in this example is &#39;Engineer&#39; .
(2951) {522000} [522140]: The rule key string that corresponds to this reference relationship in this example is &#39;Engineer&#39; .
*****************************************************************
========================= CLASS #207 =============================
(2932) {519008} [519137]: Alternatively, you can query rows from a dependent table using a special mechanism called a &quot;magic method&quot;.
(2952) {522167} [522254]: Alternatively, you can query rows from a parent table using a &quot;magic method&quot;.
*****************************************************************
========================= CLASS #208 =============================
(2933) {519138} [519522]: Zend_Db_Table_Row_Abstract invokes the method: $row-&gt;find&lt;TableClass&gt;() $row-&gt;find&lt;TableClass&gt;By&lt;Rule&gt;() In the patterns above, &lt;TableClass&gt; and &lt;Rule&gt; are strings that correspond to the class name of the dependent table, and the dependent table&#39;s rule key that references the parent table.
(2953) {522267} [522566]: Zend_Db_Table_Row_Abstract invokes the method: In the patterns above, &lt;TableClass&gt; and &lt;Rule&gt; are strings that correspond to the class name of the parent table, and the dependent table&#39;s rule key that references the parent table.
*****************************************************************
========================= CLASS #209 =============================
(2936) {519823} [519974]: The table identity and the rule key named in the method call must match the spelling of the class and rule key exactly.
(2954) {522593} [522728]: The table identity and the rule key named in the method call must match the spelling of the class and rule key exactly.
(2978) {526891} [527029]: The table identities and the rule keys named in the method call must match the spelling of the class and rule key exactly.
*****************************************************************
========================= CLASS #210 =============================
(2937) {519988} [520161]: Fetching Dependent Rowsets using the Magic Method This example shows finding dependent Rowsets equivalent to those in the previous examples.
(2955) {522742} [522906]: Fetching the Parent Row using the Magic Method This example shows finding parent Rows equivalent to those in the previous examples.
*****************************************************************
========================= CLASS #211 =============================
(2938) {520162} [520293]: In this case, the application uses the magic method invocation instead of specifying the table and rule as strings.
(2956) {522907} [523038]: In this case, the application uses the magic method invocation instead of specifying the table and rule as strings.
*****************************************************************
========================= CLASS #212 =============================
(2964) {524382} [524650]: Fetching a Rowset with the Many-to-many Method This example shows geting a Row object from from the origin table Bugs , and finding rows from the destination table Products , representing products related to that bug.
(2975) {525905} [526192]: Fetching a Rowset with the Many-to-many Method By a Specific Rule This example shows geting a Row object from from the origin table Bugs , and finding rows from the destination table Products , representing products related to that bug.
*****************************************************************
========================= CLASS #213 =============================
(2967) {524889} [525002]: The $rule1 key names the rule for the relationship from the intersection table to the origin table.
(2969) {525110} [525228]: The $rule2 key names the rule for the relationship from the intersection table to the destination table.
*****************************************************************
========================= CLASS #214 =============================
(2968) {525003} [525087]: In this example, this is the relationship from BugsProducts to Bugs .
(2970) {525229} [525309]: In this example, this is the relationship from Bugs to Products .
*****************************************************************
========================= CLASS #215 =============================
(2993) {529720} [529838]: The &#39;onDelete&#39; element of the reference map entry is set to self::CASCADE .
(2995) {529991} [530087]: The &#39;onUpdate&#39; element of the reference map entry is self::RESTRICT .
*****************************************************************
========================= CLASS #216 =============================
(3018) {533334} [533442]: The Zend_Db_Table solution is an implementation of the Table Data Gateway pattern.
(3219) {565993} [566078]: Zend_Db_Table_Row is an implementation of the Row Data Gateway pattern.
*****************************************************************
========================= CLASS #217 =============================
(3023) {534017} [534161]: Declaring a table class with explicit table name If you don&#39;t specify the table name, it defaults to the name of the class.
(3042) {537416} [537508]: _setupTableName() defaults the table name to the name of the class.
*****************************************************************
========================= CLASS #218 =============================
(3048) {538368} [538645]: Table initialization If application-specific logic needs to be initialized when a Table class is constructed, you can select to move your tasks to the init() method, which is called after all Table metadata has been processed.
(3266) {573358} [573653]: Specifying a custom Row class Row initialization If application-specific logic needs to be initialized when a row is constructed, you can select to move your tasks to the init() method, which is called after all row metadata has been processed.
*****************************************************************
========================= CLASS #219 =============================
(3049) {538646} [538793]: This is recommended over the __construct method if you do not need to alter the metadata in any programmatic way.
(3267) {573654} [573801]: This is recommended over the __construct method if you do not need to alter the metadata in any programmatic way.
*****************************************************************
========================= CLASS #220 =============================
(3053) {539193} [539592]: There are three ways of specifying the database adapter to a Table class, and these three ways are described below: Specifying a Database Adapter The first way to provide a database adapter to a Table class is by passing it as an object of type Zend_Db_Adapter_Abstract in the options array, identified by the key &#39;db&#39; .
(3060) {540645} [540869]: Storing a Database Adapter in the Registry The third way to provide a database adapter to a Table class is by passing a string in the options array, also identified by the &#39;db&#39; key.
*****************************************************************
========================= CLASS #221 =============================
(3096) {546153} [546424]: This method takes two arguments: an associative array of columns to change and new values to assign to these columns; and an SQL expression that is used in a WHERE clause, as criteria for the rows to change in the UPDATE operation.
(3103) {547185} [547337]: This method takes one argument, which is an SQL expression that is used in a WHERE clause, as criteria for the rows to delete.
*****************************************************************
========================= CLASS #222 =============================
(3097) {546434} [546647]: Example of updating rows in a Table Since the table update() method proxies to the database adapter update() method, the second argument can be an array of SQL expressions.
(3104) {547347} [547453]: Example of deleting rows from a Table The second argument can be an array of SQL expressions.
(3106) {547559} [547723]: Since the table delete() method proxies to the database adapter delete() method, the second argument can be an array of SQL expressions.
*****************************************************************
========================= CLASS #223 =============================
(3098) {546648} [546730]: The expressions are combined as Boolean terms using an AND operator.
(3105) {547454} [547536]: The expressions are combined as Boolean terms using an AND operator.
(3107) {547724} [547806]: The expressions are combined as Boolean terms using an AND operator.
*****************************************************************
========================= CLASS #224 =============================
(3099) {546757} [546829]: The values and identifiers in the SQL expression are not quoted for you.
(3108) {547833} [547905]: The values and identifiers in the SQL expression are not quoted for you.
*****************************************************************
========================= CLASS #225 =============================
(3100) {546830} [546953]: If you have values or identifiers that require quoting, you are responsible for doing this.
(3109) {547906} [548029]: If you have values or identifiers that require quoting, you are responsible for doing this.
*****************************************************************
========================= CLASS #226 =============================
(3101) {546954} [547060]: Use the quote() , quoteInto() , and quoteIdentifier() methods of the database adapter.
(3110) {548030} [548136]: Use the quote() , quoteInto() , and quoteIdentifier() methods of the database adapter.
*****************************************************************
========================= CLASS #227 =============================
(3117) {549149} [549300]: Because the number of rows returned is variable, the find() method returns an object of type Zend_Db_Table_Rowset_Abstract .
(3140) {552989} [553075]: This method returns an object of type Zend_Db_Table_Rowset_Abstract .
*****************************************************************
========================= CLASS #228 =============================
(3162) {556375} [556522]: If the search criteria you specified match no rows in the database table, then fetchRow() returns PHP&#39;s null value.
(3298) {578733} [578822]: If the Rowset contains zero rows, current() returns PHP&#39;s null value.
*****************************************************************
========================= CLASS #229 =============================
(3166) {557008} [557084]: cols =&gt; an array, naming the column(s) of the table.
(3167) {557102} [557187]: primary =&gt; an array, naming the column(s) in the primary key.
*****************************************************************
========================= CLASS #230 =============================
(3170) {557421} [557552]: rowClass =&gt; the name of the concrete class used for Row objects returned by methods of this table instance.
(3172) {557626} [557763]: rowsetClass =&gt; the name of the concrete class used for Rowset objects returned by methods of this table instance.
*****************************************************************
========================= CLASS #231 =============================
(3204) {563374} [563609]: Custom method to find bugs by status Define Inflection in Zend_Db_Table Some people prefer that the table class name match a table name in the RDBMS by using a string transformation called inflection .
(3279) {576033} [576235]: Define Inflection in Zend_Db_Table_Row Some people prefer that the table class name match a table name in the RDBMS by using a string transformation called inflection .
*****************************************************************
========================= CLASS #232 =============================
(3214) {565372} [565534]: Example of an abstract table class that implements inflection You are responsible for writing the functions to perform inflection transformation.
(3285) {577060} [577143]: You are responsible for writing the functions to perform inflection transformation.
*****************************************************************
========================= CLASS #233 =============================
(3215) {565551} [565599]: Zend Framework does not provide such a function.
(3286) {577160} [577208]: Zend Framework does not provide such a function.
*****************************************************************
========================= CLASS #234 =============================
(3220) {566088} [566344]: Fetching a Row Zend_Db_Table_Abstract provides methods find() and fetchAll() , which each return an object of type Zend_Db_Table_Rowset, and the method fetchRow() , which returns an object of type Zend_Db_Table_Row.
(3290) {577675} [577845]: Fetching a Rowset Zend_Db_Table_Abstract provides methods find() and fetchAll() , each of which returns an object of type Zend_Db_Table_Rowset_Abstract .
*****************************************************************
========================= CLASS #235 =============================
(3229) {567502} [567611]: Example of using the toArray() method The array returned from toArray() is not updateable.
(3315) {580901} [580984]: Using toArray() The array returned from toArray() is not updateable.
*****************************************************************
========================= CLASS #236 =============================
(3233) {568039} [568272]: Writing rows to the database Changing column values in a row You can set individual column values using column accessors, similar to how the columns are read as object properties in the example above.
(6079) {1056494} [1056516]: See the example above.
*****************************************************************
========================= CLASS #237 =============================
(3249) {570718} [570899]: Serializing a Row Simply use PHP&#39;s serialize() function to create a string containing a byte-stream representation of the Row object argument.
(3319) {581397} [581584]: Serializing a Rowset Simply use PHP&#39;s serialize() function to create a string containing a byte-stream representation of the Rowset object argument.
*****************************************************************
========================= CLASS #238 =============================
(3250) {570913} [571110]: Example of serializing a row Unserializing Row Data Use PHP&#39;s unserialize() function to restore a string containing a byte-stream representation of an object.
(3320) {581598} [581777]: Unserializing a Serialized Rowset Use PHP&#39;s unserialize() function to restore a string containing a byte-stream representation of an object.
*****************************************************************
========================= CLASS #239 =============================
(3251) {571111} [571152]: The function returns the original object.
(3321) {581779} [581820]: The function returns the original object.
*****************************************************************
========================= CLASS #240 =============================
(3252) {571183} [571246]: Note that the Row object returned is in a disconnected state.
(3322) {581851} [581917]: Note that the Rowset object returned is in a disconnected state.
*****************************************************************
========================= CLASS #241 =============================
(3253) {571263} [571489]: You can read the Row object and its properties, but you cannot change values in the Row or execute other methods that require a database connection (for example, queries against related tables).
(3323) {581918} [582195]: You can iterate through the Rowset and read the Row objects and their properties, but you cannot change values in the Rows or execute other methods that require a database connection (for example, queries against related tables).
*****************************************************************
========================= CLASS #242 =============================
(3254) {571503} [571593]: Example of unserializing a serialized row Why do Rows unserialize in a disconnected state?
(3324) {582209} [582260]: Why do Rowsets unserialize in a disconnected state?
*****************************************************************
========================= CLASS #243 =============================
(3255) {571615} [571691]: A serialized object is a string that is readable to anyone who possesses it.
(3325) {582278} [582354]: A serialized object is a string that is readable to anyone who possesses it.
*****************************************************************
========================= CLASS #244 =============================
(3256) {571692} [571870]: It could be a security risk to store parameters such as database account and password in plain, unencrypted text in the serialized string.
(3326) {582355} [582525]: It could be a security risk to store parameters such as database account and password in plain, unencrypted text in the serialized string.
*****************************************************************
========================= CLASS #245 =============================
(3257) {571871} [572069]: You would not want to store such data to a text file that is not protected, or send it in an email or other medium that is easily read by potential attackers.
(3327) {582526} [582700]: You would not want to store such data to a text file that is not protected, or send it in an email or other medium that is easily read by potential attackers.
*****************************************************************
========================= CLASS #246 =============================
(3258) {572070} [572241]: The reader of the serialized object should not be able to use it to gain access to your database without knowing valid credentials.
(3328) {582701} [582848]: The reader of the serialized object should not be able to use it to gain access to your database without knowing valid credentials.
*****************************************************************
========================= CLASS #247 =============================
(3259) {572259} [572377]: Reactivating a Row as Live Data You can reactivate a disconnected Row, using the setTable() method.
(3329) {582875} [582946]: You can reactivate a disconnected Rowset using the setTable() method.
*****************************************************************
========================= CLASS #248 =============================
(3260) {572394} [572505]: The argument to this method is a valid object of type Zend_Db_Table_Abstract, which you create.
(3330) {582948} [583057]: The argument to this method is a valid object of type Zend_Db_Table_Abstract , which you create.
*****************************************************************
========================= CLASS #249 =============================
(3261) {572506} [572671]: Creating a Table object requires a live connection to the database, so by reassociating the Table with the Row, the Row gains access to the database.
(3331) {583059} [583238]: Creating a Table object requires a live connection to the database, so by reassociating the Table with the Rowset, the Rowset gains access to the database.
*****************************************************************
========================= CLASS #250 =============================
(3262) {572688} [572795]: Subsequently, you can change values in the Row object and save the changes to the database.
(3332) {583240} [583368]: Subsequently, you can change values in the Row objects contained in the Rowset and save the changes to the database.
*****************************************************************
========================= CLASS #251 =============================
(3265) {573090} [573348]: To use your new Row class to store results of Table queries, specify the custom Row class by name either in the $_rowClass protected member of a Table class, or in the array argument of the constructor of a Table object.
(3335) {583714} [583917]: Specify the custom Rowset class by name either in the $_rowsetClass protected member of a Table class, or in the array argument of the constructor of a Table object.
*****************************************************************
========================= CLASS #252 =============================
(3304) {579583} [579672]: If the index is wrong, ie doesn&#39;t exist, an exception will be thrown.
(3310) {580278} [580348]: If the position requested does not exist, an exception will be thrown.
*****************************************************************
========================= CLASS #253 =============================
(3410) {598942} [599253]: If you want to use a namespace other than atom: , rss: , or osrss: in your entry, you need to register the namespace with Zend_Feed using Creating an Atom Entry with Elements of Custom Namespaces Filter Chains Often multiple filters should be applied to some value in a particular order.
(8393) {1396927} [1397034]: Validator Chains Often multiple validations should be applied to some value in a particular order.
*****************************************************************
========================= CLASS #254 =============================
(3474) {609856} [610022]: Using Zend_Config with Zend_Filter_Inflector Standard Filter Classes The Zend Framework comes with a standard set of filters, which are ready for you to use.
(8364) {1393063} [1393199]: Standard Validation Classes The Zend Framework comes with a standard set of validation classes, which are ready for you to use.
*****************************************************************
========================= CLASS #255 =============================
(3475) {610028} [610125]: Alnum Returns the string $value , removing all but alphabetic and digit characters.
(3477) {610216} [610303]: Alpha Returns the string $value , removing all but alphabetic characters.
*****************************************************************
========================= CLASS #256 =============================
(3476) {610126} [610206]: This filter includes an option to also allow white space characters.
(3478) {610304} [610384]: This filter includes an option to also allow white space characters.
*****************************************************************
========================= CLASS #257 =============================
(3482) {610855} [611120]: Int Returns (int) $value RealPath Expands all symbolic links and resolves references to &#39;/./&#39;, &#39;/../&#39; and extra &#39;/&#39; characters in the input path and return the canonicalized absolute pathname.
(3483) {611121} [611223]: The resulting path will have no symbolic link, &#39;/./&#39; or &#39;/../&#39; components.
*****************************************************************
========================= CLASS #258 =============================
(3487) {611512} [611627]: StringToLower Returns the string $value , converting alphabetic characters to lowercase as necessary.
(3488) {611637} [611752]: StringToUpper Returns the string $value , converting alphabetic characters to uppercase as necessary.
*****************************************************************
========================= CLASS #259 =============================
(3496) {612814} [613069]: The following example demonstrates how to write a custom filter: To add an instance of the above filter to a filter chain: Introduction The Zend_Filter component provides a set of commonly needed data filters.
(8439) {1404089} [1404192]: Introduction The Zend_Validate component provides a set of commonly needed validators.
*****************************************************************
========================= CLASS #260 =============================
(3497) {613070} [613221]: It also provides a simple filter chaining mechanism by which multiple filters may be applied to a single datum in a user-defined order.
(8440) {1404193} [1404350]: It also provides a simple validator chaining mechanism by which multiple validators may be applied to a single datum in a user-defined order.
*****************************************************************
========================= CLASS #261 =============================
(3511) {615284} [615701]: Following is a basic example of using a filter upon two input data, the ampersand ( &amp; ) and double quote ( &quot; ) characters: Using the static get() method If it&#39;s inconvenient to load a given filter class and create an instance of the filter, you can use the static method Zend_Filter::get() as an alternative invocation style.
(8470) {1408971} [1409237]: Using the static is() method If it&#39;s inconvenient to load a given validation class and create an instance of the validator, you can use the static method Zend_Validate::is() as an alternative invocation style.
*****************************************************************
========================= CLASS #262 =============================
(3512) {615714} [615828]: The first argument of this method is a data input value, that you would pass to the filter() method.
(8471) {1409239} [1409354]: The first argument of this method is a data input value, that you would pass to the isValid() method.
*****************************************************************
========================= CLASS #263 =============================
(3513) {615830} [615980]: The second argument is a string, which corresponds to the basename of the filter class, relative to the Zend_Filter namespace.
(8472) {1409356} [1409526]: The second argument is a string, which corresponds to the basename of the validation class, relative to the Zend_Validate namespace.
*****************************************************************
========================= CLASS #264 =============================
(3514) {615982} [616141]: The get() method automatically loads the class, creates an instance, and applies the filter() method to the data input.
(8473) {1409528} [1409675]: The is() method automatically loads the class, creates an instance, and applies the isValid() method to the data input.
*****************************************************************
========================= CLASS #265 =============================
(3515) {616169} [616274]: You can also pass an array of constructor arguments, if they are needed for the filter class.
(8474) {1409703} [1409805]: You can also pass an array of constructor arguments, if they are needed for the validator.
*****************************************************************
========================= CLASS #266 =============================
(3516) {616302} [616612]: The static usage can be convenient for invoking a filter ad hoc, but if you have the need to run a filter for multiple inputs, it&#39;s more efficient to follow the first example above, creating an instance of the filter object and calling its filter() method.
(8477) {1410055} [1410369]: The static usage can be convenient for invoking a validator ad hoc, but if you have the need to run a validator for multiple inputs, it&#39;s more efficient to use the non-static usage, creating an instance of the validator object and calling its isValid() method.
*****************************************************************
========================= CLASS #267 =============================
(3517) {616635} [616805]: Also, the Zend_Filter_Input class allows you to instantiate and run multiple filter and validator classes on demand to process sets of input data.
(8478) {1410392} [1410564]: Also, the Zend_Filter_Input class allows you to instantiate and run multiple filter and validator classes on demand to process sets of input data.
*****************************************************************
========================= CLASS #268 =============================
(3530) {618202} [618442]: For example, if a string of numeric digits is needed, and the input value is &quot;abc123&quot;, then it might be a reasonable transformation to change the value to the string &quot;123&quot;.
(3533) {618636} [618824]: For example, if a string must look like an email address, and the input value is &quot;abc123&quot;, then the value is not considered valid.
*****************************************************************
========================= CLASS #269 =============================
(3540) {620061} [620174]: This associative array maps a rule name to a filter or validator or a chain of filters or validators.
(3547) {621190} [621244]: An array, to declare a chain of filters or validators.
*****************************************************************
========================= CLASS #270 =============================
(3573) {625173} [625343]: The results of the getMessages() method is an associative array, mapping a rule name to an array of error messages related to that rule.
(3577) {625909} [626033]: The getErrors() method returns an associative array, mapping a rule name to an array of error identifiers.
(3581) {626541} [626659]: The results of the getUnknown() method is an associative array, mapping field names to field values.
*****************************************************************
========================= CLASS #271 =============================
(3580) {626277} [626510]: You can specify the message returned by getMissing() using the &#39;missingMessage&#39; option, as an argument to the Zend_Filter_Input constructor or using the setOptions() method.
(3631) {635737} [635945]: You can specify this message using the &#39;notEmptyMessage&#39; option, as an argument to the Zend_Filter_Input constructor or using the setOptions() method.
*****************************************************************
========================= CLASS #272 =============================
(3601) {630326} [630466]: You can specify this metacommand using the class constant Zend_Filter_Input::FIELDS instead of the string.
(3613) {632554} [632696]: You can specify this metacommand using the class constant Zend_Filter_Input::PRESENCE instead of the string.
(3616) {633080} [633227]: You can specify this metacommand using the class constant Zend_Filter_Input::DEFAULT_VALUE instead of the string.
(3628) {635135} [635280]: You can specify this metacommand using the class constant Zend_Filter_Input::ALLOW_EMPTY instead of the string.
(3635) {636643} [636788]: You can specify this metacommand using the class constant Zend_Filter_Input::BREAK_CHAIN instead of the string.
(3642) {638025} [638167]: You can specify this metacommand using the class constant Zend_Filter_Input::MESSAGES instead of the string.
*****************************************************************
========================= CLASS #273 =============================
(3602) {630497} [630625]: In the example above, the filter rule applies the &#39;digits&#39; filter to the input field named &#39;mo&#39;.
(5266) {932434} [932518]: In the example above, &#39;Container_Tree&#39; becomes &#39;Container/Tree.php&#39;.
*****************************************************************
========================= CLASS #274 =============================
(3612) {632349} [632523]: If the value of this metacommand is &#39;required&#39; then the field must exist in the input data, or else it is reported as a missing field.
(3614) {632727} [632787]: The default value of this metacommand is &#39;optional&#39;.
(3629) {635311} [635360]: The default value of this metacommand is false .
(3636) {636819} [636868]: The default value of this metacommand is false .
*****************************************************************
========================= CLASS #275 =============================
(3653) {639745} [640064]: Using options to set metacommands for all rules The default value for &#39;allowEmpty&#39;, &#39;breakChainOnFailure&#39;, and &#39;presence&#39; metacommands can be set for all rules using the $options argument to the constructor of Zend_Filter_Input.
(3655) {640245} [640373]: The &#39;fields&#39;, &#39;messages&#39;, and &#39;default&#39; metacommands cannot be set using this technique.
*****************************************************************
========================= CLASS #276 =============================
(3720) {651601} [651795]: Before each decorator&#39;s render() method is called, the current item is set in the decorator using setElement() , giving the decorator awareness of the item being rendered.
(3738) {654061} [654141]: Each decorator&#39;s render() method accepts a string, $content .
*****************************************************************
========================= CLASS #277 =============================
(3725) {652645} [652740]: In the case that a decorator replaces the content, this setting is ignored.
(3729) {653117} [653216]: In the case that a decorator replaces the content, this setting may be ignored.
*****************************************************************
========================= CLASS #278 =============================
(3757) {658038} [658226]: Plugin Loaders Zend_Form_Element makes use of Zend_Loader_PluginLoader to allow developers to specify locations of alternate validators, filters, and decorators.
(3890) {686034} [686202]: Plugin Loaders Zend_Form makes use of Zend_Loader_PluginLoader to allow developers to specify locations of alternate elements and decorators.
*****************************************************************
========================= CLASS #279 =============================
(3758) {658227} [658361]: Each has its own plugin loader associated with it, and general accessors are used to retrieve and modify each.
(3891) {686203} [686337]: Each has its own plugin loader associated with it, and general accessors are used to retrieve and modify each.
*****************************************************************
========================= CLASS #280 =============================
(3760) {658535} [658583]: The type names are case insensitive.
(3893) {686491} [686539]: The type names are case insensitive.
*****************************************************************
========================= CLASS #281 =============================
(3763) {658923} [659016]: getPluginLoader($type) : retrieves the plugin loader associated with $type .
(3764) {659009} [659016]: $type .
(3894) {686562} [686727]: The methods used to interact with plugin loaders are as follows: getPluginLoader($type) : retrieves the plugin loader associated with $type.
*****************************************************************
========================= CLASS #282 =============================
(3767) {659578} [659723]: Custom validators, filters, and decorators are an easy way to share functionality between forms and encapsulate custom functionality.
(3899) {687602} [687735]: Custom elements and decorators are an easy way to share functionality between forms and encapsulate custom functionality.
(3992) {710373} [710407]: Implementing custom functionality.
*****************************************************************
========================= CLASS #283 =============================
(3777) {661671} [662186]: Filtering happens both during validation and when you retrieve the element value via getValue() : Filters may be added to the chain in two ways: passing in a concrete filter instance providing a filter name -- either a short name or fully qualified class name Let&#39;s see some examples: Short names are typically the filter name minus the prefix.
(3785) {663720} [664102]: Validators may be added to the chain in two ways: passing in a concrete validator instance providing a validator name -- either a short name or fully qualified class name Let&#39;s see some examples: Short names are typically the validator name minus the prefix.
*****************************************************************
========================= CLASS #284 =============================
(3778) {662187} [662275]: In the default case, this will mean minus the &#39;Zend_Filter_&#39; prefix.
(3786) {664103} [664193]: In the default case, this will mean minus the &#39;Zend_Validate_&#39; prefix.
*****************************************************************
========================= CLASS #285 =============================
(3779) {662288} [662343]: Additionally, the first letter need not be upper-cased.
(3787) {664206} [664261]: Additionally, the first letter need not be upper-cased.
*****************************************************************
========================= CLASS #286 =============================
(3780) {662353} [662543]: Using Custom Filter Classes If you have your own set of filter classes, you can tell Zend_Form_Element about these using addPrefixPath() .
(3788) {664271} [664467]: Using Custom Validator Classes If you have your own set of validator classes, you can tell Zend_Form_Element about these using addPrefixPath() .
*****************************************************************
========================= CLASS #287 =============================
(3781) {662544} [662847]: For instance, if you have validators under the &#39;My_Filter&#39; prefix, you can tell Zend_Form_Element about this as follows: (Recall that the third argument indicates which plugin loader on which to perform the action.)
(3789) {664468} [664774]: For instance, if you have validators under the &#39;My_Validator&#39; prefix, you can tell Zend_Form_Element about this as follows: (Recall that the third argument indicates which plugin loader on which to perform the action.)
*****************************************************************
========================= CLASS #288 =============================
(3810) {668995} [669138]: By default, this flag is false, meaning that your validator chain will be skipped if no value is passed to isValid() .
(3824) {671991} [672021]: By default, this flag is true.
(3869) {678723} [678753]: By default, this flag is true.
*****************************************************************
========================= CLASS #289 =============================
(3817) {670643} [670733]: For more information on validators, see the Zend_Validate documentation .
(4010) {714037} [714152]: For more information on these codes, see the Zend_Validate documentation.
*****************************************************************
========================= CLASS #290 =============================
(3823) {671753} [671990]: setAutoInsertNotEmptyValidator($flag) allows you to specify whether or not a &#39;NotEmpty&#39; validator will be prepended to the validator chain when the element is required.
(3868) {678559} [678722]: autoInsertNotEmptyValidator : flag indicating whether or not to insert a &#39;NotEmpty&#39; validator when the element is required.
*****************************************************************
========================= CLASS #291 =============================
(3826) {672416} [672645]: For each element, the developer needs to create markup for the element itself, typically a label, and, if they&#39;re being nice to their users, markup for displaying validation error messages.
(4007) {713793} [713819]: Validation error messages.
*****************************************************************
========================= CLASS #292 =============================
(3833) {673324} [673486]: By default, Zend_Form_Element specifies the &#39;formText&#39; view helper, but individual subclasses specify different helpers.
(4154) {739022} [739099]: It specifies the &#39;formButton&#39; view helper for decoration.
(4168) {741015} [741099]: Zend_Form_Element_Checkbox uses the &#39;formCheckbox&#39; view helper.
(4214) {748995} [749101]: Zend_Form_Element_Text simply uses the &#39;formText&#39; view helper to display the element.
*****************************************************************
========================= CLASS #293 =============================
(3836) {673671} [673752]: HtmlTag : wraps the element and errors in an HTML &lt;dd&gt; tag.
(3844) {675182} [675300]: The next decorator, &#39;HtmlTag&#39;, wraps the element and errors in an HTML &lt;dd&gt; tag.
*****************************************************************
========================= CLASS #294 =============================
(3839) {674004} [674156]: Default Decorators Do Not Need to Be Loaded By default, the default decorators are loaded during object initialization.
(3963) {703075} [703227]: Default Decorators Do Not Need to Be Loaded By default, the default decorators are loaded during object initialization.
*****************************************************************
========================= CLASS #295 =============================
(3840) {674157} [674430]: You can disable this by passing the &#39;disableLoadDefaultDecorators&#39; option to the constructor: This option may be mixed with any other options you pass, both as array options or in a Zend_Config object.
(3930) {694758} [695058]: You can disable this by passing the &#39;disableLoadDefaultDecorators&#39; option when creating a display group: This option may be mixed with any other options you pass, both as array options or in a Zend_Config object.
(3964) {703228} [703501]: You can disable this by passing the &#39;disableLoadDefaultDecorators&#39; option to the constructor: This option may be mixed with any other options you pass, both as array options or in a Zend_Config object.
*****************************************************************
========================= CLASS #296 =============================
(3847) {675744} [675932]: Using Multiple Decorators of the Same Type Internally, Zend_Form_Element uses a decorator&#39;s class as the lookup mechanism when retrieving decorators.
(3965) {703515} [703695]: Using Multiple Decorators of the Same Type Internally, Zend_Form uses a decorator&#39;s class as the lookup mechanism when retrieving decorators.
*****************************************************************
========================= CLASS #297 =============================
(3848) {675933} [676122]: As a result, you cannot register multiple decorators of the same type; subsequent decorators will simply overwrite those that existed before.
(3966) {703696} [703885]: As a result, you cannot register multiple decorators of the same type; subsequent decorators will simply overwrite those that existed before.
*****************************************************************
========================= CLASS #298 =============================
(3849) {676153} [676195]: To get around this, you can use aliases .
(3967) {703916} [703956]: To get around this, you can use aliases.
*****************************************************************
========================= CLASS #299 =============================
(3850) {676212} [677093]: Instead of passing a decorator or decorator name as the first argument to addDecorator() , pass an array with a single element, with the alias pointing to the decorator object or name: In the addDecorators() and setDecorators() methods, you will need to pass the &#39;decorator&#39; option in the array representing the decorator: Methods associated with decorators include: getDecorator($name) (retrieve a decorator object by name) getDecorators() (retrieve all decorators) removeDecorator($name) (remove decorator by name) clearDecorators() (remove all decorators) Metadata and Attributes Zend_Form_Element handles a variety of attributes and element metadata.
(3968) {703957} [704504]: Instead of passing a decorator or decorator name as the first argument to addDecorator() , pass an array with a single element, with the alias pointing to the decorator object or name: In the addDecorators() and setDecorators() methods, you will need to pass the &#39;decorator&#39; option in the array representing the decorator: You may create your own decorators for generating the form.
*****************************************************************
========================= CLASS #300 =============================
(3877) {681480} [681698]: Generally speaking, keys are named as follows: If &#39;set&#39; + key refers to a Zend_Form_Element method, then the value provided will be passed to that method.
(3985) {708818} [708981]: As a general rule, if &#39;set&#39; + the option key refers to a Zend_Form method, then the value provided will be passed to that method.
*****************************************************************
========================= CLASS #301 =============================
(3879) {681810} [682476]: Exceptions to the rule include the following: prefixPath will be passed to addPrefixPaths() The following setters cannot be set in this way: setAttrib (though setAttribs will work) setConfig setOptions setPluginLoader setTranslator setView As an example, here is a config file that passes configuration for every type of configurable data: Custom Elements You can create your own custom elements by simply extending the Zend_Form_Element class.
(3987) {709143} [709852]: Exceptions to the rule include the following: prefixPaths will be passed to addPrefixPaths() elementPrefixPaths will be passed to addElementPrefixPaths() displayGroupPrefixPaths will be passed to addDisplayGroupPrefixPaths() the following setters cannot be set in this way: setConfig setDefault setOptions setPluginLoader setSubForms setTranslator setView As an example, here is a config file that passes configuration for every type of configurable data: The above could easily be abstracted to an XML or PHP array-based configuration file.
*****************************************************************
========================= CLASS #302 =============================
(3918) {691487} [691677]: setElementDecorators() accepts an array of decorators, just like setDecorators() , and will overwrite any previously set decorators in each element.
(3934) {695799} [696020]: setDisplayGroupDecorators() accepts an array of decorators, just like setDecorators() , and will overwrite any previously set decorators in each display group.
*****************************************************************
========================= CLASS #303 =============================
(3939) {697300} [698369]: Methods for Interacting With Display Groups The following methods may be used to interact with display groups: getDisplayGroup($name) getDisplayGroups() removeDisplayGroup($name) clearDisplayGroups() setDefaultDisplayGroupClass($class) getDefaultDisplayGroupClass($class) Zend_Form_DisplayGroup Methods Zend_Form_DisplayGroup has the following methods, grouped by type: Configuration: Metadata: getAttrib($key) getAttribs() removeAttrib($key) clearAttribs() setName($name) getName() setDescription($value) getDescription() setLegend($legend) getLegend() setOrder($order) getOrder() Elements: getElement($name) getElements() removeElement($name) clearElements() Plugin loaders: getPluginLoader() Decorators: getDecorator($name) getDecorators() removeDecorator($name) clearDecorators() Rendering: getView() I18N: getTranslator() setDisableTranslator($flag) translatorIsDisabled() Sub Forms Sub forms serve several purposes: Creating logical element groups.
(3970) {704784} [705015]: The following methods may be used to interact with decorators: getDecorator($name) getDecorators() removeDecorator($name) clearDecorators() Validation A primary use case for forms is validating submitted data.
(3983) {707625} [708688]: Methods The following is a full list of methods available to Zend_Form , grouped by type: Configuration and Options: Plugin Loaders and paths: Metadata: getAttrib($key) getAttribs() removeAttrib($key) clearAttribs() setAction($action) getAction() setMethod($method) getMethod() setName($name) getName() Elements: getElement($name) getElements() removeElement($name) clearElements() getValue($name) getValues() getUnfilteredValue($name) getUnfilteredValues() Sub forms: getSubForm($name) getSubForms() removeSubForm($name) clearSubForms() Display groups: getDisplayGroup($name) getDisplayGroups() removeDisplayGroup($name) clearDisplayGroups() Validation persistData() Rendering: getView() getDecorator($name) getDecorators() removeDecorator($name) clearDecorators() I18N: getTranslator() setDisableTranslator($flag) translatorIsDisabled() Configuration Zend_Form is fully configurable via setOptions() and setConfig() (or by passing options or a Zend_Config object to the constructor).
*****************************************************************
========================= CLASS #304 =============================
(4014) {714295} [714375]: Display groups and sub forms render in fieldsets by default.
(4104) {730597} [730729]: Zend_Form_Decorator_Fieldset Display groups and sub forms render their content within fieldsets by default.
*****************************************************************
========================= CLASS #305 =============================
(4113) {731823} [731888]: It can either append or prepend content passed to it.
(8724) {1451719} [1451756]: $items passed to it.
*****************************************************************
========================= CLASS #306 =============================
(4129) {734276} [734455]: You can do so with the following options and methods: optionalPrefix : set the text to prefix the label with when the element is optional.
(4131) {734593} [734697]: optionalSuffix : set the text to append the label with when the element is optional.
(4133) {734835} [734939]: requiredPrefix : set the text to prefix the label with when the element is required.
(4135) {735077} [735181]: requiredSuffix : set the text to append the label with when the element is required.
*****************************************************************
========================= CLASS #307 =============================
(4130) {734456} [734579]: Use the setOptionalPrefix() and getOptionalPrefix() accessors to manipulate it.
(4132) {734698} [734821]: Use the setOptionalSuffix() and getOptionalSuffix() accessors to manipulate it.
(4134) {734940} [735063]: Use the setRequiredPrefix() and getRequiredPrefix() accessors to manipulate it.
(4136) {735182} [735305]: Use the setRequiredSuffix() and getRequiredSuffix() accessors to manipulate it.
*****************************************************************
========================= CLASS #308 =============================
(4225) {750858} [751073]: Google Provisioning provides the ability to create, retrieve, update, and delete user accounts, nicknames, and email lists on a Google Apps hosted domain.
(4525) {800877} [801032]: Specifically, this API allows administrators the ability to create, retrieve, update, and delete user accounts, nicknames, and email lists.
*****************************************************************
========================= CLASS #309 =============================
(4235) {752405} [752511]: These also include other classes such as Zend_Gdata, Zend_Gdata_Spreadsheets, etc.
(4248) {754382} [754503]: These also include other classes such as Zend_Gdata_Entry, and Zend_Gdata_Spreadsheets_ListEntry.
*****************************************************************
========================= CLASS #310 =============================
(4276) {760123} [760248]: The single optional parameter to the Zend_Gdata_App constructor is an instance of Zend_Http_Client .
(4479) {793395} [793460]: The optional fourth parameter is an instance of Zend_Http_Client.
*****************************************************************
========================= CLASS #311 =============================
(4287) {761584} [761623]: The value of the parameter is a string.
(4296) {762679} [762740]: The value of the parameter is an integer.
*****************************************************************
========================= CLASS #312 =============================
(4288) {761662} [761732]: Set this parameter with the setQuery() function.
(4294) {762482} [762550]: Set this parameter with the setAlt() function.
(4298) {762871} [762946]: Set this parameter with the setMaxResults() function.
(4301) {763200} [763275]: Set this parameter with the setStartIndex() function.
*****************************************************************
========================= CLASS #313 =============================
(4328) {767407} [767580]: To post entries, you must be using an authenticated Zend_Http_Client that you created using the Zend_Gdata_AuthSub or Zend_Gdata_ClientLogin classes.
(4332) {768023} [768198]: To delete entries, you must be using an authenticated Zend_Http_Client that you created using the Zend_Gdata_AuthSub or Zend_Gdata_ClientLogin classes.
*****************************************************************
========================= CLASS #314 =============================
(4335) {768599} [768939]: The Google documentation says the ClientLogin mechanism is appropriate for &quot;installed applications&quot; whereas the AuthSub mechanism is for &quot;web applications.&quot; The difference is that AuthSub requires interaction from the user, and a browser interface that can react to redirection requests.
(4471) {791947} [792287]: The Google documentation says the ClientLogin mechanism is appropriate for &quot;installed applications&quot; whereas the AuthSub mechanism is for &quot;web applications.&quot; The difference is that AuthSub requires interaction from the user, and a browser interface that can react to redirection requests.
*****************************************************************
========================= CLASS #315 =============================
(4336) {768941} [769095]: The ClientLogin solution uses PHP code to supply the account credentials; the user is not required to enter her credentials interactively.
(4472) {792289} [792443]: The ClientLogin solution uses PHP code to supply the account credentials; the user is not required to enter her credentials interactively.
*****************************************************************
========================= CLASS #316 =============================
(4348) {770841} [771067]: Below is an example of PHP code for a web application to acquire authentication to use the Google Calendar service and create a Zend_Gdata client object using that authenticated Http Client.
(4487) {794481} [794712]: Below is an example of PHP code for a web application to acquire authentication to use the Google Calendar service and create a Zend_Gdata client object using that authenticated Zend_Http_Client.
*****************************************************************
========================= CLASS #317 =============================
(4357) {772313} [772523]: Connecting To The Calendar Service The Google Calendar API, like all GData APIs, is based off of the Atom Publishing Protoco (APP), an XML based format for managing web-based resources.
(4611) {817108} [817296]: Connect To The Base Service The Google Base API, like all GData APIs, is based off of the Atom Publishing Protocol (APP), an XML based format for managing web-based resources.
(4651) {824152} [824356]: Connecting To The Service The Picasa Web Albums API, like all GData APIs, is based off of the Atom Publishing Protocol (APP), an XML based format for managing web-based resources.
*****************************************************************
========================= CLASS #318 =============================
(4358) {772524} [772676]: Traffic between a client and the Google Calendar servers occurs over HTTP and allows for both authenticated and unauthenticated connections.
(4612) {817297} [817433]: Traffic between a client and the Google Base servers occurs over HTTP and allows for both authenticated and unauthenticated connections.
(4652) {824357} [824493]: Traffic between a client and the servers occurs over HTTP and allows for both authenticated and unauthenticated connections.
*****************************************************************
========================= CLASS #319 =============================
(4359) {772699} [772767]: Before any transactions can occur, this connection needs to be made.
(4613) {817456} [817524]: Before any transactions can occur, this connection needs to be made.
(4653) {824516} [824584]: Before any transactions can occur, this connection needs to be made.
*****************************************************************
========================= CLASS #320 =============================
(4360) {772768} [772962]: Creating a connection to the calendar servers involves two steps: creating an HTTP client and binding a Zend_Gdata_Calendar service instance to that client.
(4614) {817525} [817688]: Creating a connection to the base servers involves two steps: creating an HTTP client and binding a Zend_Gdata_Gbase service instance to that client.
(4654) {824585} [824775]: Creating a connection to the Picasa servers involves two steps: creating an HTTP client and binding a Zend_Gdata_Photos service instance to that client.
*****************************************************************
========================= CLASS #321 =============================
(4361) {772972} [773084]: Authentication The Google Calendar API allows access to both public and private calendar feeds.
(4615) {817698} [817802]: Authentication The Google Base API allows access to both public and private base feeds.
(4655) {824785} [824892]: Authentication The Google Picasa API allows access to both public and private photo feeds.
*****************************************************************
========================= CLASS #322 =============================
(4362) {773085} [773195]: Public feeds do not require authentication, but are read-only and offer reduced functionality.
(4616) {817803} [817897]: Public feeds do not require authentication, but are read-only and offer reduced functionality.
(4656) {824893} [825003]: Public feeds do not require authentication, but are read-only and offer reduced functionality.
*****************************************************************
========================= CLASS #323 =============================
(4363) {773196} [773346]: Private feeds offers the most complete functionality but requires an authenticated connection to the calendar servers.
(4617) {817898} [818012]: Private feeds offers the most complete functionality but requires an authenticated connection to the base servers.
(4657) {825004} [825152]: Private feeds offers the most complete functionality but requires an authenticated connection to the Picasa servers.
*****************************************************************
========================= CLASS #324 =============================
(4364) {773347} [773571]: There are three authentication schemes that are supported by Google Calendar: ClientAuth provides direct username/password authentication to the calendar servers.
(4618) {818013} [818205]: There are three authentication schemes that are supported by Google Base: ClientAuth provides direct username/password authentication to the base servers.
(4658) {825153} [825374]: There are three authentication schemes that are supported by Google Picasa : ClientAuth provides direct username/password authentication to the Picasa servers.
*****************************************************************
========================= CLASS #325 =============================
(4365) {773572} [773819]: Since this scheme requires that users provide your application with their password, this authentication is only recommended when other authentication schemes are insufficient.
(4619) {818206} [818381]: Since this scheme requires that users provide your application with their password, this authentication is only recommended when other authentication schemes are insufficient.
(4659) {825375} [825622]: Since this scheme requires that users provide your application with their password, this authentication is only recommended when other authentication schemes are insufficient.
*****************************************************************
========================= CLASS #326 =============================
(4366) {773841} [773970]: AuthSub allows authentication to the calendar servers via a Google proxy server.
(4620) {818403} [818504]: AuthSub allows authentication to the base servers via a Google proxy server.
(4660) {825644} [825771]: AuthSub allows authentication to the Picasa servers via a Google proxy server.
*****************************************************************
========================= CLASS #327 =============================
(4367) {773971} [774187]: This provides the same level of convenience as ClientAuth but without the security risk, making this an ideal choice for web-based applications.
(4621) {818505} [818649]: This provides the same level of convenience as ClientAuth but without the security risk, making this an ideal choice for web-based applications.
(4661) {825772} [825988]: This provides the same level of convenience as ClientAuth but without the security risk, making this an ideal choice for web-based applications.
*****************************************************************
========================= CLASS #328 =============================
(4369) {774396} [774719]: This is the simplest authentication scheme to implement, but requires that users manually retrieve their secure URL before they can authenticate, doesn&#39;t provide access to calendar lists, and is limited to read-only access.
(6165) {1069728} [1069792]: It doesn&#39;t provide any additional functionality.
*****************************************************************
========================= CLASS #329 =============================
(4370) {774758} [774869]: The Zend_Gdata library provides support for all three authentication schemes.
(4622) {818688} [818783]: The Zend_Gdata library provides support for all three authentication schemes.
(4662) {826027} [826133]: The Zend_Gdata library provides support for both authentication schemes.
*****************************************************************
========================= CLASS #330 =============================
(4371) {774886} [775072]: The rest of this chapter will assume that you are familiar the authentication schemes available and how to create an appropriate authenticated connection.
(4623) {818784} [818938]: The rest of this chapter will assume that you are familiar the authentication schemes available and how to create an appropriate authenticated connection.
(4663) {826150} [826336]: The rest of this chapter will assume that you are familiar the authentication schemes available and how to create an appropriate authenticated connection.
*****************************************************************
========================= CLASS #331 =============================
(4372) {775073} [775300]: For more information, please see section the Authentication section of this manual or the Authentication Overview in the Google Data API Developer&#39;s Guide .
(4624) {818939} [818982]: For more information, please see section .
(4625) {818999} [819093]: or the Authentication Overview in the Google Data API Developer&#39;s Guide .
(4664) {826337} [826564]: For more information, please see section the Authentication section of this manual or the Authentication Overview in the Google Data API Developer&#39;s Guide .
*****************************************************************
========================= CLASS #332 =============================
(4373) {775314} [775480]: Creating A Service Instance In order to interact with Google Calendar, this library provides the Zend_Gdata_Calendar service class.
(4626) {819107} [819280]: Create A Service Instance In order to interact with Google Base, this library provides the Zend_Gdata_Gbase service class.
(4665) {826578} [826738]: Creating A Service Instance In order to interact with the servers, this library provides the Zend_Gdata_Photos service class.
*****************************************************************
========================= CLASS #333 =============================
(4374) {775481} [775675]: This class provides a common interface to the Google Data and Atom Publishing Protocol models and assists in marshaling requests to and from the calendar servers.
(4627) {819281} [819439]: This class provides a common interface to the Google Data and Atom Publishing Protocol models and assists in marshaling requests to and from the base servers.
(4666) {826739} [826924]: This class provides a common interface to the Google Data and Atom Publishing Protocol models and assists in marshaling requests to and from the servers.
*****************************************************************
========================= CLASS #334 =============================
(4375) {775706} [775829]: Once deciding on an authentication scheme, the next step is to create an instance of Zend_Gdata_Calendar .
(4628) {819470} [819607]: Once deciding on an authentication scheme, the next step is to create an instance of Zend_Gdata_Gbase .
(4667) {826955} [827076]: Once deciding on an authentication scheme, the next step is to create an instance of Zend_Gdata_Photos .
*****************************************************************
========================= CLASS #335 =============================
(4376) {775830} [775929]: The class constructor takes an instance of Zend_Http_Client as a single argument.
(4629) {819608} [819715]: This class takes in an instance of Zend_Http_Client as a single argument.
(4668) {827077} [827176]: The class constructor takes an instance of Zend_Http_Client as a single argument.
*****************************************************************
========================= CLASS #336 =============================
(4377) {775930} [776105]: This provides an interface for AuthSub and ClientAuth authentication, as both of these require creation of a special authenticated HTTP client.
(4630) {819716} [819851]: This provides an interface for AuthSub and ClientAuth authentication, as both of these creation of a special authenticated HTTP client.
(4669) {827177} [827352]: This provides an interface for AuthSub and ClientAuth authentication, as both of these require creation of a special authenticated HTTP client.
*****************************************************************
========================= CLASS #337 =============================
(4378) {776106} [776232]: If no arguments are provided, an unauthenticated instance of Zend_Http_Client will be automatically created.
(4631) {819852} [819994]: If no arguments are provided, an unauthenticated instance of Zend_Http_Client will be automatically created.
(4670) {827353} [827479]: If no arguments are provided, an unauthenticated instance of Zend_Http_Client will be automatically created.
*****************************************************************
========================= CLASS #338 =============================
(4379) {776246} [776751]: The example below shows how to create a Calendar service class using ClientAuth authentication: A Calendar service using AuthSub can be created in a similar, though slightly more lengthy fashion: Finally, an unauthenticated server can be created for use with either public feeds or MagicCookie authentication: Note that MagicCookie authentication is not supplied with the HTTP connection, but is instead specified along with the desired visibility when submitting queries.
(4632) {820025} [820402]: The example below shows how to create a Base service class using ClientAuth authentication: A Base service using AuthSub can be created in a similar, though slightly more lengthy fashion: Finally, an unauthenticated server can be created for use with snippets feeds: Retrieve Items You can query customer items feed or snippets feed to retrieve items.
(4671) {827493} [827888]: The example below shows how to create a service class using ClientAuth authentication: A service instance using AuthSub can be created in a similar, though slightly more lengthy fashion: Finally, an unauthenticated server can be created for use with public feeds: Understanding and Constructing Queries The primary method to request data from the service is by constructing a query.
*****************************************************************
========================= CLASS #339 =============================
(4391) {778377} [778550]: Queries When retrieving events using the Calendar API, specially constructed query URLs are used to describe what events should be returned.
(4635) {820681} [820809]: When retrieveing items using the Base API, specially constructed query URLs are used to describe what events should be returned.
*****************************************************************
========================= CLASS #340 =============================
(4392) {778551} [778718]: The Zend_Gdata_Calendar_EventQuery class simplifies this task by automatically constructing a query URL based on provided parameters.
(4636) {820810} [820978]: The Zend_Gdata_Gbase_ItemQuery and Zend_Gdata_Gbase_SnippetQuery classes simplify this task by automatically constructing a query URL based on provided parameters.
*****************************************************************
========================= CLASS #341 =============================
(4394) {778866} [779106]: However, there are three parameters that are worth special attention: User is used to specify the user whose calendar is being searched for, and is specified as an email address.
(4675) {828449} [828560]: Photo is used to specify the photo which is being searched for, and is specified as an id.
*****************************************************************
========================= CLASS #342 =============================
(4395) {779107} [779308]: If no user is provided, &quot;default&quot; will be used instead to indicate the currently authenticated user (if authenticated).
(4673) {828108} [828257]: If no user is provided, &quot;default&quot; will be used instead to indicate the currently authenticated user (if authenticated).
*****************************************************************
========================= CLASS #343 =============================
(4406) {781264} [781434]: Refer to the Zend Framework API Documentation and the Calendar Protocol Reference for a complete list.
(4430) {785136} [785311]: For a complete list of event attributes, refer to the Zend Framework API Documentation and the Calendar Protocol Reference .
*****************************************************************
========================= CLASS #344 =============================
(4484) {794046} [794172]: It is only necessary when logging in after receiving a CAPTCHA challenge from a previous login attempt.
(4486) {794332} [794458]: It is only necessary when logging in after receiving a CAPTCHA challenge from a previous login attempt.
*****************************************************************
========================= CLASS #345 =============================
(4491) {795349} [795482]: Your client application can request a list of a user&#39;s documents, and query the content in an existing document.
(4723) {835208} [835419]: Your client application can request a list of a user&#39;s spreadsheets, edit or delete content in an existing Spreadsheets worksheet, and query the content in an existing Spreadsheets worksheet.
*****************************************************************
========================= CLASS #346 =============================
(4493) {795634} [795822]: Get a List of Documents You can get a list of the Google Documents for a particular user by using the getDocumentListFeed method of the docs service.
(4726) {835737} [835927]: Get a List of Spreadsheets You can get a list of spreadsheets for a particular user by using the getSpreadsheetFeed method of the Spreadsheets service.
*****************************************************************
========================= CLASS #347 =============================
(4494) {795824} [795998]: The service will return a Zend_Gdata_Docs_DocumentListFeed object containing a list of documents associated with the authenticated user.
(4727) {835929} [836113]: The service will return a Zend_Gdata_Spreadsheets_SpreadsheetFeed object containing a list of spreadsheets associated with the authenticated user.
*****************************************************************
========================= CLASS #348 =============================
(4495) {796017} [796122]: The resulting Zend_Gdata_Docs_DocumentListFeed object represents the response from the server.
(4731) {836640} [836758]: The resulting Zend_Gdata_Spreadsheets_WorksheetFeed object feed represents the response from the server.
*****************************************************************
========================= CLASS #349 =============================
(4496) {796123} [796295]: This feed contains a list of Zend_Gdata_Docs_DocumentListEntry objects ( $feed-&gt;entries ), each of which represents a single Google Document.
(4732) {836759} [836910]: Among other things, this feed contains a list of $feed-&gt;entries ), each of which represents a single worksheet.
(4747) {838926} [839149]: Among other things, this feed contains an array of Zend_Gdata_Spreadsheets_ListEntry objects ( $listFeed-&gt;entries ), each of which represents a single row in a worksheet.
(4766) {842969} [843192]: Among other things, this feed contains an array of Zend_Gdata_Spreadsheets_CellEntry objects ( $cellFeed&gt;entries ), each of which represents a single cell in a worksheet.
*****************************************************************
========================= CLASS #350 =============================
(4529) {801332} [801501]: For more information on the Google Apps Provisioning API, including instructions for enabling API access, refer to the Provisioning API V2.0 Reference .
(4648) {823748} [823896]: For more information on the API, including instructions for enabling API access, refer to the Picasa Web Albums Data API Overview .
*****************************************************************
========================= CLASS #351 =============================
(4543) {803973} [804125]: Retrieving a user account Individual user accounts can be retrieved by calling the retrieveUser() convenience method.
(4571) {809001} [809138]: Retrieving a nickname Nicknames can be retrieved by calling the retrieveNickname() convenience method.
*****************************************************************
========================= CLASS #352 =============================
(4545) {804223} [804524]: Users can also be retrieved by creating an instance of Zend_Gdata_Gapps_UserQuery, setting its username property to equal the username of the user that is to be retrieved, and calling getUserEntry() on a service object with that query.
(4573) {809233} [809545]: Individual nicknames can also be retrieved by creating an instance of Zend_Gdata_Gapps_NicknameQuery, setting its nickname property to equal the nickname that is to be retrieved, and calling getNicknameEntry() on a service object with that query.
*****************************************************************
========================= CLASS #353 =============================
(4546) {804555} [804729]: If the specified user cannot be located a ServiceException will be thrown with an error code of Zend_Gdata_Gapps_Error::ENTITY_DOES_NOT_EXIST.
(4574) {809576} [809763]: As with users, if no corresponding nickname is found a ServiceException will be thrown with an error code of Zend_Gdata_Gapps_Error::ENTITY_DOES_NOT_EXIST.
*****************************************************************
========================= CLASS #354 =============================
(4557) {806081} [806340]: Forcing a user to change their password A user can be forced to change their password at their next login by setting the login-&gt;changePasswordAtNextLogin property to true .
(4558) {806379} [806522]: Similarly, this can be undone by setting the login-&gt;changePasswordAtNextLogin property to false .
*****************************************************************
========================= CLASS #355 =============================
(4560) {806767} [807174]: Accounts can be suspended or restored by using the suspendUser() and restoreUser() convenience methods: &lt;?php $gdata-&gt;suspendUser(&#39;foo&#39;); $gdata-&gt;restoreUser(&#39;foo&#39;); ?&gt; Alternatively, you can set the UserEntry&#39;s login-&gt;suspended property to true .
(4566) {808118} [808263]: &lt;?php $gdata-&gt;deleteUser(&#39;foo&#39;); ?&gt; Interacting with nicknames Nicknames serve as email aliases for existing users.
*****************************************************************
========================= CLASS #356 =============================
(4564) {807769} [807951]: Deleting user accounts Deleting a user account to which you already hold a UserEntry is a simple as calling delete() on that entry.
(4581) {810890} [811073]: Deleting a nickname Deleting a nickname to which you already hold a NicknameEntry for is a simple as calling delete() on that entry.
*****************************************************************
========================= CLASS #357 =============================
(4578) {810200} [810427]: Alternatively, create a new Zend_Gdata_Gapps_NicknameQuery, set its username property to the desired user, and submit the query by calling getNicknameFeed() on a service object.
(4588) {812676} [812915]: Alternatively, create a new Zend_Gdata_Gapps_EmailListQuery, set its recipient property to the desired email address, and submit the query by calling getEmailListFeed() on a service object.
*****************************************************************
========================= CLASS #358 =============================
(4580) {810781} [810876]: Alternatively, call getNicknameFeed() on a service object with no arguments.
(4591) {813273} [813368]: Alternatively, call getEmailListFeed() on a service object with no arguments.
*****************************************************************
========================= CLASS #359 =============================
(4587) {812224} [812645]: Retrieving all email lists to which a recipient is subscribed To retrieve all email lists to which a particular recipient is subscribed, call the retrieveEmailLists() convenience method: This will create a Zend_Gdata_Gapps_EmailListFeed object which holds each email list associated with the specified recipient.
(4590) {813127} [813242]: This will create a Zend_Gdata_Gapps_EmailListFeed object which holds each email list on the domain.
*****************************************************************
========================= CLASS #360 =============================
(4637) {820993} [821308]: Query Customer Items Feed To execute a query against the customer items feed, invoke newItemQuery() and getGbaseItemFeed() methods: A full list of these paremeters is available at the Query parameters section of the Customer Items Feed documentation.
(4638) {821326} [821636]: Query Snippets Feed To execute a query against the public snippets feed, invoke newSnippetQuery() and getGbaseSnippetFeed() methods: A full list of these paremeters is available at the Query parameters section of the Snippets Feed documentation.
*****************************************************************
========================= CLASS #361 =============================
(4672) {827890} [828087]: There are query classes for each of the following types: User is used to specify the user whose data is being searched for, and is specified as a username.
(4693) {830262} [830335]: User sets the user whose data is being searched for.
*****************************************************************
========================= CLASS #362 =============================
(4677) {828800} [828958]: They are as follows: Projection sets the format of the data returned in the feed, as either &quot;api&quot; or &quot;base&quot;.
(4678) {828960} [829017]: Normally, &quot;api&quot; is desired.
(4679) {829019} [829050]: The default is &quot;api&quot;.
(4681) {829185} [829217]: The default is &quot;feed&quot;.
(6215) {1076290} [1076383]: For example, &quot;Europe/Paris&quot; or &quot;America/Los_Angeles&quot;.
(8481) {1410777} [1410812]: For example, &quot;0.9.0beta&quot;.
*****************************************************************
========================= CLASS #363 =============================
(4688) {829790} [829886]: When kind is specified, only entries that match this value will be returned.
(5713) {1003203} [1003236]: A integer value will be returned.
*****************************************************************
========================= CLASS #364 =============================
(4695) {830390} [830463]: AlbumId sets the id of the album being searched for.
(4700) {830760} [830837]: AlbumName sets the name of the album being searched for.
(4705) {831138} [831211]: PhotoId sets the id of the photo being searched for.
*****************************************************************
========================= CLASS #365 =============================
(4696) {830465} [830518]: This element only applies to album and photo queries.
(4701) {830839} [830916]: This element only applies to the album and photo queries.
(4706) {831213} [831256]: This element only applies to photo queries.
*****************************************************************
========================= CLASS #366 =============================
(4697) {830539} [830628]: In the case of photo queries, this specifies the album that contains the requested photo.
(4702) {830918} [831007]: In the case of photo queries, this specifies the album that contains the requested photo.
*****************************************************************
========================= CLASS #367 =============================
(4698) {830630} [830711]: The album id is mutually exclusive with the album&#39;s name.
(4703) {831028} [831089]: The album name is mutually exclusive with the album&#39;s id.
*****************************************************************
========================= CLASS #368 =============================
(4699) {830713} [830742]: Setting one unsets the other.
(4704) {831091} [831120]: Setting one unsets the other.
*****************************************************************
========================= CLASS #369 =============================
(4715) {832900} [833076]: By setting a query to return a kind of &quot;comment&quot;, a feed request can return comments associated with a specific user, album, or photo.
(4717) {833289} [833425]: By setting a query to return a kind of &quot;tag&quot;, a feed request can return tags associated with a specific photo.
*****************************************************************
========================= CLASS #370 =============================
(4745) {838603} [838756]: Get a List-based Feed To retrieve a worksheet&#39;s list feed, use the getListFeed method of the Spreadsheets service.
(4764) {842646} [842799]: Get a Cell-based Feed To retrieve a worksheet&#39;s cell feed, use the getCellFeed method of the Spreadsheets service.
*****************************************************************
========================= CLASS #371 =============================
(4756) {841069} [841207]: The method returns a Zend_Gdata_Spreadsheets_SpreadsheetsEntry object which represents the inserted row.
(4761) {841898} [842035]: The method returns a Zend_Gdata_Spreadsheets_SpreadsheetsEntry object which represents the updated row.
*****************************************************************
========================= CLASS #372 =============================
(4792) {847297} [847379]: This example retrieves videos uploaded by the user &#39;liz&#39;.
(4794) {847550} [847633]: This example retrieves videos favorited by the user &#39;liz&#39;.
*****************************************************************
========================= CLASS #373 =============================
(4865) {861137} [861249]: Setting Custom Request Headers Setting custom headers can be done by using the setHeaders() method.
(7627) {1286142} [1286178]: by using the localSearch() method.
*****************************************************************
========================= CLASS #374 =============================
(4976) {880839} [880912]: $ret_as specifies the return type as described above.
(4982) {881441} [881495]: $ret_as specifies the return type as described above.
*****************************************************************
========================= CLASS #375 =============================
(4977) {880913} [880967]: If not specified, $ret_type defaults to COOKIE_OBJECT.
(4983) {881496} [881568]: If not specified, defaults to COOKIE_OBJECT.
(4985) {881820} [881867]: If not specified, defaults to the current time.
*****************************************************************
========================= CLASS #376 =============================
(5087) {901588} [901660]: Otherwise, the details of your implementation are up to you.
(5092) {902446} [902502]: Details of the implementation are up to you.
*****************************************************************
========================= CLASS #377 =============================
(5095) {902900} [903005]: As some examples: &#39;foo&#39; will be transformed to &#39;foo.phtml&#39;.
(5096) {903040} [903111]: &#39;FooBarBaz&#39; will be transformed to &#39;foo-bar-baz.phtml&#39;.
*****************************************************************
========================= CLASS #378 =============================
(5112) {905658} [905837]: The main goals of Zend_Layout are as follows: Automate selection and rendering of layouts when used with the Zend Framework MVC components.
(5117) {906457} [906507]: Allow usage without Zend Framework MVC components.
*****************************************************************
========================= CLASS #379 =============================
(5135) {908372} [908482]: helperClass : the action helper class to use when using Zend_Layout with the MVC components.
(5138) {908680} [908816]: pluginClass : the front controller plugin class to use when using Zend_Layout with the MVC components.
*****************************************************************
========================= CLASS #380 =============================
(5141) {908992} [909203]: inflector : the inflector to use when resolving layout names to layout view script paths; see the Zend_Layout inflector documentation for more details .
(6097) {1059401} [1059440]: See for more details.
*****************************************************************
========================= CLASS #381 =============================
(5187) {919382} [919671]: The permitted options are as follows: Zend_Ldap Options Name Description host The default hostname of LDAP server if not supplied to connect() (also may be used when trying to canonicalize usernames in bind() ).
(5188) {919697} [919790]: port Default port of LDAP server if not supplied to connect() .
*****************************************************************
========================= CLASS #382 =============================
(5254) {930967} [931036]: The method is a wrapper for the PHP function include() .
(5275) {933624} [933698]: This method is a wrapper for the PHP function is_readable() .
*****************************************************************
========================= CLASS #383 =============================
(5256) {931168} [931323]: Example of loadFile() method The $filename argument specifies the filename to load, which must not contain any path information.
(5273) {933462} [933575]: Example of isReadable() method The $filename argument specifies the filename to check.
*****************************************************************
========================= CLASS #384 =============================
(5308) {943048} [943238]: The option &#39; fix_date &#39; uses simple tests to determine if the day or month is not valid, and then applies heuristics to try and correct any detected problems.
(5316) {944876} [945054]: The option &#39; fix_date &#39; uses simple tests to determine if the day or month is not valid, and then applies heuristics to try and correct any detected problems.
*****************************************************************
========================= CLASS #385 =============================
(5337) {948371} [948554]: setLocale Getting the language and region Use getLanguage() to obtain a string containing the two character language code from the string locale identifier.
(5338) {948555} [948679]: Use getRegion() to obtain a string containing the two character region code from the string locale identifier.
*****************************************************************
========================= CLASS #386 =============================
(5349) {949744} [949852]: The language part of the locale is returned as key and the translation as value.
(5351) {949996} [950083]: The script is returned as key and the translation as value.
*****************************************************************
========================= CLASS #387 =============================
(5350) {949853} [949995]: For your convinience use the getLanguageTranslationList() method Script Returns a localized list of all scripts.
(5352) {950084} [950231]: For your convinience use the getScriptTranslationList() method Territory Returns a localized list of all territories.
*****************************************************************
========================= CLASS #388 =============================
(5353) {950232} [950312]: This contains countries, continents and territories.
(5460) {966020} [966098]: This can be countries, continents and territories.
*****************************************************************
========================= CLASS #389 =============================
(5354) {950313} [950405]: To get only territories and continents use &#39;1&#39; as value.
(5355) {950406} [950453]: To get only countries use &#39;2&#39; as value.
(5942) {1037798} [1037838]: The standard precision is &#39; 2 &#39;.
(5983) {1041935} [1041975]: The standard precision is &#39; 2 &#39;.
*****************************************************************
========================= CLASS #390 =============================
(5360) {950957} [951039]: When you omit the value you will get a list with both.
(5369) {951851} [951941]: When you omit the value you will get a list all both returned.
*****************************************************************
========================= CLASS #391 =============================
(5363) {951235} [951312]: This keys are generic values used in translation.
(5465) {966487} [966564]: This keys are generic values used in translation.
*****************************************************************
========================= CLASS #392 =============================
(5364) {951313} [951365]: These are normally calendar, collation and currency.
(5466) {966565} [966617]: These are normally calendar, collation and currency.
*****************************************************************
========================= CLASS #393 =============================
(5367) {951619} [951735]: When you use &#39;collation&#39; as value you will get all types of collations returned.
(5368) {951736} [951850]: When you use &#39;calendar&#39; as value you will get all types of calendars returned.
*****************************************************************
========================= CLASS #394 =============================
(5372) {952394} [952501]: There are several different represenations which are all returned as sub array.
(5380) {953548} [953655]: There are several different represenations which are all returned as sub array.
(5389) {954847} [954954]: There are several different represenations which are all returned as sub array.
*****************************************************************
========================= CLASS #395 =============================
(5373) {952502} [952633]: If you omit the value you will get a list of all months from the &#39;gregorian&#39; calendar returned.
(5381) {953656} [953785]: If you omit the value you will get a list of all days from the &#39;gregorian&#39; calendar returned.
(5390) {954955} [955088]: If you omit the value you will get a list of all quarters from the &#39;gregorian&#39; calendar returned.
(5395) {955897} [956026]: If you omit the value you will get a list of all eras from the &#39;gregorian&#39; calendar returned.
(5468) {966895} [966973]: For most locales this will be &#39;gregorian&#39;.
(5470) {967154} [967222]: If you omit the value the &#39;gregorian&#39; calendar will be used.
(5472) {967402} [967470]: If you omit the value the &#39;gregorian&#39; calendar will be used.
(5478) {968070} [968138]: If you omit the value the &#39;gregorian&#39; calendar will be used.
(5480) {968314} [968382]: If you omit the value the &#39;gregorian&#39; calendar will be used.
(5489) {969506} [969607]: If you omit the value then the &#39;gregorian&#39; calendar will be used.
(5492) {969845} [969946]: If you omit the value then the &#39;gregorian&#39; calendar will be used.
(5497) {970513} [970581]: If you omit the value the &#39;gregorian&#39; calendar will be used.
(5499) {970747} [970881]: If you omit the value then the &#39;gregorian&#39; calendar will be used with the &#39;medium&#39; format.
(5500) {970882} [971004]: If you give a string then the &#39;gregorian&#39; calendar will be used with the given format.
(5502) {971238} [971306]: If you omit the value the &#39;gregorian&#39; calendar will be used.
(5504) {971472} [971606]: If you omit the value then the &#39;gregorian&#39; calendar will be used with the &#39;medium&#39; format.
(5505) {971607} [971729]: If you give a string then the &#39;gregorian&#39; calendar will be used with the given format.
(5507) {972029} [972125]: If you omit the value the &#39;gregorian&#39; calendar will be used.
(5510) {972455} [972542]: In this case the &#39;gregorian&#39; calendar will be used.
(5514) {973099} [973146]: This will use the &#39;gregorian&#39; calendar.
*****************************************************************
========================= CLASS #396 =============================
(5374) {952662} [952783]: You can give any known calendar as value to get a list of months from this calendar returned.
(5382) {953814} [953933]: You can give any known calendar as value to get a list of days from this calendar returned.
*****************************************************************
========================= CLASS #397 =============================
(5375) {952784} [952909]: Use Zend_Date for simplicity Month Returns a localized list of all month names for this locale.
(5383) {953934} [954055]: Use Zend_Date for simplicity Day Returns a localized list of all day names for this locale.
(5402) {957149} [957246]: Use Zend_Date for simplicity Time Returns a localized list of all time formats for this locale.
(5406) {957618} [957730]: Use Zend_Date for simplicity DateTime Returns a localized list of all known date-time formats for this locale.
(5473) {967471} [967570]: Use Zend_Date for simplicity Month Returns a translation for a month.
(5481) {968383} [968478]: Use Zend_Date for simplicity Day Returns a translation for a day.
*****************************************************************
========================= CLASS #398 =============================
(5376) {952910} [953138]: If you omit the value you will get the normally used gregorian full name of the months where each month number is used as key and the translated month is returned as value.
(5384) {954056} [954319]: If you omit the value you will get the normally used gregorian full name of the days where the english day abbreviation is used as key and the translated day is returned as value.
(5392) {955311} [955545]: If you omit the value you will get the normally used gregorian full name of the quarters where each quarter number is used as key and the translated quarter is returned as value.
(5397) {956237} [956459]: If you omit the value you will get the normally used gregorian full name of the eras where each era number is used as key and the translated era is returned as value.
(5415) {959190} [959279]: The currency is used as key and the translated name as value.
(5419) {959643} [959723]: The currency is used as key and the symbol as value.
(5422) {960102} [960192]: The currency is used as key and the fraction as integer value.
(5424) {960320} [960410]: The currency is used as key and the rounding as integer value.
*****************************************************************
========================= CLASS #399 =============================
(5377) {953139} [953256]: You can get the months for different calendars and formats if you give an array as value.
(5385) {954320} [954435]: You can get the days for different calendars and formats if you give an array as value.
(5393) {955546} [955693]: You can get the quarters for different calendars and formats if you give an array as value.
(5398) {956460} [956603]: You can get the eras for different calendars and formats if you give an array as value.
*****************************************************************
========================= CLASS #400 =============================
(5378) {953285} [953421]: The first array entry has to be the calendar, the second the used context and the third the width to return.
(5386) {954436} [954572]: The first array entry has to be the calendar, the second the used context and the third the width to return.
(5394) {955694} [955896]: The first array entry has to be the calendar, the second the used context and the third the width to return Eras Returns a list of all era representations within this locale.
*****************************************************************
========================= CLASS #401 =============================
(5379) {953422} [953547]: Use Zend_Date for simplicity Days Returns a list of all day representations within this locale.
(5388) {954741} [954846]: Use Zend_Date for simplicity Quarters Returns a list of all quarter representations within this locale.
*****************************************************************
========================= CLASS #402 =============================
(5391) {955117} [955310]: You can give any known calendar as value to get a list of quarters from this calendar returned Quarter Returns a localized list of all quarter names for this locale.
(5396) {956055} [956236]: You can give any known calendar as value to get a list of eras from this calendar returned Era Returns a localized list of all era names for this locale.
*****************************************************************
========================= CLASS #403 =============================
(5400) {956779} [956996]: The name of the dateformat is used as key and the format itself as value.If you omit the value you will get the date formats for the gregorian calendar returned.
(5403) {957247} [957348]: The name of the timeformat is used as key and the format itself as value.
(5404) {957349} [957465]: If you omit the value you will get the time formats for the gregorian calendar returned.
(5407) {957731} [957838]: The name of the date-time format is used as key and the format itself as value.
(5408) {957839} [957960]: If you omit the value you will get the date-time formats for the gregorian calendar returned.
(5411) {958367} [958476]: If you omit the value you will get this list for the gregorian calendar returned.
(5413) {958821} [958930]: If you omit the value you will get this list for the gregorian calendar returned.
*****************************************************************
========================= CLASS #404 =============================
(5401) {956997} [957120]: You can get the date formats for different calendars if you give the wished calendar as string.
(5405) {957466} [957589]: You can get the time formats for different calendars if you give the wished calendar as string.
(5409) {957989} [958117]: You can get the date-time formats for different calendars if you give the wished calendar as string.
*****************************************************************
========================= CLASS #405 =============================
(5410) {958118} [958366]: Use Zend_Date for simplicity Field Returns a localized list of date fields which can be used to display calendars or date strings like &#39;month&#39; or &#39;year&#39; in a wished language.
(5508) {972126} [972366]: Use Zend_Date for simplicity Field Returns a translated date field which can be used to display calendars or date strings like &#39;month&#39; or &#39;year&#39; in a wished language.
*****************************************************************
========================= CLASS #406 =============================
(5412) {958477} [958792]: You can get the list for different calendars if you give the wished calendar as string Relative Returns a localized list of relative dates which can be used to display textual relative dates like &#39;yesterday&#39; or &#39;tomorrow&#39; in a wished language.
(5414) {958931} [959189]: You can get the list for different calendars if you give the wished calendar as string Symbols Returns a localized list of characters used for number representations NameToCurrency Returns a localized list of names for currencies.
*****************************************************************
========================= CLASS #407 =============================
(5420) {959724} [959921]: Use Zend_Currency for simplicity Question Returns a list of localized strings for acceptance (&#39;yes&#39;) and negotation (&#39;no&#39;).
(5522) {974336} [974524]: Use Zend_Currency for simplicity Question Returns a localized string for acceptance (&#39;yes&#39;) and negotation (&#39;no&#39;).
*****************************************************************
========================= CLASS #408 =============================
(5421) {959922} [960101]: Use Zend_Locale&#39;s getQuestion method for simplicity CurrencyFraction Returns a list of fractions for currency values.
(5524) {974648} [974828]: Use Zend_Locale&#39;s getQuestion method for simplicity CurrencyFraction Returns the fraction to use for a given currency.
*****************************************************************
========================= CLASS #409 =============================
(5426) {960592} [960736]: The ISO3166 value (&#39;region&#39;) is used as array key and the ISO4217 value (&#39;currency&#39;) as array value.
(5428) {960870} [961014]: The ISO4217 value (&#39;currency&#39;) is used as array key and the ISO3166 value (&#39;region&#39;) as array value.
(5431) {961352} [961502]: The ISO territory code (&#39;territory&#39;) is used as array key and the ISO3166 value (&#39;region&#39;) as array value.
(5433) {961744} [961893]: The ISO3166 code (&#39;region&#39;) is used as array key and the ISO territory code (&#39;territory&#39;) as array value.
(5435) {962097} [962199]: The language code is used as array key and the script code as array value.
(5437) {962386} [962488]: The script code is used as array key and the language code as array value.
(5439) {962684} [962787]: The country code is used as array key and the language code as array value.
(5441) {963034} [963109]: The country code is used as array key and the language code as array value.
*****************************************************************
========================= CLASS #410 =============================
(5427) {960737} [960869]: Use Zend_Currency for simplicity RegionToCurrency Returns a list of regions where a currency is used .
(5531) {975430} [975555]: Use Zend_Currency for simplicity RegionToCurrency Returns the regions where a currency is used.
*****************************************************************
========================= CLASS #411 =============================
(5429) {961015} [961132]: When a currency is used in several regions these regions are seperated with a whitespace.
(5533) {975665} [975794]: When a currency is used in multiple regions, these regions are seperated with a whitespace character.
*****************************************************************
========================= CLASS #412 =============================
(5445) {963729} [963922]: The ISO timezone is used as array key and the territory code as array value TimezoneToTerritory Returns a list of timezones and the related region or territory code.
(5448) {964413} [964586]: The ISO timezone is used as array key and the translated city as array value TimezoneToCity Returns a list of timezones for localized city names.
*****************************************************************
========================= CLASS #413 =============================
(5450) {964813} [964927]: It returns always a string but it accepts some different types than the getTranslationList() method.
(5454) {965215} [965267]: This differs from the getTranslationList() method.
*****************************************************************
========================= CLASS #414 =============================
(5456) {965491} [965593]: To select the wished translation you must give the language code as value.
(5458) {965734} [965834]: To select the wished translation you must give the script code as value.
(5461) {966099} [966198]: To select the wished variant you must give the territory code as value.
*****************************************************************
========================= CLASS #415 =============================
(5457) {965594} [965733]: For your convinience use the getLanguageTranslation($value) method Script Returns a translation for a script.
(5462) {966199} [966295]: For your convinience use the getCountryTranslation($value) method.
(5463) {966296} [966347]: Variant Returns a translation for a script variant.
*****************************************************************
========================= CLASS #416 =============================
(5469) {966974} [967153]: Use Zend_Date for simplicity MonthContext Returns the default context for months which is used within the given calendar.
(5471) {967223} [967401]: Use Zend_Date for simplicity DefaultMonth Returns the default format for months which is used within the given calendar.
(5479) {968139} [968313]: Use Zend_Date for simplicity DefaultDay Returns the default format for days which is used within the given calendar.
*****************************************************************
========================= CLASS #417 =============================
(5476) {967689} [967890]: If you want to receive data for other calendars, contexts or formats, then you must give an array instead of an integer with the expected values.
(5483) {968614} [968814]: If you want to receive data for other calendars, contexts or format, then you must give an array instead of an integer with the expected values.
(5486) {969064} [969265]: If you want to receive data for other calendars, contexts or formats, then you must give an array instead of an integer with the expected values.
(5488) {969392} [969505]: If you want to receive data for other calendars an string with the expected calendar.
(5491) {969731} [969844]: If you want to receive data for other calendars an string with the expected calendar.
(5495) {970142} [970337]: If you want to receive data for other calendars or formats, then you must give an array instead of the era number with the expected values.
*****************************************************************
========================= CLASS #418 =============================
(5477) {967891} [968069]: The array has to look like this: Zend_Date for simplicity DayContext Returns the default context for Â´days which is used within the given calendar.
(5484) {968815} [968947]: The array has to look like this: Zend_Date for simplicity Quarter Returns a translation for a quarter.
(5496) {970338} [970512]: The array has to look like this: DefaultDate Returns the default date format which is used within the given calendar.
*****************************************************************
========================= CLASS #419 =============================
(5487) {969266} [969391]: The array has to look like this: Am Returns a translation for &#39;AM&#39; in a expected locale.
(5490) {969608} [969730]: Use Zend_Date for simplicity Pm Returns a translation for &#39;PM&#39; in a expected locale.
*****************************************************************
========================= CLASS #420 =============================
(5498) {970582} [970718]: Use Zend_Date for simplicity Date Returns the date format for an given calendar or format within a locale.
(5503) {971307} [971443]: Use Zend_Date for simplicity Time Returns the time format for an given calendar or format within a locale.
*****************************************************************
========================= CLASS #421 =============================
(5518) {973864} [974002]: The currency has to be given in ISO format which is for example &#39;EUR&#39; for the currency &#39;euro&#39;.
(5532) {975556} [975664]: The currency has to be given as ISO4217 code for example &#39;EUR&#39; for euro.
(5535) {975919} [976031]: The territory has to be given as ISO4217 string for example &#39;001&#39; for world.
(5539) {976569} [976684]: The language has to be given as ISO language code for example &#39;en&#39; for english.
(5541) {976928} [977039]: The script has to be given as ISO script code for example &#39;Latn&#39; for latin.
(5543) {977279} [977394]: The language has to be given as ISO language code for example &#39;en&#39; for english.
(5545) {977659} [977769]: The territory has to be given as ISO3166 code for example &#39;IT&#39; for italia.
*****************************************************************
========================= CLASS #422 =============================
(5525) {974829} [974897]: You must give the currency as ISO value.
(5527) {975017} [975085]: You must give the currency as ISO value.
*****************************************************************
========================= CLASS #423 =============================
(5530) {975314} [975429]: The region code has to be given as ISO3166 string for example &#39;AT&#39; for austria.
(5537) {976211} [976321]: The region has to be given in ISO3166 string for example &#39;AT&#39; for austria.
*****************************************************************
========================= CLASS #424 =============================
(5623) {989620} [990085]: Selecting the Right Locale For most situations, Automatically selecting a locale The seach algorithm used by Zend_Locale for automatic selection of a locale uses three sources of information: const Zend_Locale::BROWSER - The user&#39;s Web browser provides information with each request, which is published by PHP in the global variable HTTP_ACCEPT_LANGUAGE .
(5635) {991954} [992047]: It is published by PHP in the global variable HTTP_ACCEPT_LANGUAGE .
*****************************************************************
========================= CLASS #425 =============================
(5624) {990086} [990235]: If no matching locale can be found, then preference is given to ENVIRONMENT and lastly FRAMEWORK .
(5626) {990429} [990546]: If no matching locale can be found, then preference is given to FRAMEWORK and lastly BROWSER.
(5628) {990901} [991048]: If no matching locale can be found, then preference is given to ENVIRONMENT and lastly BROWSER .
*****************************************************************
========================= CLASS #426 =============================
(5634) {991732} [991953]: There are three locales which have a slightly different behaviour: &#39;browser&#39; - Zend_Locale should work with the information which is provided by the user&#39;s Web browser.
(5638) {992469} [992602]: &#39;environment&#39; - Zend_Locale should work with the information which is provided by the host server.
*****************************************************************
========================= CLASS #427 =============================
(5636) {992094} [992224]: If a user provides more than one locale within his browser, Zend_Locale will use the first found locale.
(5640) {992737} [992855]: If a environment provides more than one locale, Zend_Locale will use the first found locale.
*****************************************************************
========================= CLASS #428 =============================
(5637) {992225} [992447]: If the user does not provide a locale or the script is being called from the commandline the automatic locale &#39;environment&#39; will automatically be used and returned.
(5641) {992856} [992999]: If the host does not provide a locale the automatic locale &#39;browser&#39; will automatically be used and returned.
*****************************************************************
========================= CLASS #429 =============================
(5657) {994807} [995004]: See the following example for details: Setting a default locale In the case that no locale can be detected, automatically the locale de will be used.
(8264) {1380442} [1380500]: See the following example for details.
(8268) {1380859} [1380917]: See the following example for details.
*****************************************************************
========================= CLASS #430 =============================
(5668) {996690} [996830]: The &#39;number_format&#39; option specifies a default number format for use with toNumber() (see ).
(5700) {1001210} [1001332]: The &#39;number_format&#39; option explicitly specifies a non-default number format for use with toNumber() .
*****************************************************************
========================= CLASS #431 =============================
(5699) {1001085} [1001209]: This function will return a localized string of the given number in a conventional format for a specific locale.
(5711) {1002920} [1002997]: This function will return a localized string of the given number.
*****************************************************************
========================= CLASS #432 =============================
(5841) {1022304} [1022514]: SMTP Authentication Zend_Mail supports the use of SMTP Authentication, which can be enabled be passing the &#39;auth&#39; parameter to the configuration array in the Zend_Mail_Transport_Smtp constructor.
(5847) {1023091} [1023281]: This can be enabled be passing the &#39;ssl&#39; parameter to the configuration array in the Zend_Mail_Transport_Smtp constructor with a value of either &#39;ssl&#39; or &#39;tls&#39;.
*****************************************************************
========================= CLASS #433 =============================
(6001) {1044624} [1044700]: The weight of the flowing mass is used as reference point within this class.
(6003) {1044901} [1044978]: The density of the flowing mass is used as reference point within this class.
(6005) {1045192} [1045268]: The volume of the flowing mass is used as reference point within this class.
(6017) {1047082} [1047151]: The weight of the fluid is used as reference point within this class.
(6019) {1047390} [1047467]: The distance of the flown fluid is used as reference point within this class.
*****************************************************************
========================= CLASS #434 =============================
(6036) {1049455} [1049527]: Zend_Memory uses Zend_Cache backends as storage providers.
(6087) {1057614} [1057705]: The memory manager uses Zend_Cache backends as storage providers.
*****************************************************************
========================= CLASS #435 =============================
(6042) {1050237} [1050530]: Creating Movable Objects Create movable objects (objects, which may be swapped) using the Zend_Memory_Manager::create([$data]) method: The $data argument is optional and used to initialize the object value.
(6044) {1050627} [1050925]: Creating Locked Objects Create locked objects (objects, which are not swapped) using the Zend_Memory_Manager::createLocked([$data]) method: The $data argument is optional and used to initialize the object value.
*****************************************************************
========================= CLASS #436 =============================
(6043) {1050532} [1050613]: If the $data argument is omitted, the value is an empty string.
(6045) {1050927} [1051008]: If the $data argument is omitted, the value is an empty string.
*****************************************************************
========================= CLASS #437 =============================
(6055) {1052669} [1052985]: Memory Objects Movable Create movable memory objects using the create([$data]) method of the memory manager: &quot;Movable&quot; means that such objects may be swapped and unloaded from memory and then loaded when application code accesses the object.
(6056) {1052995} [1053244]: Locked Create locked memory objects using the createLocked([$data]) method of the memory manager: &quot;Locked&quot; means that such objects are never swapped and unloaded from memory.
*****************************************************************
========================= CLASS #438 =============================
(6080) {1056530} [1056646]: isLocked() method The isLocked() method can be used to check if object is locked.
(8271) {1381133} [1381194]: Therefor the isTranslated() method can be used.
*****************************************************************
========================= CLASS #439 =============================
(6107) {1061326} [1061383]: boundaryLine() : Returns the complete MIME boundary line.
(6108) {1061401} [1061457]: mimeEnd() : Returns the complete MIME end boundary line.
*****************************************************************
========================= CLASS #440 =============================
(6180) {1071480} [1071680]: Authentication Request for Specified Realm The example below only implements the second step of authentication, the first and third steps are the same as in the first example.
(6186) {1072369} [1072558]: Immediate Check without Interaction The example below only implements the second step of authentication, first and third steps are the same as in the first example.
*****************************************************************
========================= CLASS #441 =============================
(6336) {1093840} [1093901]: These are Zend_Pdf::load() and Zend_Pdf::parse() methods.
(6508) {1114954} [1115020]: These are Zend_Pdf::save() and Zend_Pdf::render() methods.
*****************************************************************
========================= CLASS #442 =============================
(6338) {1093998} [1094039]: Create new or load existing PDF document.
(6509) {1115026} [1115044]: Save PDF document.
*****************************************************************
========================= CLASS #443 =============================
(6396) {1101501} [1101747]: Zend_Pdf_Page class provides drawImage() method to draw image: Image objects should be created with Zend_Pdf_Image::imageWithPath($filePath) method (JPG, PNG and TIFF images are supported now): Image drawing.
(6448) {1107881} [1107895]: Image drawing.
*****************************************************************
========================= CLASS #444 =============================
(6477) {1110795} [1110871]: Author - string, optional, the name of the person who created the document.
(6478) {1110889} [1110946]: Subject - string, optional, the subject of the document.
*****************************************************************
========================= CLASS #445 =============================
(6481) {1111320} [1111745]: Producer - string, optional, if the document was converted to PDF from another format, the name of the application (for example, Acrobat Distiller) that converted it to PDF.. CreationDate - string, optional, the date and time the document was created, in the following form: &quot;D:YYYYMMDDHHmmSSOHH&#39;mm&#39;&quot;, where: YYYY is the year.
(6498) {1113514} [1113657]: ModDate - string, optional, the date and time the document was most recently modified, in the same form as CreationDate .
*****************************************************************
========================= CLASS #446 =============================
(6485) {1111933} [1111960]: mm is the minute (00â€“59).
(6486) {1111990} [1112018]: SS is the second (00â€“59).
*****************************************************************
========================= CLASS #447 =============================
(6488) {1112229} [1112314]: HH followed by &#39; is the absolute value of the offset from UT in hours (00â€“23).
(6489) {1112344} [1112431]: mm followed by &#39; is the absolute value of the offset from UT in minutes (00â€“59).
*****************************************************************
========================= CLASS #448 =============================
(6610) {1130314} [1130389]: Index optimization is a process of merging several segments into a new one.
(6786) {1154171} [1154235]: Optimization essentially merges several segments into a new one.
*****************************************************************
========================= CLASS #449 =============================
(6637) {1133453} [1133666]: Many small segments may also trigger the &quot;Too many open files&quot; error determined by OS limitations Zend_Search_Lucene keeps each segment file opened to improve search performance.
(6643) {1134082} [1134147]: This again may trigger the &quot;Too many open files&quot; error.
*****************************************************************
========================= CLASS #450 =============================
(6645) {1134256} [1134373]: Greater than MaxBufferedDocs , but not greater than MaxBufferedDocs * MergeFactor .
(6646) {1134374} [1134503]: Greater than MaxBufferedDocs * MergeFactor , but not greater than MaxBufferedDocs * MergeFactor * MergeFactor .
*****************************************************************
========================= CLASS #451 =============================
(6695) {1140398} [1140456]: See the Character Set documentation section for details.
(7090) {1197124} [1197164]: Scoring Algorithms section for details.
*****************************************************************
========================= CLASS #452 =============================
(6714) {1142936} [1143071]: ctype_alpha() is not UTF-8 compatible, so the analyzer converts text to &#39;ASCII//TRANSLIT&#39; encoding before indexing.
(6854) {1163094} [1163177]: Actually, the default analyzer converts text to &#39;ASCII//TRANSLIT&#39; encoding.
*****************************************************************
========================= CLASS #453 =============================
(6794) {1155110} [1155263]: MaxBufferedDocs can be retrieved or set by $index-&gt;getMaxBufferedDocs() or $index-&gt;setMaxBufferedDocs($maxBufferedDocs) calls.
(6799) {1155714} [1155855]: MaxMergeDocs can be retrieved or set by $index-&gt;getMaxMergeDocs() or $index-&gt;setMaxMergeDocs($maxMergeDocs) calls.
(6809) {1156889} [1157026]: MergeFactor can be retrieved or set by $index-&gt;getMergeFactor() or $index-&gt;setMergeFactor($mergeFactor) calls.
*****************************************************************
========================= CLASS #454 =============================
(6795) {1155294} [1155314]: Default value is 10.
(6810) {1157057} [1157077]: Default value is 10.
*****************************************************************
========================= CLASS #455 =============================
(6890) {1167825} [1168086]: Simply use the query parser to construct a query from a string: Query Parser Exceptions The query parser may generate two types of exceptions: Zend_Search_Lucene_Exception is thrown if something goes wrong in the query parser itself.
(7046) {1190151} [1190233]: The first method uses query parser to construct a query from a string.
*****************************************************************
========================= CLASS #456 =============================
(6898) {1169229} [1169340]: Query string: or Query construction by API: The term field is optional.
(6929) {1173745} [1173891]: Query string: field1:test* or Query construction by API: The term field is optional.
(6933) {1174492} [1174641]: Query string: field1:test~0.4 or Query construction by API: The term field is optional.
(6964) {1178602} [1178723]: Query string: or Query construction by API: Term fields are optional.
*****************************************************************
========================= CLASS #457 =============================
(6900) {1169575} [1169663]: Each term in a set can be defined as required , prohibited , or neither .
(6913) {1171455} [1171548]: Each subquery in a set can be defined as required , prohibited , or optional .
*****************************************************************
========================= CLASS #458 =============================
(6901) {1169678} [1170053]: required means that documents not matching this term will not match the query; prohibited means that documents matching this term will not match the query; neither , in which case matched documents are neither prohibited from, nor required to, match the term.
(6914) {1171563} [1171951]: required means that documents not matching this subquery will not match the query; prohibited means that documents matching this subquery will not match the query; optional , in which case matched documents are neither prohibited from, nor required to, match the subquery.
*****************************************************************
========================= CLASS #459 =============================
(6902) {1170054} [1170145]: A document must match at least 1 term, however, to match the query.
(6915) {1171952} [1172047]: A document must match at least 1 subquery, however, to match the query.
*****************************************************************
========================= CLASS #460 =============================
(6903) {1170190} [1170374]: If optional terms are added to a query with required terms, both queries will have the same result set but the optional terms may affect the score of the matched documents.
(6916) {1172092} [1172289]: If optional subqueries are added to a query with required suqueries, both queries will have the same result set but the optional suqueries may affect the score of the matched documents.
*****************************************************************
========================= CLASS #461 =============================
(6904) {1170397} [1170452]: Both search methods can be used for multi-term queries.
(6917) {1172312} [1172364]: Both search methods can be used for boolean queries.
*****************************************************************
========================= CLASS #462 =============================
(6905) {1170475} [1170565]: Query string: &#39;+&#39; is used to define a required term.
(6906) {1170604} [1170652]: &#39;-&#39; is used to define a prohibited term.
(6910) {1171156} [1171197]: false is used to define prohibited term.
(6918) {1172387} [1172481]: Query string: &#39;+&#39; is used to define a required subquery.
(6919) {1172520} [1172572]: &#39;-&#39; is used to define a prohibited subquery.
(6923) {1173087} [1173132]: false is used to define prohibited subquery.
*****************************************************************
========================= CLASS #463 =============================
(6907) {1170691} [1170765]: &#39;field:&#39; prefix is used to indicate a document field for a search.
(6920) {1172611} [1172685]: &#39;field:&#39; prefix is used to indicate a document field for a search.
*****************************************************************
========================= CLASS #464 =============================
(6908) {1170786} [1170836]: If it&#39;s omitted, then all fields are searched.
(6921) {1172706} [1172756]: If it&#39;s omitted, then all fields are searched.
*****************************************************************
========================= CLASS #465 =============================
(6909) {1170854} [1171134]: or Query construction by API: It&#39;s also possible to specify terms list within MultiTerm query constructor: The $signs array contains information about the term type: true is used to define required term.
(6922) {1172774} [1173065]: or Query construction by API: It&#39;s also possible to specify subqueries list within Boolean query constructor: The $signs array contains information about the subquery type: true is used to define required subquery.
*****************************************************************
========================= CLASS #466 =============================
(6911) {1171219} [1171290]: null is used to define a term that is neither required nor prohibited.
(6924) {1173154} [1173229]: null is used to define a subquery that is neither required nor prohibited.
*****************************************************************
========================= CLASS #467 =============================
(6927) {1173573} [1173635]: The &#39;?&#39; symbol is used as a single character wildcard.
(6928) {1173658} [1173722]: The &#39;*&#39; symbol is used as a multiple character wildcard.
*****************************************************************
========================= CLASS #468 =============================
(6930) {1173892} [1174150]: Zend_Search_Lucene searches through all fields on each document if a field is not specified: Starting in 1.5, Fuzzy Query Fuzzy queries can be used to search for documents containing strings matching terms similar to specified term.
(6934) {1174642} [1174841]: Zend_Search_Lucene searches through all fields on each document if a field is not specified: Phrase Query Phrase Queries can be used to search for a phrase within documents.
*****************************************************************
========================= CLASS #469 =============================
(6940) {1175710} [1175783]: If it&#39;s omitted or equal to null, then an empty query is constructed.
(6942) {1175911} [1176021]: If it&#39;s omitted or equal to null, then the terms&#39; positions are assumed to be sequential with no gaps.
(6944) {1176136} [1176209]: If it&#39;s omitted or equal to null, then the default field is searched.
*****************************************************************
========================= CLASS #470 =============================
(6945) {1176232} [1176326]: Thus: will search for the phrase &#39;zend framework&#39; in all fields.
(6946) {1176349} [1176391]: will search for the phrase &#39;zend ?????
(6948) {1176592} [1176673]: will search for the phrase &#39;zend framework&#39; in the &#39;title&#39; field.
(6952) {1177122} [1177202]: Thus: will search for the phrase &#39;zend framework&#39;.
(6953) {1177226} [1177268]: will search for the phrase &#39;zend ?????
(6955) {1177469} [1177550]: will search for the phrase &#39;zend framework&#39; in the &#39;title&#39; field.
*****************************************************************
========================= CLASS #471 =============================
(6985) {1181377} [1181543]: Starting in 1.5, Wildcards Wildcard queries support is available with SVN and latest snapshot versions and doesn&#39;t included into current release.
(6993) {1182736} [1182977]: Fuzzy search is availably only starting ZF 1.5 Starting in 1.5, Range Searches Range queries support is available with SVN and latest snapshot versions and doesn&#39;t included into current release.
(7000) {1183554} [1183721]: Starting in 1.5, Fuzzy Searches Fuzzy queries support is available with SVN and latest snapshot versions and doesn&#39;t included into current release.
*****************************************************************
========================= CLASS #472 =============================
(6987) {1181696} [1181771]: To perform a single character wildcard search use the &quot;?&quot; symbol.
(6988) {1181794} [1181871]: To perform a multiple character wildcard search use the &quot;*&quot; symbol.
*****************************************************************
========================= CLASS #473 =============================
(7002) {1183877} [1183968]: To do a fuzzy search use the tilde, &quot;~&quot;, symbol at the end of a Single word Term.
(7008) {1184616} [1184715]: To do a proximity search use the tilde, &quot;~&quot;, symbol at the end of the phrase.
*****************************************************************
========================= CLASS #474 =============================
(7024) {1186433} [1186641]: To search for documents that contain &quot;PHP framework&quot; and &quot;Zend Framework&quot; use the query: OR The OR operator divides the query into several optional terms.
(7025) {1186672} [1186886]: To search for documents that contain &quot;PHP framework&quot; or &quot;Zend Framework&quot; use the query: NOT The NOT operator excludes documents that contain the term after NOT.
(7027) {1187080} [1187231]: To search for documents that contain &quot;PHP framework&quot; but not &quot;Zend Framework&quot; use the query: &amp;&amp;, ||, and !
(7028) {1187232} [1187280]: operators &amp;&amp;, ||, and !
(7032) {1187801} [1188064]: To search for documents that contain &quot;PHP framework&quot; but not &quot;Zend Framework&quot; use the query: No Operator If no operator is used, then the search behavior is defined by the &quot;default boolean operator&quot;.
*****************************************************************
========================= CLASS #475 =============================
(7100) {1199166} [1199473]: The Zend_Server_Reflection tree provides a standard mechanism for performing function and class introspection for use as callbacks with the server classes, and provides data suitable for use with Zend_Server_Interface &#39;s getFunctions() and loadFunctions() methods.
(7101) {1199479} [1199669]: Zend_Server_Reflection Introduction Zend_Server_Reflection provides a standard mechanism for performing function and class introspection for use with server classes.
*****************************************************************
========================= CLASS #476 =============================
(7135) {1204375} [1204451]: comment_author , name of the person submitting the data.
(7136) {1204469} [1204552]: comment_author_email , email of the person submitting the data.
*****************************************************************
========================= CLASS #477 =============================
(7145) {1205505} [1205644]: Zend_Service_Akismet::submitSpam() takes the same data array as passed to isSpam() , but does not return a value.
(7151) {1206234} [1206424]: Zend_Service_Akismet::submitHam() takes the same data array as passed to isSpam() or submitSpam() , and, like submitSpam() , does not return a value.
*****************************************************************
========================= CLASS #478 =============================
(7146) {1205645} [1205704]: An exception will be raised if the API key used is invalid.
(7152) {1206425} [1206496]: An exception will be raised if the API key used is invalid.
*****************************************************************
========================= CLASS #479 =============================
(7155) {1206842} [1206978]: getBlogUrl() and setBlogUrl() allow you to retrieve and modify the blog URL used in requests.
(7156) {1206996} [1207129]: getApiKey() and setApiKey() allow you to retrieve and modify the API key used in requests.
*****************************************************************
========================= CLASS #480 =============================
(7157) {1207147} [1207296]: getCharset() and setCharset() allow you to retrieve and modify the character set used to make the request.
(7158) {1207314} [1207452]: getPort() and setPort() allow you to retrieve and modify the TCP port used to make the request.
(7159) {1207470} [1207625]: getUserAgent() and setUserAgent() allow you to retrieve and modify the HTTP user agent used to make the request.
*****************************************************************
========================= CLASS #481 =============================
(7172) {1210260} [1210431]: Looking up a Specific Amazon Item by ASIN The itemLookup() method provides the ability to fetch a particular Amazon item when the ASIN is known.
(7173) {1210441} [1210604]: Looking up a Specific Amazon Item by ASIN The itemLookup() method also accepts an optional second parameter for handling search options.
*****************************************************************
========================= CLASS #482 =============================
(7174) {1210605} [1210721]: For full details, including a list of available options, please see the relevant Amazon documentation .
(7178) {1211452} [1211693]: For full details, including a list of available options, please see the relevant Amazon documentation The Zend_Service_Amazon_Query class is an easy to use wrapper around this method.
(7628) {1286191} [1286243]: For full details, please see the Yahoo!
(7634) {1286489} [1286541]: For full details, please see the Yahoo!
(7640) {1286810} [1286862]: For full details, please see the Yahoo!
(7646) {1287170} [1287222]: For full details, please see the Yahoo!
*****************************************************************
========================= CLASS #483 =============================
(7191) {1216405} [1216504]: using foreach ), as well as direct access to a specific result using seek() .
(7287) {1237064} [1237233]: Implements the SeekableIterator interface for easy iteration (e.g., using foreach ), as well as direct access to a specific result using seek() .
*****************************************************************
========================= CLASS #484 =============================
(7192) {1216522} [1217018]: Zend_Service_Amazon_ResultSet::totalResults() int totalResults Returns the total number of results returned by the search Back to Class List Zend_Service_Amazon_OfferSet Each result returned by Zend_Service_Amazon::itemSearch() and Zend_Service_Amazon::itemLookup() contains a Zend_Service_Amazon_OfferSet object through which pricing information for the item can be retrieved.
(7655) {1288588} [1288725]: Zend_Service_Yahoo_ResultSet::totalResults() int totalResults Returns the number of results returned for the search.
*****************************************************************
========================= CLASS #485 =============================
(7200) {1220745} [1221046]: Properties Zend_Service_Amazon_Listmania Properties Name Type Description ListId string List ID ListName string List Name Back to Class List Zend_Service_Audioscrobbler Introduction to Searching Audioscrobbler Zend_Service_Audioscrobbler is a simple API for using the Audioscrobbler REST Web Service.
(7275) {1234483} [1234611]: Zend_Service_Flickr Introduction to Searching Flickr Zend_Service_Flickr is a simple API for using the Flickr REST Web Service.
*****************************************************************
========================= CLASS #486 =============================
(7206) {1221739} [1222000]: Zend_Service_Audioscrobbler provides several methods for retrieving data specific to a single user: userGetProfileInformation() : Returns a SimpleXML object containing the current user&#39;s profile information.
(7207) {1222022} [1222164]: userGetTopArtists() : Returns a SimpleXML object containing a list of the current user&#39;s most listened to artists.
(7208) {1222186} [1222326]: userGetTopAlbums() : Returns a SimpleXML object containing a list of the current user&#39;s most listened to albums.
(7209) {1222348} [1222488]: userGetTopTracks() : Returns a SimpleXML object containing a list of the current user&#39;s most listened to tracks.
(7210) {1222510} [1222639]: userGetTopTags() : Returns a SimpleXML object containing a list of tags most applied by the current user.
(7212) {1222763} [1222889]: Returns a SimpleXML object containing the tags most applied to the current artist by the current user.
(7214) {1223010} [1223135]: Returns a SimpleXML object containing the tags most applied to the current album by the current user.
(7216) {1223255} [1223380]: Returns a SimpleXML object containing the tags most applied to the current track by the current user.
(7217) {1223402} [1223532]: userGetFriends() : Returns a SimpleXML object containing the user names of the current user&#39;s friends.
(7218) {1223554} [1223713]: userGetNeighbours() : Returns a SimpleXML object containing the user names of people with similar listening habits to the current user.
(7219) {1223735} [1223876]: userGetRecentTracks() : Returns a SimpleXML object containing the 10 tracks most recently played by the current user.
(7220) {1223898} [1224055]: userGetRecentBannedTracks() : Returns a SimpleXML object containing a list of the 10 tracks most recently banned by the current user.
(7221) {1224077} [1224232]: userGetRecentLovedTracks() : Returns a SimpleXML object containing a list of the 10 tracks most recently loved by the current user.
(7222) {1224254} [1224403]: userGetRecentJournals() : Returns a SimpleXML object containing a list of the current user&#39;s most recent journal entries.
(7223) {1224425} [1224587]: userGetWeeklyChartList() : Returns a SimpleXML object containing a list of weeks for which there exist Weekly Charts for the current user.
(7224) {1224609} [1224763]: userGetRecentWeeklyArtistChart() : Returns a SimpleXML object containing the most recent Weekly Artist Chart for the current user.
(7225) {1224785} [1224937]: userGetRecentWeeklyAlbumChart() : Returns a SimpleXML object containing the most recent Weekly Album Chart for the current user.
(7226) {1224959} [1225111]: userGetRecentWeeklyTrackChart() : Returns a SimpleXML object containing the most recent Weekly Track Chart for the current user.
(7232) {1226170} [1226307]: artistGetTopTracks() : Returns a SimpleXML object containing a list of the current Artist&#39;s top-rated Tracks.
(7233) {1226329} [1226466]: artistGetTopAlbums() : Returns a SimpleXML object containing a list of the current Artist&#39;s top-rated Albums.
(7234) {1226488} [1226632]: artistGetTopTags() : Returns a SimpleXML object containing a list of the Tags most frequently applied to current Artist.
(7236) {1227017} [1227163]: trackGetTopTags() : Returns a SimpleXML object containing a list of the Tags most frequently applied to the current Track.
(7242) {1228403} [1228563]: groupGetWeeklyChart() : Returns a SimpleXML object containing a list of weeks for which there exist Weekly Charts for the current Group.
(7243) {1228585} [1228741]: groupGetRecentWeeklyArtistChart() : Returns a SimpleXML object containing the most recent Weekly Artist Chart for the current Group.
(7244) {1228763} [1228917]: groupGetRecentWeeklyAlbumChart() : Returns a SimpleXML object containing the most recent Weekly Album Chart for the current Group.
(7245) {1228939} [1229093]: groupGetRecentWeeklyTrackChart() : Returns a SimpleXML object containing the most recent Weekly Track Chart for the current Group.
*****************************************************************
========================= CLASS #487 =============================
(7227) {1225133} [1225202]: $fromDate to $toDate for the current user.
(7228) {1225133} [1225202]: $fromDate to $toDate for the current user.
(7229) {1225133} [1225202]: $fromDate to $toDate for the current user.
*****************************************************************
========================= CLASS #488 =============================
(7230) {1225416} [1225989]: Retrieving User Profile Information In this example, we use the setUser() and userGetProfileInformation() methods to retrieve a specific user&#39;s profile information: Retrieving a User&#39;s Weekly Artist Chart Artists Zend_Service_Audioscrobbler provides several methods for retrieving data about a specific artist, specified via the setArtist() method: artistGetRelatedArtists() : Returns a SimpleXML object containing a list of Artists similar to the current Artist.
(7231) {1226011} [1226148]: artistGetTopFans() : Returns a SimpleXML object containing a list of Users who listen most to the current Artist.
(7235) {1226664} [1226995]: Retrieving Related Artists Tracks Zend_Service_Audioscrobbler provides two methods for retrieving data specific to a single track, specified via the setTrack() method: trackGetTopFans() : Returns a SimpleXML object containing a list of Users who listen most to the current Track.
(7237) {1227195} [1227503]: Tags Zend_Service_Audioscrobbler provides several methods for retrieving data specific to a single tag, specified via the setTag() method: tagGetOverallTopTags() : Returns a SimpleXML object containing a list of Tags most frequently used on Audioscrobbler.
(7241) {1228058} [1228381]: Groups Zend_Service_Audioscrobbler provides several methods for retrieving data specific to a single group, specified via the setGroup() method: groupGetRecentJournals() : Returns a SimpleXML object containing a list of recent journal posts by Users in the current Group.
(7250) {1229548} [1229844]: Forums Zend_Service_Audioscrobbler provides a method for retrieving data specific to a single forum, specified via the setForum() method: forumGetRecentPosts() : Returns a SimpleXML object containing a list of recent posts in the current forum.
*****************************************************************
========================= CLASS #489 =============================
(7238) {1227525} [1227678]: tagGetTopArtists() : Returns a SimpleXML object containing a list of Artists to whom the current Tag was most frequently applied.
(7239) {1227700} [1227852]: tagGetTopAlbums() : Returns a SimpleXML object containing a list of Albums to which the current Tag was most frequently applied.
(7240) {1227874} [1228026]: tagGetTopTracks() : Returns a SimpleXML object containing a list of Tracks to which the current Tag was most frequently applied.
*****************************************************************
========================= CLASS #490 =============================
(7246) {1229115} [1229148]: setFromDate() and setToDate() .
(7248) {1229327} [1229360]: setFromDate() and setToDate() .
*****************************************************************
========================= CLASS #491 =============================
(7247) {1229149} [1229305]: Returns a SimpleXML object containing the Weekly Artist Chart from the current fromDate to the current toDate for the current Group.
(7249) {1229361} [1229516]: Returns a SimpleXML object containing the Weekly Album Chart from the current fromDate to the current toDate for the current Group.
*****************************************************************
========================= CLASS #492 =============================
(7281) {1235523} [1235610]: getIdByUsername() : Returns a string user ID associated with the given username string.
(7282) {1235628} [1235737]: getIdByEmail() : Returns a string user ID associated with the given email address string.
*****************************************************************
========================= CLASS #493 =============================
(7294) {1238104} [1238186]: isfriend string The photo is visible to you because you are a friend of the owner.
(7295) {1238187} [1238267]: isfamily string The photo is visible to you because you are family of the owner.
*****************************************************************
========================= CLASS #494 =============================
(7297) {1238325} [1238375]: dateupload string The date the photo was uploaded.
(7298) {1238376} [1238422]: datetaken string The date the photo was taken.
*****************************************************************
========================= CLASS #495 =============================
(7303) {1238665} [1238730]: Small Zend_Service_Flickr_Image A 240 pixel version of the image.
(7304) {1238731} [1238797]: Medium Zend_Service_Flickr_Image A 500 pixel version of the image.
(7305) {1238798} [1238863]: Large Zend_Service_Flickr_Image A 640 pixel version of the image.
*****************************************************************
========================= CLASS #496 =============================
(7315) {1240427} [1240518]: After registering, you will receive a Username, Password, and Application Key.
(7439) {1261984} [1262055]: After registering, you will receive a StrikeIron username and password.
*****************************************************************
========================= CLASS #497 =============================
(7416) {1257807} [1258180]: To view a SOAP transaction, call the getSoapClient() method to get the SOAPClient instance and then call the appropriate methods like __getLastRequest() and __getLastRequest() : Zend_Service_StrikeIron: Bundled Services Zend_Service_StrikeIron comes with wrapper classes for three popular StrikeIron services.
(7437) {1261723} [1261770]: Wrappers for three popular StrikeIron services.
*****************************************************************
========================= CLASS #498 =============================
(7417) {1258186} [1258320]: ZIP Code Information Zend_Service_StrikeIron_ZipCodeInfo provides a client for StrikeIron&#39;s Zip Code Information Service.
(7419) {1258645} [1258764]: Address Verification Zend_Service_StrikeIron_USAddressVerification provides a client for StrikeIron&#39;s U.S.
*****************************************************************
========================= CLASS #499 =============================
(7418) {1258322} [1258644]: For more information on this service, visit these StrikeIron resources: Zip Code Information Service Page Zip Code Information Service WSDL The service contains a getZipCode() method that will retrieve information about a United States ZIP code or Canadian postal code: U.S.
(7421) {1258796} [1258890]: For more information on this service, visit these StrikeIron resources: U.S.
*****************************************************************
========================= CLASS #500 =============================
(7443) {1262381} [1262579]: Getting Started Once you have registered for a StrikeIron account and signed up for the Super Data Pack , you&#39;re ready to start using Zend_Service_StrikeIron.
(7497) {1269798} [1269887]: Once you have a valid API key, you&#39;re ready to start using Zend_Service_Technorati .
*****************************************************************
========================= CLASS #501 =============================
(7523) {1273423} [1273528]: Zend_Service_Technorati::keyInfo() returns a Zend_Service_Technorati_KeyInfoResult object.
(7550) {1276843} [1276933]: It returns a Zend_Service_Technorati_KeyInfoResult object.
*****************************************************************
========================= CLASS #502 =============================
(7527) {1274029} [1274138]: For full details please see Zend_Service_Technorati::cosmos() in the API reference guide .
(7530) {1274385} [1274494]: For full details please see Zend_Service_Technorati::search() in the API reference guide .
(7533) {1274734} [1274840]: For full details please see Zend_Service_Technorati::tag() in the API reference guide .
(7536) {1275107} [1275221]: For full details please see Zend_Service_Technorati::dailyCounts() in the API reference guide .
(7539) {1275474} [1275584]: For full details please see Zend_Service_Technorati::topTags() in the API reference guide .
(7542) {1275855} [1275966]: For full details please see Zend_Service_Technorati::blogInfo() in the API reference guide .
(7545) {1276232} [1276347]: For full details please see Zend_Service_Technorati::blogPostTags() in the API reference guide .
(7548) {1276600} [1276710]: For full details please see Zend_Service_Technorati::getInfo() in the API reference guide .
(7551) {1276934} [1277043]: For full details please see Zend_Service_Technorati::keyInfo() in the API reference guide .
(7560) {1279101} [1279208]: For full details please see Zend_Service_Technorati in the API reference guide .
*****************************************************************
========================= CLASS #503 =============================
(7538) {1275381} [1275473]: It returns a Zend_Service_Technorati_TagsResultSet object.
(7544) {1276139} [1276231]: It returns a Zend_Service_Technorati_TagsResultSet object.
*****************************************************************
========================= CLASS #504 =============================
(7553) {1277172} [1277364]: Each Zend_Service_Technorati_*ResultSet class holds a type-specific result set which can be easily iterated, with each result being contained in a type result object.
(7651) {1287440} [1287603]: Each search type returns a type-specific result set which can be easily iterated, with each result being contained in a type result object.
*****************************************************************
========================= CLASS #505 =============================
(7554) {1277365} [1277570]: All result set classes extend Zend_Service_Technorati_ResultSet class and implement the SeekableIterator interface, allowing for easy iteration and seeking to a specific result.
(7652) {1287604} [1287744]: All result set classes implement the SeekableIterator interface, allowing for easy iteration and seeking to a specific result.
*****************************************************************
========================= CLASS #506 =============================
(7562) {1279321} [1279501]: The scope of this class is to be extended by a query-specific child result set class, and it should never be used to initialize a standalone object.
(7576) {1281369} [1281545]: The scope of this class is to be extended by a query specific child result class, and it should never be used to initialize a standalone object.
*****************************************************************
========================= CLASS #507 =============================
(7566) {1280061} [1280166]: Zend_Service_Technorati_CosmosResultSet extends Zend_Service_Technorati_ResultSet .
(7568) {1280327} [1280432]: Zend_Service_Technorati_SearchResultSet extends Zend_Service_Technorati_ResultSet .
(7570) {1280584} [1280686]: Zend_Service_Technorati_TagResultSet extends Zend_Service_Technorati_ResultSet .
(7572) {1280862} [1280972]: Zend_Service_Technorati_DailyCountsResultSet extends Zend_Service_Technorati_ResultSet .
(7574) {1281148} [1281251]: Zend_Service_Technorati_TagsResultSet extends Zend_Service_Technorati_ResultSet .
*****************************************************************
========================= CLASS #508 =============================
(7578) {1281709} [1281868]: It is never returned as a standalone object, but it always belongs to a valid Zend_Service_Technorati_CosmosResultSet object.
(7581) {1282149} [1282308]: It is never returned as a standalone object, but it always belongs to a valid Zend_Service_Technorati_SearchResultSet object.
(7584) {1282580} [1282736]: It is never returned as a standalone object, but it always belongs to a valid Zend_Service_Technorati_TagResultSet object.
(7587) {1283029} [1283193]: It is never returned as a standalone object, but it always belongs to a valid Zend_Service_Technorati_DailyCountsResultSet object.
(7590) {1283492} [1283650]: It is never returned as a standalone object, but it always belongs to a valid Zend_Service_Technorati_TagsResultSet object.
*****************************************************************
========================= CLASS #509 =============================
(7579) {1281882} [1281981]: Zend_Service_Technorati_CosmosResult extends Zend_Service_Technorati_Result .
(7582) {1282322} [1282421]: Zend_Service_Technorati_SearchResult extends Zend_Service_Technorati_Result .
(7585) {1282750} [1282846]: Zend_Service_Technorati_TagResult extends Zend_Service_Technorati_Result .
(7588) {1283207} [1283311]: Zend_Service_Technorati_DailyCountsResult extends Zend_Service_Technorati_Result .
(7591) {1283664} [1283761]: Zend_Service_Technorati_TagsResult extends Zend_Service_Technorati_Result .
*****************************************************************
========================= CLASS #510 =============================
(7599) {1284534} [1284552]: Web search, Yahoo!
(7600) {1284553} [1284565]: News, Yahoo!
(7601) {1284566} [1284579]: Local, Yahoo!
*****************************************************************
========================= CLASS #511 =============================
(7607) {1284788} [1284817]: Searching the Web with Yahoo!
(7613) {1285250} [1285279]: Searching the Web with Yahoo!
*****************************************************************
========================= CLASS #512 =============================
(7609) {1284880} [1285038]: using the webSearch() method, which accepts a string query parameter and an optional second parameter as an array of search options.
(7616) {1285426} [1285557]: This method accepts a string query parameter and an optional array of search options, as for the webSearch() method .
*****************************************************************
========================= CLASS #513 =============================
(7610) {1285039} [1285112]: For full details and an option list, please visit the Yahoo!
(7617) {1285558} [1285643]: For full details and an option list, please visit the Yahoo!
(7622) {1285867} [1285940]: For full details and an option list, please visit the Yahoo!
*****************************************************************
========================= CLASS #514 =============================
(7611) {1285113} [1285151]: Web Search Documentation .
(7618) {1285644} [1285684]: Image Search Documentation .
(7623) {1285941} [1285981]: Video Search Documentation .
(7629) {1286244} [1286284]: Local Search Documentation .
(7635) {1286542} [1286581]: News Search Documentation .
*****************************************************************
========================= CLASS #515 =============================
(7614) {1285280} [1285306]: Finding Images with Yahoo!
(7619) {1285694} [1285720]: Finding Images with Yahoo!
*****************************************************************
========================= CLASS #516 =============================
(7615) {1285320} [1285425]: You can search for Images with Yahoo using Zend_Service_Yahoo &#39;s imageSearch() method.
(7621) {1285761} [1285866]: You can search for videos with Yahoo using Zend_Service_Yahoo &#39;s videoSearch() method.
*****************************************************************
========================= CLASS #517 =============================
(7620) {1285721} [1285747]: Finding videos with Yahoo!
(7624) {1285991} [1286017]: Finding videos with Yahoo!
*****************************************************************
========================= CLASS #518 =============================
(7625) {1286018} [1286067]: Finding Local Businesses and Services with Yahoo!
(7630) {1286294} [1286343]: Finding Local Businesses and Services with Yahoo!
*****************************************************************
========================= CLASS #519 =============================
(7631) {1286344} [1286360]: Searching Yahoo!
(7632) {1286361} [1286395]: News Searching Yahoo!
(7636) {1286591} [1286607]: Searching Yahoo!
(7637) {1286608} [1286629]: News Searching Yahoo!
(7642) {1286928} [1286944]: Searching Yahoo!
(7648) {1287283} [1287299]: Searching Yahoo!
*****************************************************************
========================= CLASS #520 =============================
(7633) {1286396} [1286488]: News is simple; just use the newsSearch() method, as in the following example.
(7639) {1286688} [1286809]: Site Explorer Inbound Links is simple; just use the inlinkDataSearch() method, as in the following example.
(7641) {1286875} [1286918]: Site Explorer Inbound Links Documentation .
(7645) {1287049} [1287169]: Site Explorer&#39;s PageData is simple; just use the pageDataSearch() method, as in the following example.
*****************************************************************
========================= CLASS #521 =============================
(7638) {1286630} [1286687]: Site Explorer Inbound Links Searching Yahoo!
(7643) {1286945} [1286989]: Site Explorer Inbound Links Searching Yahoo!
*****************************************************************
========================= CLASS #522 =============================
(7659) {1289211} [1289233]: Web Search result set.
(7661) {1289444} [1289468]: Image Search result set.
(7663) {1289681} [1289705]: Video Search result set.
(7665) {1289918} [1289942]: Local Search result set.
(7668) {1290330} [1290353]: News Search result set.
(7670) {1290575} [1290606]: Inbound Link Search result set.
(7672) {1290830} [1290857]: PageData Search result set.
*****************************************************************
========================= CLASS #523 =============================
(7660) {1289247} [1289443]: Zend_Service_Yahoo_WebResultSet extends Zend_Service_Yahoo_ResultSet Back to Class List Zend_Service_Yahoo_ImageResultSet Zend_Service_Yahoo_ImageResultSet represents a Yahoo!
(7662) {1289482} [1289680]: Zend_Service_Yahoo_ImageResultSet extends Zend_Service_Yahoo_ResultSet Back to Class List Zend_Service_Yahoo_VideoResultSet Zend_Service_Yahoo_VideoResultSet represents a Yahoo!
(7664) {1289719} [1289917]: Zend_Service_Yahoo_VideoResultSet extends Zend_Service_Yahoo_ResultSet Back to Class List Zend_Service_Yahoo_LocalResultSet Zend_Service_Yahoo_LocalResultSet represents a Yahoo!
(7667) {1290133} [1290329]: Zend_Service_Yahoo_LocalResultSet extends Zend_Service_Yahoo_ResultSet Back to Class List Zend_Service_Yahoo_NewsResultSet Zend_Service_Yahoo_NewsResultSet represents a Yahoo!
(7669) {1290367} [1290574]: Zend_Service_Yahoo_NewsResultSet extends Zend_Service_Yahoo_ResultSet Back to Class List Zend_Service_Yahoo_InlinkDataResultSet Zend_Service_Yahoo_InlinkDataResultSet represents a Yahoo!
(7671) {1290620} [1290829]: Zend_Service_Yahoo_InlinkDataResultSet extends Zend_Service_Yahoo_ResultSet Back to Class List Zend_Service_Yahoo_PageDataResultSet Zend_Service_Yahoo_PageDataResultSet represents a Yahoo!
*****************************************************************
========================= CLASS #524 =============================
(7679) {1291961} [1292247]: Properties Zend_Service_Yahoo_ImageResult Properties Name Type Description Summary string Result summary RefererUrl string The URL of the page which contains the image FileSize int The size of the image file in bytes FileFormat string The format of the image (bmp, gif, jpeg, png, etc.)
(7681) {1292530} [1292844]: Properties Zend_Service_Yahoo_VideoResult Properties Name Type Description Summary string Result summary RefererUrl string The URL of the page which contains the video FileSize int The size of the video file in bytes FileFormat string The format of the video (avi, flash, mpeg, msmedia, quicktime, realmedia, etc.)
*****************************************************************
========================= CLASS #525 =============================
(7699) {1297355} [1297392]: Correct: Use Zend_Session::start() .
(7705) {1298262} [1298315]: The strict option prevents Zend_Session::start() .
*****************************************************************
========================= CLASS #526 =============================
(7782) {1313254} [1313483]: string save_path - The correct value is system dependent, and should be provided by the developer using an absolute path to a directory readable and writable by the PHP process.
(7792) {1315821} [1315981]: string name - The correct value is system dependent and should be provided by the developer using a value unique to the application.
*****************************************************************
========================= CLASS #527 =============================
(7784) {1313681} [1313812]: Security Risk If the path is readable by other applications, then session hijacking might be possible.
(7785) {1313813} [1313987]: If the path is writable by other applications, then session poisoning might be possible.
*****************************************************************
========================= CLASS #528 =============================
(7802) {1318130} [1318368]: For example, in php.ini , &quot; Alternatively, try rearranging the application logic so that actions manipulating headers are performed prior to sending any output whatsoever.
(7806) {1318911} [1319078]: Alternatively, try rearranging the application logic so that all actions manipulating headers are performed prior to sending any output whatsoever.
*****************************************************************
========================= CLASS #529 =============================
(7865) {1329371} [1329534]: Throws By default, $readonly is enabled and further actions involving writing to the session data store will throw an exception.
(7873) {1330548} [1330711]: Throws By default, $readonly is enabled and further actions involving writing to the session data store will throw an exception.
*****************************************************************
========================= CLASS #530 =============================
(7889) {1332848} [1333092]: Actually, all participation on any relevant topic is welcome :) Throws An exception will be thrown if Zend_Session is not marked as readable (e.g., before Zend_Session has been started).
(7891) {1333221} [1333380]: Throws An exception will be thrown if Zend_Session is not marked as readable (e.g., before Zend_Session has been started).
*****************************************************************
========================= CLASS #531 =============================
(7986) {1345849} [1346000]: The NTP ) is a protocol for synchronizing the clocks of computer systems over packet-switched, variable-latency data networks.
(7990) {1346174} [1346326]: The SNTP ) is a protocol for syncronising with clocks of computer systems over packet-switched, variable-latency data networks.
*****************************************************************
========================= CLASS #532 =============================
(7987) {1346001} [1346051]: NTP uses UDP port 123 as it&#39;s transport layer.
(7991) {1346327} [1346377]: SNTP uses UDP port 37 as it&#39;s transport layer.
*****************************************************************
========================= CLASS #533 =============================
(8021) {1350554} [1350690]: Zend_Translate_Adapter_Array The Array Adapter is the Adapter which is simplest to use for programmers.
(8025) {1351195} [1351325]: Zend_Translate_Adapter_Csv The Csv Adapter is the Adapter which is simplest to use for customers.
*****************************************************************
========================= CLASS #534 =============================
(8040) {1353146} [1353204]: TBX is a XML file based format and a completly new format.
(8050) {1354404} [1354434]: QT is a XML file based format.
*****************************************************************
========================= CLASS #535 =============================
(8041) {1353221} [1353320]: XML files are human-readable, but the parsing is not as fast as with gettext files.
(8046) {1353954} [1354053]: XML files are human-readable, but the parsing is not as fast as with gettext files.
(8051) {1354451} [1354550]: XML files are human-readable, but the parsing is not as fast as with gettext files.
(8056) {1355100} [1355199]: XML files are human-readable, but the parsing is not as fast as with gettext files.
*****************************************************************
========================= CLASS #536 =============================
(8043) {1353469} [1353521]: The files are human readable and system-independent.
(8048) {1354149} [1354201]: The files are human readable and system-independent.
(8053) {1354660} [1354712]: The files are human readable and system-independent.
(8058) {1355286} [1355338]: The files are human readable and system-independent.
(8063) {1355922} [1355974]: The files are human readable and system-independent.
*****************************************************************
========================= CLASS #537 =============================
(8047) {1354084} [1354132]: Most medium to large companies use this adapter.
(8057) {1355230} [1355269]: Most medium companies use this adapter.
*****************************************************************
========================= CLASS #538 =============================
(8055) {1354950} [1355083]: XLIFF is a XML file based format, which is related to TMX but simpler as it does not support all possibilities of it.
(8061) {1355704} [1355810]: XLIFF is a XML file based format, which is related to XLIFF but its not as simple to read.
*****************************************************************
========================= CLASS #539 =============================
(8136) {1364917} [1365148]: The following structures are preferable: Single structured source Positive: All source files for every languages can be found in one directory.
(8141) {1365563} [1365728]: Application structured source Positive: All source files for every languages can be found in one directory.
*****************************************************************
========================= CLASS #540 =============================
(8137) {1365150} [1365180]: No splitting of related files.
(8142) {1365730} [1365760]: No splitting of related files.
*****************************************************************
========================= CLASS #541 =============================
(8202) {1372527} [1372643]: If set to Zend_Translate::LOCALE_DIRECTORY the locale will be detected within the directory.
(8203) {1372644} [1372758]: It set to Zend_Translate::LOCALE_FILENAME the locale will be detected within the filename.
*****************************************************************
========================= CLASS #542 =============================
(8293) {1383648} [1383802]: If the scheme or URI passed is supported, Zend_Uri::factory() will return a subclass of itself that specializes in the scheme to be created.
(8297) {1384119} [1384246]: Otherwise, Zend_Uri::factory() will return a subclass of itself that specializes in the scheme to be manipulated.
*****************************************************************
========================= CLASS #543 =============================
(8311) {1386070} [1386234]: Basic usage A basic example of usage is below: $email and on failure populate $validator-&gt;getMessages() with useful error messages.
(8341) {1389717} [1389884]: Basic usage A basic example of usage is below: $hostname and on failure populate $validator-&gt;getMessages() with useful error messages.
*****************************************************************
========================= CLASS #544 =============================
(8316) {1386770} [1386926]: By default only DNS hostnames of the form domain.com are accepted, though if you wish you can accept IP addresses and Local hostnames too.
(8340) {1389661} [1389711]: By default only DNS hostnames are matched.
*****************************************************************
========================= CLASS #545 =============================
(8323) {1387947} [1388043]: true or false to $validator-&gt;setValidateMx() to enable or disable MX validation.
(8354) {1391960} [1392029]: $validator-&gt;setValidateIdn() to enable or disable IDN validation.
(8362) {1392894} [1392963]: $validator-&gt;setValidateTld() to enable or disable TLD validation.
*****************************************************************
========================= CLASS #546 =============================
(8328) {1388494} [1388687]: This is enabled by default, though you can disable this by changing the setting via the internal Zend_Validate_Hostname object that exists within Zend_Validate_EmailAddress .
(8332) {1388984} [1389177]: This is enabled by default, though you can disable this by changing the setting via the internal Zend_Validate_Hostname object that exists within Zend_Validate_EmailAddress .
*****************************************************************
========================= CLASS #547 =============================
(8329) {1388698} [1388778]: setValidateIdn() appears in the Zend_Validate_Hostname documentation.
(8333) {1389188} [1389268]: setValidateTld() appears in the Zend_Validate_Hostname documentation.
*****************************************************************
========================= CLASS #548 =============================
(8330) {1388793} [1388872]: Please note IDNs are only validated if you allow DNS hostnames to be validated.
(8334) {1389283} [1389362]: Please note TLDs are only validated if you allow DNS hostnames to be validated.
(8357) {1392382} [1392461]: Please note IDNs are only validated if you allow DNS hostnames to be validated.
(8363) {1392978} [1393057]: Please note TLDs are only validated if you allow DNS hostnames to be validated.
*****************************************************************
========================= CLASS #549 =============================
(8331) {1388878} [1388983]: Validating Top Level Domains By default a hostname will be checked against a list of known TLDs.
(8358) {1392467} [1392572]: Validating Top Level Domains By default a hostname will be checked against a list of known TLDs.
*****************************************************************
========================= CLASS #550 =============================
(8365) {1393205} [1393309]: Alnum Returns true if and only if $value contains only alphabetic and digit characters.
(8367) {1393415} [1393509]: Alpha Returns true if and only if $value contains only alphabetic characters.
(8379) {1395139} [1395229]: Digits Returns true if and only if $value only contains digit characters.
(8382) {1395444} [1395543]: Hex Returns true if and only if $value contains only hexadecimal digit characters.
*****************************************************************
========================= CLASS #551 =============================
(8366) {1393322} [1393405]: This validator includes an option to also consider white space characters as valid.
(8368) {1393510} [1393605]: This validator includes an option to also consider white space characters as valid.
*****************************************************************
========================= CLASS #552 =============================
(8372) {1394198} [1394321]: Between Returns true if and only if $value is between the minimum and maximum boundary values.
(8380) {1395239} [1395323]: Float Returns true if and only if $value is a floating-point value.
(8381) {1395333} [1395434]: GreaterThan Returns true if and only if $value is greater than the minimum boundary.
(8385) {1395776} [1395851]: Int Returns true if and only if $value is a valid integer.
(8386) {1395861} [1395938]: Ip Returns true if and only if $value is a valid IP address.
(8387) {1395948} [1396043]: LessThan Returns true if and only if $value is less than the maximum boundary.
(8388) {1396053} [1396136]: NotEmpty Returns true if and only if $value is not an empty value.
*****************************************************************
========================= CLASS #553 =============================
(8413) {1400067} [1400154]: If a value fails your validation tests, then isValid() should return false .
(8414) {1400155} [1400244]: If the value passes your validation tests, then isValid() should return true .
*****************************************************************
========================= CLASS #554 =============================
(8459) {1407403} [1407494]: Other tokens may be supported on a case-by-case basis in each validation class.
(8469) {1408861} [1408956]: Other properties may be supported on a case-by-case basis in each validation class.
*****************************************************************
========================= CLASS #555 =============================
(8505) {1414725} [1414972]: For example, if your controller script is at &quot;/path/to/app/controllers&quot; and it calls $view-&gt;render(&#39;someView.php&#39;), Zend_View will look for &quot;/path/to/app/controllers/someView.php&quot;.
(8508) {1415192} [1415325]: Now when you call $view-&gt;render(&#39;someView.php&#39;), it will look for &quot;/path/to/app/views/someView.php&quot;.
*****************************************************************
========================= CLASS #556 =============================
(8509) {1415348} [1415434]: In fact, you can &quot;stack&quot; paths using the addScriptPath() method.
(8734) {1453078} [1453166]: In fact, you can &quot;stack&quot; paths using the addHelperPath() method.
*****************************************************************
========================= CLASS #557 =============================
(8510) {1415435} [1415572]: As you add paths to the stack, Zend_View will look at the most-recently-added path for the requested view script.
(8735) {1453167} [1453307]: As you add paths to the stack, Zend_View will look at the most-recently-added path for the requested helper class.
*****************************************************************
========================= CLASS #558 =============================
(8519) {1417333} [1417432]: The Doctype helper is a concrete implementation of the Placeholder helper .
(8528) {1419436} [1419536]: The HeadLink helper is a concrete implementation of the Placeholder helper .
(8540) {1421661} [1421761]: The HeadMeta helper is a concrete implementation of the Placeholder helper .
(8555) {1424535} [1424637]: The HeadScript helper is a concrete implementation of the Placeholder helper .
(8579) {1429160} [1429261]: The HeadStyle helper is a concrete implementation of the Placeholder helper .
(8587) {1431061} [1431162]: The HeadTitle helper is a concrete implementation of the Placeholder helper .
*****************************************************************
========================= CLASS #559 =============================
(8520) {1417438} [1417518]: Doctype Helper Basic Usage You may specify the doctype at any time.
(8529) {1419542} [1419624]: HeadLink Helper Basic Usage You may specify a headLink at any time.
(8541) {1421767} [1421851]: HeadMeta Helper Basic Usage You may specify a new meta tag at any time.
*****************************************************************
========================= CLASS #560 =============================
(8536) {1421018} [1421204]: $placement can be either &#39;SET&#39; (overwrites all previously stored values), &#39;APPEND&#39; (added to end of stack), or &#39;PREPEND&#39; (added to top of stack).
(8551) {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8575) {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
*****************************************************************
========================= CLASS #561 =============================
(8537) {1421210} [1421362]: HeadMeta overrides each of append() , offsetSet() , prepend() , and set() to enforce usage of the special methods as listed above.
(8552) {1424082} [1424236]: HeadScript overrides each of append() , offsetSet() , prepend() , and set() to enforce usage of the special methods as listed above.
(8576) {1428708} [1428861]: HeadStyle overrides each of append() , offsetSet() , prepend() , and set() to enforce usage of the special methods as listed above.
*****************************************************************
========================= CLASS #562 =============================
(8538) {1421363} [1421494]: Internally, it stores each item as a stdClass token, which it later serializes using the itemToString() method.
(8553) {1424237} [1424368]: Internally, it stores each item as a stdClass token, which it later serializes using the itemToString() method.
(8577) {1428862} [1428993]: Internally, it stores each item as a stdClass token, which it later serializes using the itemToString() method.
*****************************************************************
========================= CLASS #563 =============================
(8539) {1421495} [1421646]: This allows you to perform checks on the items in the stack, and optionally modify these items by simply modifying the object returned.
(8554) {1424369} [1424520]: This allows you to perform checks on the items in the stack, and optionally modify these items by simply modifying the object returned.
(8578) {1428994} [1429145]: This allows you to perform checks on the items in the stack, and optionally modify these items by simply modifying the object returned.
*****************************************************************
========================= CLASS #564 =============================
(8543) {1421957} [1422939]: For instance, if you wish to specify SEO keywords, you&#39;d be creating a meta name tag with the name &#39;keywords&#39; and the content the keywords you wish to associate with your page: If you wishedto set some client-side caching rules, you&#39;d set http-equiv tags with the rules you wish to enforce: Another popular use for meta tags is setting the content type, character set, and language: As a final example, an easy way to display a transitional message before a redirect is using a &quot;meta refresh&quot;: When you&#39;re ready to place your meta tags in the layout, simply echo the helper: HeadScript Helper The HTML &lt;script&gt; element is used to either provide inline client-side scripting elements or link to a remote resource containing client-side scripting code.
(8591) {1431689} [1432017]: When you&#39;re finally ready to render the title in your layout script, simply echo the helper: InlineScript Helper The HTML &lt;script&gt; element is used to either provide inline client-side scripting elements or link to a remote resource containing client-side scripting code.
*****************************************************************
========================= CLASS #565 =============================
(8544) {1422940} [1422998]: The HeadScript helper allows you to manage both.
(8592) {1432018} [1432078]: The InlineScript helper allows you to manage both.
*****************************************************************
========================= CLASS #566 =============================
(8547) {1423409} [1423578]: HeadScript also allows capturing scripts; this can be useful if you want to create the client-side script programmatically, and then place it elsewhere.
(8573) {1428234} [1428409]: HeadStyle also allows capturing style declarations; this can be useful if you want to create the declarations programmatically, and then place them elsewhere.
*****************************************************************
========================= CLASS #567 =============================
(8548) {1423579} [1423641]: The usage for this will be showed in an example below.
(8574) {1428410} [1428472]: The usage for this will be showed in an example below.
*****************************************************************
========================= CLASS #568 =============================
(8556) {1424643} [1424831]: Use InlineScript for HTML Body Scripts HeadScript &#39;s sibling helper, InlineScript , should be used when you wish to include scripts inline in the HTML body .
(8594) {1432254} [1432394]: Use InlineScript for HTML Body Scripts InlineScript , should be used when you wish to include scripts inline in the HTML body .
*****************************************************************
========================= CLASS #569 =============================
(8557) {1424832} [1425010]: Placing scripts at the end of your document is a good practice for speeding up delivery of your page, particularly when using 3rd party analytics scripts.
(8595) {1432395} [1432573]: Placing scripts at the end of your document is a good practice for speeding up delivery of your page, particularly when using 3rd party analytics scripts.
*****************************************************************
========================= CLASS #570 =============================
(8562) {1425848} [1426385]: Order is often important with client-side scripting; you may need to ensure that libraries are loaded in a specific order due to dependencies each have; use the various append, prepend, and offsetSet directives to aid in this task: When you&#39;re finally ready to output all scripts in your layout script, simply echo the helper: Capturing Scripts Using the HeadScript Helper Sometimes you need to generate client-side scripts programmatically.
(8580) {1429267} [1429935]: HeadStyle Helper Basic Usage You may specify a new style tag at any time: Order is very important with CSS; you may need to ensure that declarations are loaded in a specific order due to the order of the cascade; use the various append, prepend, and offsetSet directives to aid in this task: When you&#39;re finally ready to output all style declarations in your layout script, simply echo the helper: Capturing Style Declarations Using the HeadStyle Helper Sometimes you need to generate CSS style declarations programmatically.
*****************************************************************
========================= CLASS #571 =============================
(8563) {1426398} [1426574]: While you could use string concatenation, heredocs, and the like, often it&#39;s easier just to do so by creating the script and sprinkling in PHP tags.
(8581) {1429937} [1430113]: While you could use string concatenation, heredocs, and the like, often it&#39;s easier just to do so by creating the styles and sprinkling in PHP tags.
*****************************************************************
========================= CLASS #572 =============================
(8564) {1426576} [1426779]: HeadScript lets you do just that, capturing it to the stack: The following assumptions are made: The script will be appended to the stack.
(8582) {1430115} [1430329]: HeadStyle lets you do just that, capturing it to the stack: The following assumptions are made: The style declarations will be appended to the stack.
*****************************************************************
========================= CLASS #573 =============================
(8565) {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8583) {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
*****************************************************************
========================= CLASS #574 =============================
(8567) {1427302} [1427485]: If you wish to specify any additional attributes for the &lt;script&gt; tag, pass them in an array as the third argument to captureStart() .
(8584) {1430605} [1430788]: If you wish to specify any additional attributes for the &lt;style&gt; tag, pass them in an array as the second argument to captureStart() .
*****************************************************************
========================= CLASS #575 =============================
(8630) {1437923} [1438123]: In addition, it offers a variety of methods for formatting the content stored in the container: setPrefix($prefix) sets text with which to prefix the content.
(8632) {1438229} [1438313]: setPostfix($prefix) sets text with which to append the content.
(8634) {1438420} [1438515]: setSeparator($prefix) sets text with which to separate aggregated content.
*****************************************************************
========================= CLASS #576 =============================
(8631) {1438124} [1438215]: Use getPrefix() at any time to determine what the current setting is.
(8633) {1438314} [1438406]: Use getPostfix() at any time to determine what the current setting is.
(8635) {1438516} [1438610]: Use getSeparator() at any time to determine what the current setting is.
(8638) {1438867} [1438958]: Use getIndent() at any time to determine what the current setting is.
*****************************************************************
========================= CLASS #577 =============================
(8672) {1444077} [1444162]: List of parameters Or use a list of parameters and add it to the method.
(8673) {1444172} [1444260]: Array of parameters Or use an array of parameters and add it to the method.
*****************************************************************
========================= CLASS #578 =============================
(8714) {1450210} [1450656]: You can specify alternate opening, closing, and separator content when rendering the errors by calling several methods on the helper: setElementStart($string) ; default is &#39;&lt;ul class=&quot;errors&quot;%s&quot;&gt;&lt;li&gt;&#39;, where %s is replaced with the attributes as specified in $options .
(8715) {1450678} [1450780]: setElementSeparator($string) ; default is &#39;&lt;/li&gt;&lt;li&gt;&#39;.
(8716) {1450802} [1450899]: setElementEnd($string) ; default is &#39;&lt;/li&gt;&lt;/ul&gt;&#39;.
*****************************************************************
========================= CLASS #579 =============================
(8742) {1454464} [1454632]: In our &quot;specialPurpose&quot; helper example, the required method declaration would be &quot;public function specialPurpose()&quot;.
(8747) {1454990} [1455137]: Again using our &quot;specialPurpose&quot; helper example, the file has to be named &quot;SpecialPurpose.php&quot;.
*****************************************************************
========================= CLASS #580 =============================
(8771) {1458888} [1458995]: May be set via setEncoding() or the encoding option to the constructor.
(8773) {1459080} [1459167]: May be set via setEscape() or the escape option to the constructor.
*****************************************************************
========================= CLASS #581 =============================
(8782) {1460421} [1460501]: getScriptPaths() will retrieve all registered script paths.
(8784) {1460639} [1460719]: getHelperPaths() will retrieve all registered helper paths.
(8786) {1460857} [1460937]: getFilterPaths() will retrieve all registered filter paths.
*****************************************************************
========================= CLASS #582 =============================
(8783) {1460519} [1460621]: getHelperPath($helper) will retrieve the resolved path to the named helper class.
(8785) {1460737} [1460839]: getFilterPath($filter) will retrieve the resolved path to the named filter class.
*****************************************************************
