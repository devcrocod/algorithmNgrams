========================= CLASS #1 =============================
(3) {684} [822]: PHP File Formatting General For files that contain only PHP code, the closing tag (&quot;?&gt;&quot;) is never permitted.
(2754) {493357} [493390]: &quot;) symbol in the expression.
(5686) {999585} [999603]: &quot;3.14&quot;).
(6585) {1126535} [1126553]: &quot;arg1&quot;).
*****************************************************************
========================= CLASS #2 =============================
(20) {2463} [2516]: Class names may only contain alphanumeric characters.
(47) {6234} [6317]: Variables Variable names may only contain alphanumeric characters.
*****************************************************************
========================= CLASS #3 =============================
(23) {2818} [2940]: If a class name is comprised of more than one word, the first letter of each new word must be capitalized.
(36) {4762} [4885]: When a function name consists of more than one word, the first letter of each new word must be capitalized.
*****************************************************************
========================= CLASS #4 =============================
(28) {3615} [3770]: code written by a framework end-user and not Zend or one of the framework&#39;s partner companies, must never start with &quot;Zend_&quot;.
(379) {79419} [79430]: the &#39; .
*****************************************************************
========================= CLASS #5 =============================
(42) {5640} [5831]: For methods on objects that are declared with the &quot;private&quot; or &quot;protected&quot; construct, the first character of the variable name must be a single underscore.
(50) {6456} [6651]: For class member variables that are declared with the &quot;private&quot; or &quot;protected&quot; construct, the first character of the variable name must be a single underscore.
*****************************************************************
========================= CLASS #6 =============================
(43) {5832} [5916]: This is the only acceptable usage of an underscore in a method name.
(51) {6652} [6738]: This is the only acceptable usage of an underscore in a variable name.
*****************************************************************
========================= CLASS #7 =============================
(44) {5917} [6004]: Methods declared &quot;public&quot; may never start with an underscore.
(52) {6739} [6835]: Member variables declared &quot;public&quot; may never start with an underscore.
*****************************************************************
========================= CLASS #8 =============================
(75) {11211} [11311]: The brace is always written on the line underneath the class name (&quot;one true brace&quot; form).
(88) {13015} [13152]: Like classes, the brace is always written on the line underneath the function name (&quot;one true brace&quot; form).
(102) {15385} [15457]: The closing brace is always written on its own line.
*****************************************************************
========================= CLASS #9 =============================
(84) {12294} [12450]: Member variables always declare their visibility by using one of the private , protected , or public constructs.
(87) {12809} [12976]: Methods inside classes must always declare their visibility by using one of the private , protected , or public constructs.
*****************************************************************
========================= CLASS #10 =============================
(115) {17661} [18497]: Files Every file that contains PHP code must have a header block at the top of the file that contains these phpDocumentor tags at a minimum: Classes Every class must have a docblock that contains these phpDocumentor tags at a minimum: Functions Every function, including object methods, must have a docblock that contains at a minimum: A description of the function All of the arguments All of the possible return values It is not necessary to use the &quot;@access&quot; tag because the access level is already known from the &quot;public&quot;, &quot;private&quot;, or &quot;protected&quot; construct used to declare the function.
(4682) {829235} [829371]: Access sets the visibility of items to be returned, as &quot;all&quot;, &quot;public&quot;, or &quot;private&quot;.
*****************************************************************
========================= CLASS #11 =============================
(124) {19723} [19855]: If you anticipate working with the latest Zend Framework developments, consider using a Subversion (SVN) client.
(125) {19894} [19928]: Using a Subversion (SVN) client.
*****************************************************************
========================= CLASS #12 =============================
(148) {23173} [23268]: This can help guide you to know which extensions are required for your application.
(153) {27869} [27964]: This can help guide you to know which extensions are required for your application.
*****************************************************************
========================= CLASS #13 =============================
(149) {23281} [23370]: Not all extensions used by Zend Framework are required for every application.
(154) {27977} [28066]: Not all extensions used by Zend Framework are required for every application.
*****************************************************************
========================= CLASS #14 =============================
(165) {38347} [38650]: In order to use the rule assertion interface, a developer writes a class that implements the assert() method of the interface: Once an assertion class is available, the developer must supply an instance of the assertion class when assigning conditional rules.
(7603) {1284600} [1284626]: In order to use the Yahoo!
*****************************************************************
========================= CLASS #15 =============================
(189) {43259} [43368]: Zend_Acl provides Zend_Acl_Resource_Interface to facilitate developers&#39; creating Resources.
(200) {45147} [45248]: Zend_Acl provides Zend_Acl_Role_Interface to facilitate developers&#39; creating Roles.
*****************************************************************
========================= CLASS #16 =============================
(190) {43369} [43553]: A class need only implement this interface, which consists of a single method, getResourceId() , in order for Zend_Acl to consider the object to be a Resource.
(201) {45249} [45425]: A class need only implement this interface, which consists of a single method, getRoleId() , in order for Zend_Acl to consider the object to be a Role.
*****************************************************************
========================= CLASS #17 =============================
(205) {45710} [45872]: For example, a user Role, such as &quot;sally&quot;, may belong to one or more parent Roles, such as &quot;editor&quot; and &quot;administrator&quot;.
(206) {45873} [46111]: The developer can assign rules to &quot;editor&quot; and &quot;administrator&quot; separately, and &quot;sally&quot; would inherit such rules from both, without having to assign rules directly to &quot;sally&quot;.
*****************************************************************
========================= CLASS #18 =============================
(208) {46276} [46373]: The following example illustrates the ambiguity condition and how Zend_Acl solves it.
(6309) {1090106} [1090144]: The following example is not complete.
*****************************************************************
========================= CLASS #19 =============================
(212) {46816} [47398]: When necessary, Zend_Acl searches for access rules defined not only for the queried Role (herein, &quot; someUser &quot;), but also upon the Roles from which the queried Role inherits (herein, &quot; guest &quot;, &quot; member &quot;, and &quot; admin &quot;): Since there is no rule specifically defined for the &quot; someUser &quot; Role and &quot; someResource &quot;, Zend_Acl must search for rules that may be defined for Roles that &quot; someUser &quot; inherits.
(213) {47399} [47506]: First, the &quot; admin &quot; role is visited, and there is no access rule defined for it.
(214) {47507} [47712]: Next, the &quot; member &quot; role is visited, and Zend_Acl finds that there is a rule specifying that &quot; member &quot; is allowed access to &quot; someResource &quot;.
(218) {48367} [48549]: In this case, since the &quot; member &quot; Role is examined before the &quot; guest &quot; Role, the example code would print &quot; allowed &quot;.
*****************************************************************
========================= CLASS #20 =============================
(279) {62312} [62430]: identityColumn : This is the name of the database table column used to represent the identity.
(281) {62538} [62660]: credentialColumn : This is the name of the database table column used to represent the credential.
*****************************************************************
========================= CLASS #21 =============================
(286) {63162} [63213]: )&#39; or &#39;PASSWORD(?
(516) {105872} [106162]: Specify this backend using a word separator -- &#39;-&#39;, &#39;.&#39;, &#39; &#39;, or &#39;_&#39; -- between the words &#39;Zend&#39; and &#39;Platform&#39; when using the Zend_Cache::factory() method: There is no options for this backend.
(557) {118176} [118352]: When specifying them to the factory, separate them using a word separator, such as a space (&#39; &#39;), hyphen (&#39;-&#39;), or period (&#39;.&#39;).
(584) {122069} [122130]: Always use Zend_Cache::factory() to get frontend instances.
(841) {161605} [161842]: Since controller and action names may contain word delimiter characters such as &#39;_&#39;, &#39;.&#39;, and &#39;-&#39;, render() normalizes these to &#39;-&#39; when determining the script name.
(922) {176062} [176082]: [your suffix]&#39;).
(1014) {188874} [189245]: On the client end, your AJAX library will simply request the endpoints &#39;/comment/view&#39;, &#39;/comment/form&#39;, and &#39;/comment/process&#39;, and pass the &#39;format&#39; parameter: &#39;/comment/view/format/html&#39;, &#39;/comment/form/format/html&#39;, &#39;/comment/process/format/json&#39;.
(1127) {208854} [209063]: Keys for this array may include any of the path specification keys (&#39;moduleDir&#39;, &#39;module&#39;, &#39;controller&#39;, &#39;action&#39;, and &#39;suffix&#39;).
(1130) {209461} [209589]: Word delimiters occurring in module, controller, or action names will be replaced with dashes (&#39;-&#39;).
(1384) {258950} [259162]: When writing URLs, the documented way to write camelCased action names is to use a word separator; these are &#39;.&#39; or &#39;-&#39; by default, but may be configured in the dispatcher.
(1468) {276407} [276582]: The above example contains three module controllers, &#39;Blog_IndexController&#39;, &#39;News_IndexController&#39;, and &#39;News_ListController&#39;.
(1514) {283848} [284068]: setErrorHandler() takes an associative array, which may contain any of the keys &#39;module&#39;, &#39;controller&#39;, or &#39;action&#39;, with which it will set the appropriate values.
(1682) {313565} [313665]: Each array element is an array with the keys &#39;name&#39; and &#39;value&#39;.
(1807) {334424} [334565]: There are three special variables which can be used in your routes - &#39;module&#39;, &#39;controller&#39; and &#39;action&#39;.
(1908) {348527} [348662]: For example is in english the &#39;,&#39; sign used as seperator for thousands, and in german the &#39;.&#39; sign.
(2620) {471798} [471950]: The argument can be an associative array containing any or all of the keys &#39; enabled &#39;, &#39; instance &#39;, and &#39; class &#39;.
(2621) {471951} [472079]: The &#39; enabled &#39; and &#39; instance &#39; keys correspond to the boolean and instance types documented above.
(2622) {472080} [472171]: The &#39; class &#39; key is used to name a class to use for a custom profiler.
(2625) {472293} [472394]: The &#39; class &#39; option is ignored when the &#39; instance &#39; option is supplied.
(2899) {514234} [514422]: In the example PHP code above, the rule keys in the Bugs table class are: &#39;Reporter&#39; , &#39;Engineer&#39; , &#39;Verifier&#39; , and &#39;Product&#39; .
(2927) {518096} [518146]: This is the rule &#39;Reporter&#39; .
(2949) {521748} [521786]: This is the rule &#39;Reporter&#39; .
(2974) {525800} [525895]: In this case, $rule1 is &#39;Reporter&#39; and $rule2 is &#39;Product&#39; .
(3442) {604308} [604543]: For example, assuming the two rule names &#39;moduleDir&#39; and &#39;module&#39;, the &#39;moduleDir&#39; rule should appear before module since &#39;module&#39; is contained within &#39;moduleDir&#39;.
(3443) {604545} [604762]: If &#39;module&#39; were added before &#39;moduleDir&#39;, &#39;module&#39; will match part of &#39;moduleDir&#39; and process it leaving &#39;Dir&#39; inside of the target uninflected.
(3655) {640245} [640373]: The &#39;fields&#39;, &#39;messages&#39;, and &#39;default&#39; metacommands cannot be set using this technique.
(4923) {871068} [871219]: This method takes the GET parameter&#39;s name as it&#39;s first parameter, and the GET parameter&#39;s value as it&#39;s second parameter.
(5271) {933017} [933227]: Zend_Loader::loadFile() is used for loading, so the class name may only contain alphanumeric characters and the hyphen (&#39;-&#39;), underscore (&#39;_&#39;), and period (&#39;.&#39;).
(5306) {942379} [942548]: Currently, the only practical difference relates to the specifier for minutes (&#39;m&#39; using the ISO default, and &#39;i&#39; using the PHP date format).
(5528) {975086} [975192]: If you omit the currency then the &#39;DEFAULT&#39; rounding will be returned.
(5708) {1002037} [1002157]: German for example defines &#39;,&#39; as precission seperation and in english the &#39;.&#39; sign is used.
(6063) {1054038} [1054080]: Memory container &#39;value&#39; property.
(6856) {1163292} [1163368]: Fields&#39; names are defined at your discretion in the addField() method.
(6878) {1166227} [1166292]: The &#39;title&#39; field is actually the /html/head/title value.
(6886) {1166954} [1167103]: The field &#39;name&#39; is taken from &#39;name&#39; attribute, and the &#39;content&#39; attribute populates the field &#39;value&#39;.
(6906) {1170604} [1170652]: &#39;-&#39; is used to define a prohibited term.
(6908) {1170786} [1170836]: If it&#39;s omitted, then all fields are searched.
(6910) {1171156} [1171197]: false is used to define prohibited term.
(6919) {1172520} [1172572]: &#39;-&#39; is used to define a prohibited subquery.
(6921) {1172706} [1172756]: If it&#39;s omitted, then all fields are searched.
(6923) {1173087} [1173132]: false is used to define prohibited subquery.
(6927) {1173573} [1173635]: The &#39;?&#39; symbol is used as a single character wildcard.
(6947) {1176392} [1176569]: download&#39; and match &#39;zend platform download&#39;, &#39;zend studio download&#39;, &#39;zend core download&#39;, &#39;zend framework download&#39;, and so on.
(6948) {1176592} [1176673]: will search for the phrase &#39;zend framework&#39; in the &#39;title&#39; field.
(6953) {1177226} [1177268]: will search for the phrase &#39;zend ?????
(6954) {1177269} [1177446]: download&#39; and match &#39;zend platform download&#39;, &#39;zend studio download&#39;, &#39;zend core download&#39;, &#39;zend framework download&#39;, and so on.
(6955) {1177469} [1177550]: will search for the phrase &#39;zend framework&#39; in the &#39;title&#39; field.
(8262) {1380193} [1380335]: There are three supported tokens which can be used: A point &#39;.&#39;, a underline &#39;_&#39;, or a hyphen &#39;-&#39;.
(8266) {1380587} [1380724]: The first one is the point &#39;.&#39;, the second is the underline &#39;_&#39; and the third the hyphen &#39;-&#39;.
(8533) {1420110} [1420334]: Meta tags may be either of the &#39;http-equiv&#39; or &#39;name&#39; types, must contain a &#39;content&#39; attribute, and can also have either of the &#39;lang&#39; or &#39;scheme&#39; modifier attributes.
(8534) {1420349} [1420751]: The HeadMeta helper supports the following methods for setting and adding meta tags: The $keyValue item is used to define a value for the &#39;name&#39; or &#39;http-equiv&#39; key; $content is the value for the &#39;content&#39; key, and $modifiers is an optional associative array that can contain keys for &#39;lang&#39; and/or &#39;scheme&#39;.
(8559) {1425201} [1425437]: These include &#39;type&#39;, &#39;charset&#39;, &#39;defer&#39;, &#39;language&#39;, and &#39;src.&#39; However, some javascript frameworks, notably Dojo , utilize custom attributes in order to modify behavior.
*****************************************************************
========================= CLASS #22 =============================
(299) {66374} [66665]: Digest Authentication Introduction Digest authentication is a method of HTTP authentication that improves upon Basic authentication by providing a way to authenticate without having to transmit the password in clear text across the network.
(304) {68403} [68620]: Digest authentication is a method of HTTP authentication that improves upon Basic authentication by providing a way to authenticate without having to transmit the password in clear text across the network.
*****************************************************************
========================= CLASS #23 =============================
(319) {70945} [71141]: digest_domains Yes, when &#39;accept_schemes&#39; contains &#39;digest&#39; Space-separated list of URIs for which the same authentication information is valid.
(321) {71251} [71418]: nonce_timeout Yes, when &#39;accept_schemes&#39; contains &#39;digest&#39; Sets the number of seconds for which the nonce is valid.
*****************************************************************
========================= CLASS #24 =============================
(330) {72386} [72492]: Basic authentication expects to receive the Base64 encoded version of the user&#39;s password.
(4541) {803739} [803804]: The user&#39;s password should normally be provided as cleartext.
*****************************************************************
========================= CLASS #25 =============================
(358) {76539} [76630]: The names of the servers (e.g., server1 and server2 ) are largely arbitrary.
(377) {79075} [79101]: The names of servers (e.g.
*****************************************************************
========================= CLASS #26 =============================
(393) {82015} [82039]: This option is required.
(415) {85089} [85113]: This option is required.
*****************************************************************
========================= CLASS #27 =============================
(396) {82219} [82495]: If useSsl is false , the default port value is 389. useSsl If true , this value indicates that the LDAP client should use SSL / TLS encrypted transport.
(5189) {919816} [919924]: useSsl Whether or not the LDAP client should use SSL / TLS encrypted transport.
*****************************************************************
========================= CLASS #28 =============================
(397) {82496} [82640]: A value of true is strongly favored in production environments to prevent passwords from be transmitted in clear text.
(5190) {919925} [920101]: A value of true is strongly favored in production environments to prevent passwords from be transmitted in clear text.
*****************************************************************
========================= CLASS #29 =============================
(398) {82641} [82787]: The default value is false , as servers frequently require that a certificate be installed separately after installation.
(408) {84320} [84373]: The default value is false .
(1923) {350158} [350183]: The default value is 2 .
(3730) {653217} [653268]: The default value is PHP_EOL .
(5191) {920102} [920252]: The default value is false , as servers frequently require that a certificate be installed separately after installation.
(5196) {920751} [920808]: The default value is false .
*****************************************************************
========================= CLASS #30 =============================
(400) {82938} [83029]: username The DN of the account used to perform account DN lookups.
(404) {83554} [83651]: password The password of the account used to perform account DN lookups.
*****************************************************************
========================= CLASS #31 =============================
(420) {85816} [86050]: Values are as follows: 2 for traditional username style names (e.g., alice ), 3 for backslash-style names (e.g., FOO\alice ) or 4 for principal style usernames (e.g., alice@foo.net ).
(421) {86051} [86122]: The default value is 4 (e.g., alice@foo.net ).
*****************************************************************
========================= CLASS #32 =============================
(423) {86548} [86689]: See the Account Name Canonicalization section in the Zend_Ldap documentation for details.
(5200) {921267} [921349]: See the Account Name Canonicalization section below.
*****************************************************************
========================= CLASS #33 =============================
(425) {87275} [87434]: accountDomainName The FQDN domain name for which the target LDAP server is an authority (e.g., example.com ).
(5201) {921375} [921507]: accountDomainName The FQDN domain for which the target LDAP server is an authority (e.g., example.com).
*****************************************************************
========================= CLASS #34 =============================
(430) {88265} [88427]: accountDomainNameShort The &#39;short&#39; domain for which the target LDAP server is an authority (e.g., FOO ).
(5202) {921533} [921661]: accountDomainNameShort The &#39;short&#39; domain for which the target LDAP server is an authority.
*****************************************************************
========================= CLASS #35 =============================
(432) {88571} [88874]: This option should be used to specify the NetBIOS domain name for Windows networks but may also be used by non-AD servers (e.g., for consistency when multiple sets of server options with the backslash style accountCanonicalForm ).
(5203) {921662} [921834]: This is usually used to specify the NetBIOS domain name for Windows networks but may also be used by non-AD servers.
*****************************************************************
========================= CLASS #36 =============================
(434) {89066} [89162]: accountFilterFormat The LDAP search filter used to search for accounts.
(5204) {921860} [921960]: accountFilterFormat The LDAP search filter used to search for accounts.
*****************************************************************
========================= CLASS #37 =============================
(435) {89163} [89320]: This string is a printf() -style expression that must contain one &#39; %s &#39; to accomodate the username.
(5205) {921961} [922126]: This string is a printf() style expression that must contain one &#39; %s &#39; to accomodate the username.
*****************************************************************
========================= CLASS #38 =============================
(436) {89321} [89597]: The default value is &#39; (&amp;(objectClass=user)(sAMAccountName=%s)) &#39;, unless bindRequiresDn is set to true , in which case the default is &#39; (&amp;(objectClass=posixAccount)(uid=%s)) &#39;.
(5127) {907453} [907504]: Default value is &#39;content&#39;.
(5206) {922127} [922414]: The default value is &#39; (&amp;(objectClass=user)(sAMAccountName=%s)) &#39; unless bindRequiresDn is set to true , in which case the default is &#39; (&amp;(objectClass=posixAccount)(uid=%s)) &#39;.
(6857) {1163399} [1163474]: Java Lucene uses the &#39;contents&#39; field as a default field to search.
*****************************************************************
========================= CLASS #39 =============================
(442) {90643} [90701]: If the authentication is successful, this string is empty.
(444) {90914} [90996]: If the authentication is successful, this string is empty.
*****************************************************************
========================= CLASS #40 =============================
(447) {91462} [91739]: Common Options for Specific Servers Options for Active Directory For ADS, the following options are noteworthy: Options for Active Directory Name Additional Notes host As with all servers, this option is required.
(449) {91957} [92038]: baseDn As with all servers, this option is required.
*****************************************************************
========================= CLASS #41 =============================
(448) {91765} [91931]: useSsl For the sake of security, this should be true if the server has the necessary certificate installed.
(461) {94431} [94597]: useSsl For the sake of security, this should be true if the server has the necessary certificate installed.
*****************************************************************
========================= CLASS #42 =============================
(462) {94623} [94789]: username Required and must be a DN, as OpenLDAP requires that usernames be in DN form when performing a bind.
(465) {95088} [95262]: bindRequiresDn Required and must be true , as OpenLDAP requires that usernames be in DN form when performing a bind.
*****************************************************************
========================= CLASS #43 =============================
(478) {97648} [97733]: Zend_OpenId takes advantage of the GMP extension , where available.
(6275) {1085007} [1085092]: Zend_OpenId takes advantage of the GMP extension , where available.
*****************************************************************
========================= CLASS #44 =============================
(479) {97734} [97847]: Consider enabling the GMP extension for better performance when using Zend_Auth_Adapter_OpenId .
(6276) {1085093} [1085193]: Consider enabling the GMP extension for better performance when using Zend_OpenId .
*****************************************************************
========================= CLASS #45 =============================
(495) {100190} [100318]: Zend_Cache backends Zend_Cache_Backend_File This backends stores cache records into files (in a choosen directory).
(506) {103903} [104004]: Zend_Cache_Backend_Memcached This backends stores cache records into a memcached server.
*****************************************************************
========================= CLASS #46 =============================
(509) {104212} [104362]: Be careful : with this backend, &quot;tags&quot; are not supported for the moment as the &quot;doNotTestCacheValidity=true&quot; argument.
(511) {105332} [105482]: Be careful : with this backend, &quot;tags&quot; are not supported for the moment as the &quot;doNotTestCacheValidity=true&quot; argument.
*****************************************************************
========================= CLASS #47 =============================
(526) {109053} [109394]: ignore_user_abort boolean false if set to true, the core will set the ignore_user_abort PHP flag inside the save() method to avoid cache corruptions in some cases Examples An example is given in the manual at the very beginning.
(530) {110148} [110230]: Examples An example is given in the manual at the very beginning.
(3235) {568477} [568534]: You can do that with the save() method.
*****************************************************************
========================= CLASS #48 =============================
(527) {109425} [109846]: If you store only strings into cache (because with &quot;automatic_serialization&quot; option, it&#39;s possible to store some booleans), you can use a more compact construction like: If you want to cache multiple blocks or data instances, the idea is the same: Zend_Cache_Frontend_Output Introduction Zend_Cache_Frontend_Output is an output-capturing frontend.
(3614) {632727} [632787]: The default value of this metacommand is &#39;optional&#39;.
(3622) {634214} [634261]: There is no default value for this metacommand.
(3629) {635311} [635360]: The default value of this metacommand is false .
(3636) {636819} [636868]: The default value of this metacommand is false .
*****************************************************************
========================= CLASS #49 =============================
(538) {113001} [113095]: It&#39;s really interesting for examples in configuration or templates issues.
(6165) {1069728} [1069792]: It doesn&#39;t provide any additional functionality.
(6432) {1106352} [1106384]: It&#39;s a whole page initially.
(6462) {1108995} [1109047]: It&#39;s your choice, which approach should be used.
(6465) {1109547} [1109592]: It&#39;s an array of Zend_Pdf_Page objects.
*****************************************************************
========================= CLASS #50 =============================
(579) {121219} [121375]: &#39;Cache hit&#39; is a term for a condition when a cache record is found, is valid and is &#39;fresh&#39; (in other words hasn&#39;t expired yet).
(580) {121376} [121416]: &#39;Cache miss&#39; is everything else.
*****************************************************************
========================= CLASS #51 =============================
(633) {129808} [129919]: In this example there are configuration data for both a production system and for a staging system.
(653) {132427} [132538]: In this example there are configuration data for both a production system and for a staging system.
*****************************************************************
========================= CLASS #52 =============================
(634) {129920} [130077]: Because the staging system configuration data are very similar to those for production, the staging section inherits from the production section.
(654) {132539} [132696]: Because the staging system configuration data are very similar to those for production, the staging section inherits from the production section.
*****************************************************************
========================= CLASS #53 =============================
(635) {130078} [130307]: In this case, the decision is arbitrary and could have been written conversely, with the production section inheriting from the staging section, though this may not be the case for more complex situations.
(655) {132697} [132926]: In this case, the decision is arbitrary and could have been written conversely, with the production section inheriting from the staging section, though this may not be the case for more complex situations.
*****************************************************************
========================= CLASS #54 =============================
(636) {130308} [130534]: Suppose, then, that the following configuration data are contained in /path/to/config.ini : Next, assume that the application developer needs the staging configuration data from the INI file.
(656) {132927} [133153]: Suppose, then, that the following configuration data are contained in /path/to/config.xml : Next, assume that the application developer needs the staging configuration data from the XML file.
*****************************************************************
========================= CLASS #55 =============================
(666) {134853} [134978]: The setHelp() method is the only way to define help strings if you declared the options using the short syntax.
(675) {135885} [136008]: The setAliases() method is the only way to define aliases if you declared the options using the short syntax.
*****************************************************************
========================= CLASS #56 =============================
(673) {135561} [135763]: Using setAliases() In the example above, after declaring these aliases, &quot; -a &quot;, &quot; --apple &quot; and &quot; --apfel &quot; are aliases for each other.
(674) {135776} [135862]: Also &quot; -p &quot; and &quot; --pear &quot; are aliases for each other.
(690) {138459} [138568]: That is, &quot; -a &quot; and &quot; -A &quot; will be considered to be synonymous flags.
(789) {150920} [151128]: Using the Short Syntax The example above shows using Zend_Console_Getopt to declare that options may be given as &quot; -a &quot;, &quot; -b &quot;, or &quot; -p &quot;.
(800) {152937} [153054]: &quot; --apple &quot; and &quot; -a &quot; are aliases for each other, and the option takes no parameter.
(801) {153067} [153202]: &quot; --banana &quot; and &quot; -b &quot; are aliases for each other, and the option takes a mandatory integer parameter.
(802) {153215} [153359]: Finally, &quot; --pear &quot; and &quot; -p &quot; are aliases for each other, and the option may take an optional string parameter.
*****************************************************************
========================= CLASS #57 =============================
(676) {136018} [136192]: Adding Argument Lists By default, Zend_Console_Getopt uses $_SERVER[&#39;argv&#39;] for the array of command-line arguments to parse.
(782) {150087} [150131]: This defaults to $_SERVER[&#39;argv&#39;] .
*****************************************************************
========================= CLASS #58 =============================
(682) {137034} [137213]: You can also specify configuration options using the setOptions() method, or you can set an individual option using the setOption() method.
(7954) {1341379} [1341434]: With the setOptions() method, you can set any option.
*****************************************************************
========================= CLASS #59 =============================
(692) {138653} [138896]: Zend_Console_Getopt::CONFIG_RULEMODE (&quot;ruleMode&quot;) may have values Zend_Console_Getopt::MODE_ZEND (&quot;zend&quot;) and Zend_Console_Getopt::MODE_GNU (&quot;gnu&quot;).
(8069) {1356600} [1356681]: The usage of the prefix &quot;Zend&quot; should be limited to the Zend_Framework.
*****************************************************************
========================= CLASS #60 =============================
(729) {143445} [143485]: As an array: use the toArray() method.
(8609) {1434451} [1434517]: Object implementing toArray() method .
*****************************************************************
========================= CLASS #61 =============================
(748) {145727} [145827]: For example, &quot; -c &quot; enables different features in grep , ls , and tar .
(8481) {1410777} [1410812]: For example, &quot;0.9.0beta&quot;.
*****************************************************************
========================= CLASS #62 =============================
(755) {146549} [146674]: A flag is preceded conventionally by one or two dashes (&quot; - &quot; or &quot; -- &quot;).
(5258) {931394} [931544]: The $filename may only contain alphanumeric characters, dashes (&quot;-&quot;), underscores (&quot;_&quot;), or periods (&quot;.&quot;).
*****************************************************************
========================= CLASS #63 =============================
(756) {146691} [146793]: A single dash precedes a single-character flag or a cluster of single-character flags.
(768) {148168} [148213]: Only single-character flags can be clustered.
*****************************************************************
========================= CLASS #64 =============================
(806) {154053} [154232]: Zend_Controller&#39;s routing and dispatch handling will autodiscover any methods ending in &#39;Action&#39; in your class as potential controller actions.
(1414) {265005} [265127]: First, look at your action methods (the methods ending in &#39;Action&#39;), and determine what each is doing.
*****************************************************************
========================= CLASS #65 =============================
(850) {163238} [163388]: You may set this option globally within the controller using the setRedirectExit() accessor.
(852) {163633} [163790]: You may set this option globally within the controller using the setRedirectPrependBase() accessor.
(855) {164055} [164205]: You may set this option globally within the controller using the setRedirectCode() accessor.
*****************************************************************
========================= CLASS #66 =============================
(868) {166833} [167057]: ActionStack The ActionStack helper allows you to push requests to the ActionStack front controller plugin, effectively helping you create a queue of actions to execute during the request.
(5072) {898534} [898566]: Custom front controller plugins.
*****************************************************************
========================= CLASS #67 =============================
(881) {169277} [169352]: Typically, this is called within prepareAutoCompletion() .
(882) {169327} [169352]: prepareAutoCompletion() .
*****************************************************************
========================= CLASS #68 =============================
(894) {171603} [171713]: We simply define a method by which to request, and assigning it to the &#39;test&#39; element.
(902) {173101} [173196]: Next, we check for a &#39;test&#39; parameter, and compare it against our data.
*****************************************************************
========================= CLASS #69 =============================
(895) {171744} [171939]: Next, let&#39;s create the form element for which we want AutoCompletion: Here, we simply create a form with &#39;test&#39; and &#39;go&#39; methods.
(6931) {1174173} [1174328]: Query string: field1:test~ This query matches documents containing &#39;test&#39; &#39;text&#39; &#39;best&#39; words and others.
*****************************************************************
========================= CLASS #70 =============================
(901) {172857} [173084]: First, we look to make sure we have a post request, and that there is a &#39;format&#39; parameter set to the value &#39;ajax&#39;; these are simply to help reduce spurious queries to the action.
(925) {176363} [176458]: By default, it looks for the &#39;format&#39; parameter, though this may be configured.
*****************************************************************
========================= CLASS #71 =============================
(919) {175532} [175698]: As an example, let&#39;s consider the following controller: Let&#39;s say that we want the listAction() to also be available in an XML format.
(8687) {1445632} [1445686]: Let&#39;s say we want a helper named &#39;fooBar&#39;.
*****************************************************************
========================= CLASS #72 =============================
(920) {175699} [175922]: Instead of creating a different action, we can hint that it can return an XML response: What this will do is: Set the &#39;Content-Type&#39; response header to &#39;text/xml&#39;.
(929) {177258} [177445]: The JSON context sets the &#39;Content-Type&#39; response header to &#39;application/json&#39;, and the view script suffix to &#39;json.phtml&#39;.
(933) {177900} [178077]: The XML context sets the &#39;Content-Type&#39; response header to &#39;text/xml&#39;, and the view script suffix to &#39;xml.phtml&#39;.
(1026) {191015} [191093]: Sets the &#39;Content-Type&#39; response header to &#39;application/json&#39;.
(4900) {866655} [866771]: As a matter of fact, only the &#39;Content-length&#39; and &#39;Content-type&#39; headers are reset.
*****************************************************************
========================= CLASS #73 =============================
(923) {176101} [176227]: Now, you&#39;ll need to create a new view script, &#39;news/list.xml.phtml&#39;, which will create and render the XML.
(934) {178078} [178156]: You will need to create a new view script for the context.
*****************************************************************
========================= CLASS #74 =============================
(938) {178431} [178513]: The easiest way to add a new context is via the addContext() method.
(951) {180158} [180173]: addContexts() .
*****************************************************************
========================= CLASS #75 =============================
(939) {178514} [178611]: This method takes two arguments, the name of the context, and an array specification.
(2878) {511769} [511826]: This method takes two optional arguments.
*****************************************************************
========================= CLASS #76 =============================
(949) {179977} [180060]: $contexts array should be an array of context/specification pairs.
(956) {180513} [180577]: Returns an array of context/specification pairs.
*****************************************************************
========================= CLASS #77 =============================
(953) {180294} [180371]: getContext($context) : retrieve a single context by name.
(957) {180591} [180665]: removeContext($context) : remove a single context by name.
(990) {185485} [185573]: getCallbacks($context) : retrieve all callbacks for a given context.
(992) {185655} [185743]: clearCallbacks($context) : remove all callbacks for a given context.
*****************************************************************
========================= CLASS #78 =============================
(955) {180474} [180512]: getContexts() : retrieve all contexts.
(3733) {653486} [653522]: getOptions() : retrieve all options.
*****************************************************************
========================= CLASS #79 =============================
(959) {180759} [180797]: clearContexts() : remove all contexts.
(3735) {653594} [653630]: clearOptions() : remove all options.
*****************************************************************
========================= CLASS #80 =============================
(966) {181823} [181976]: The following methods can be used to build the context mappings: $context may be a single context, or an array of contexts.
(969) {182282} [182361]: $context may be a single context, or an array of contexts.
(973) {182712} [182790]: $context may be a single context or an array of contexts.
*****************************************************************
========================= CLASS #81 =============================
(974) {182804} [183147]: Initializizing Context Switching To initialize context switching, you need to call initContext() in your action controller: In some cases, you may want to force the context used; for instance, you may only want to allow the XML context if context switching is activated.
(998) {186683} [186775]: You should do this before calling initContext() .
*****************************************************************
========================= CLASS #82 =============================
(975) {183148} [183424]: You can do so by passing the context to initContext() : &lt;?php $contextSwitch-&gt;initContext(&#39;xml&#39;); ?&gt; Additional Functionality A variety of methods can be used to alter the behaviour of the ContextSwitch helper.
(978) {183835} [184050]: &lt;?php $contextSwitch-&gt;setAutoJsonSerialization(false); $contextSwitch-&gt;initContext(); ?&gt; You can retrieve the value of the flag with getAutoJsonSerialization() .
*****************************************************************
========================= CLASS #83 =============================
(984) {184851} [184946]: addHeader() , so if the header already exists, an exception will be thrown.
(2002) {359952} [360013]: If it does not exist an exception will be thrown.
*****************************************************************
========================= CLASS #84 =============================
(1012) {188406} [188652]: Allowing Actions to Respond To Ajax Requests In this following example, we&#39;re allowing requests to the actions &#39;view&#39;, &#39;form&#39;, and &#39;process&#39; to respond to AJAX requests.
(1013) {188653} [188843]: In the first two cases, &#39;view&#39; and &#39;form&#39;, we&#39;ll return HTML snippets with which to update the page; in the latter, we&#39;ll return JSON.
(1965) {355658} [355694]: In our case &#39;03.March.2000&#39;.
(3704) {649251} [649371]: We&#39;ll need a landing page for the form, and then a &#39;process&#39; action for processing the form.
*****************************************************************
========================= CLASS #85 =============================
(1019) {189888} [190094]: It is generally a good idea that if you plan on using Zend_Session or Zend_Session_Namespace , that you initialize with Zend_Session::start() in your bootstrap file.
(7699) {1297355} [1297392]: Correct: Use Zend_Session::start() .
*****************************************************************
========================= CLASS #86 =============================
(1034) {192593} [192694]: setGoto() can be used to set a default URL to use if none is passed to goto() .
(1037) {193179} [193286]: setGotoUrl() can be used to set a default URL to use if none is passed to gotoUrl() .
*****************************************************************
========================= CLASS #87 =============================
(1047) {195158} [195278]: Using goto()&#39;s _forward() API goto() &#39;s API mimics that of Zend_Controller_Action::_forward() .
(1436) {270260} [270345]: Zend_Controller_Action::_forward() &#39;s arguments have changed.
*****************************************************************
========================= CLASS #88 =============================
(1064) {199261} [199358]: Each time postDispatch() is called, it will call render() for the current action.
(1067) {199750} [199871]: postDispatch() will not automatically call render() in the current controller.
(1069) {199958} [200059]: postDispatch() will not automatically call render() in the current controller.
*****************************************************************
========================= CLASS #89 =============================
(1068) {199874} [199940]: getNeverRender() retrieves the current value.
(1071) {200308} [200351]: getNoRender() retrieves the current value.
(1073) {200533} [200600]: getNoController() retrieves the current value.
(1075) {200765} [200835]: getNeverController() retrieves the current value.
(1079) {201289} [201356]: getScriptAction() retrieves the current value.
(1082) {201592} [201662]: getResponseSegment() retrieves the current value.
*****************************************************************
========================= CLASS #90 =============================
(1094) {203708} [203776]: The default specification is :moduleDir/views .
(1101) {204661} [204719]: The default specification is :action.
*****************************************************************
========================= CLASS #91 =============================
(1095) {203777} [203902]: You may retrieve the current specification at any time using getViewBasePathSpec() .
(1099) {204225} [204352]: You may retrieve the current specification at any time using getViewScriptPathSpec() .
(1103) {204729} [204868]: You may retrieve the current specification at any time using getViewScriptPathNoControllerSpec() .
*****************************************************************
========================= CLASS #92 =============================
(1096) {203920} [204124]: setViewScriptPathSpec($spec) allows you to change the path specification used to determine the path to an individual view script (minus the base view script path).
(1100) {204370} [204659]: setViewScriptPathNoControllerSpec($spec) allows you to change the path specification used to determine the path to an individual view script when noController is in effect (minus the base view script path).
*****************************************************************
========================= CLASS #93 =============================
(1114) {206337} [206417]: : &quot;FooBarBaz&quot; becomes &quot;foo-bar-baz&quot;.
(8127) {1364034} [1364095]: So &quot; de_AT &quot; becomes &quot; de &quot; only.
*****************************************************************
========================= CLASS #94 =============================
(1115) {206464} [206622]: Internally, the inflector uses the filters Zend_Filter_Word_CamelCaseToDash and Zend_Filter_StringToLower .
(1118) {207066} [207291]: Internally, the inflector uses the filters Zend_Filter_Word_CamelCaseToDash , Zend_Filter_Word_UnderscoreToSeparator , and Zend_Filter_StringToLower .
(1121) {207730} [207940]: Internally, the inflector uses the filters Zend_Filter_Word_CamelCaseToDash , Zend_Filter_PregReplace , and Zend_Filter_StringToLower .
*****************************************************************
========================= CLASS #95 =============================
(1117) {206878} [207019]: Examples: &quot;FooBar&quot; becomes &quot;foo-bar&quot;; &quot;FooBar_Admin&quot; becomes &quot;foo-bar/admin&quot;.
(1120) {207546} [207683]: Examples: &quot;fooBar&quot; becomes &quot;foo-bar&quot;; &quot;foo-barBaz&quot; becomes &quot;foo-bar-baz&quot;.
*****************************************************************
========================= CLASS #96 =============================
(1125) {208639} [208824]: By default, Zend_Controller_Action::renderScript() proxies to the ViewRenderer &#39;s renderScript() method.
(1132) {209889} [210076]: By default, Zend_Controller_Action::getViewScript() proxies to the ViewRenderer &#39;s getViewScript() method.
(1138) {210919} [211092]: By default, Zend_Controller_Action::render() proxies to the ViewRenderer &#39;s render() method.
*****************************************************************
========================= CLASS #97 =============================
(1142) {211864} [212124]: The ViewRenderer replaces any path delimiter found in the controller name with an actual path delimiter (&#39;/&#39;), and any word delimiter found with a dash (&#39;-&#39;) when creating paths.
(1736) {321962} [322108]: This means that you will need to escape hash characters (&#39;#&#39;) but not forward slashes (&#39;/&#39;) in your route definitions.
(1763) {326442} [326559]: Route definitions consist of static and dynamic parts separated by the slash (&#39;/&#39;) character.
*****************************************************************
========================= CLASS #98 =============================
(1158) {215639} [215821]: :suffix&#39;; if the noController flag has been set, you want to render out of the top level instead of in a subdirectory (&#39;:action.:suffix&#39;).
(5101) {903958} [904118]: :suffix&#39;; &#39;:script&#39; is passed the registered layout name, while &#39;:suffix&#39; is a static rule of the inflector.
*****************************************************************
========================= CLASS #99 =============================
(1159) {215822} [215912]: Finally, you want to use &#39;tpl&#39; as the view script filename suffix.
(4168) {741015} [741099]: Zend_Form_Element_Checkbox uses the &#39;formCheckbox&#39; view helper.
(4171) {741324} [741432]: Zend_Form_Element_Hidden accomplishes this through use of the &#39;formHidden&#39; view helper.
(4178) {742456} [742547]: The &#39;formHidden&#39; view helper is used to render the element in the form.
*****************************************************************
========================= CLASS #100 =============================
(1182) {219789} [220130]: To determine if a helper exists in the helper broker, use hasHelper($name) , where $name is the short name of the helper (minus the prefix): There are also two static methods for retrieving helpers from the helper broker: getExistingHelper() and getStaticHelper() .
(1186) {220654} [220769]: Both methods take a single argument, $name , which is the short name of the helper (minus the prefix).
*****************************************************************
========================= CLASS #101 =============================
(1183) {220132} [220337]: getExistingHelper() will retrieve a helper only if it has previously been invoked by or explicitly registered with the helper broker; it will throw an exception if not.
(1196) {222864} [222901]: getName() retrieves the helper name.
*****************************************************************
========================= CLASS #102 =============================
(1216) {226441} [226592]: Routing occurs only once: when the request is initially received and before the first controller is dispatched.
(1785) {330737} [330860]: Routing occurs only once: when the request is initially received and before the first controller is dispatched.
*****************************************************************
========================= CLASS #103 =============================
(1335) {250581} [250789]: (set|get)DefaultControllerName() let you specify a different name to use for the default controller (&#39;index&#39; is used otherwise) and retrieve the current value.
(1337) {250883} [251083]: (set|get)DefaultActionName() let you specify a different name to use for the default action (&#39;index&#39; is used otherwise) and retrieve the current value.
*****************************************************************
========================= CLASS #104 =============================
(1336) {250810} [250865]: They proxy to the dispatcher .
(1338) {251085} [251160]: They proxy to the dispatcher .
*****************************************************************
========================= CLASS #105 =============================
(1339) {251178} [251354]: (set|get)Request() let you specify the request class or object to use during the dispatch process and to retrieve the current object.
(1341) {251553} [251727]: (set|get)Router() let you specify the router class or object to use during the dispatch process and to retrieve the current object.
(1346) {252406} [252589]: (set|get)Dispatcher() let you specify the dispatcher class or object to use during the dispatch process and retrieve the current object.
(1349) {253022} [253200]: (set|get)Response() let you specify the response class or object to use during the dispatch process and to retrieve the current object.
*****************************************************************
========================= CLASS #106 =============================
(1340) {251355} [251535]: When setting the request object, you may pass in a request class name, in which case the method will load the class file and instantiate it.
(1342) {251728} [251906]: When setting the router object, you may pass in a router class name, in which case the method will load the class file and instantiate it.
(1347) {252590} [252796]: When setting the dispatcher object, you may pass in a dispatcher class name, in which case the method will load the class file and instantiate it.
(1350) {253201} [253383]: When setting the response object, you may pass in a response class name, in which case the method will load the class file and instantiate it.
*****************************************************************
========================= CLASS #107 =============================
(1343) {251945} [252123]: When retrieving the router object, it first checks to see if one is present, and if not, instantiates the default router (rewrite router).
(1348) {252835} [253004]: When retrieving the dispatcher object, it first checks to see if one is present, and if not, instantiates the default dispatcher.
*****************************************************************
========================= CLASS #108 =============================
(1356) {253957} [254132]: By default, exceptions are caught and placed in the response object ; turning on throwExceptions() will override this behaviour.
(3464) {608473} [608530]: By default, no exceptions are thrown.
*****************************************************************
========================= CLASS #109 =============================
(1375) {257233} [257274]: Set this parameter to true to disable it.
(1377) {257379} [257440]: Set this parameter to true to disable it.
*****************************************************************
========================= CLASS #110 =============================
(1383) {258674} [258927]: Migrating from 1.0.x to 1.5.0 or newer Though most basic functionality remains the same, and all documented functionality remains the same, there is one particular undocumented &quot;feature&quot; that has changed.
(1392) {260505} [260582]: Some developers relied on this &quot;feature&quot;, which was never intended.
*****************************************************************
========================= CLASS #111 =============================
(1387) {259524} [259805]: For example, &#39;camel-cased&#39; would become &#39;camelCasedAction&#39; by the dispatcher, whereas &#39;camelCased&#39; would become &#39;camelcasedAction&#39;; however, due to the case insensitivity of PHP, both will execute the same method.
(5266) {932434} [932518]: In the example above, &#39;Container_Tree&#39; becomes &#39;Container/Tree.php&#39;.
*****************************************************************
========================= CLASS #112 =============================
(1413) {264848} [265004]: When you&#39;re ready to start using the ViewRenderer functionality, there are several things to look for in your controller code.
(7497) {1269798} [1269887]: Once you have a valid API key, you&#39;re ready to start using Zend_Service_Technorati .
*****************************************************************
========================= CLASS #113 =============================
(1415) {265128} [266034]: If none of the following is happening, you&#39;ll need to make changes: Calls to $this-&gt;render() Calls to $this-&gt;_forward() Calls to $this-&gt;_redirect() Calls to the Redirector action helper The easiest change is to disable auto-rendering for that method: If you find that none of your action methods are rendering, forwarding, or redirecting, you will likely want to put the above line in your preDispatch() or init() methods: If you are calling render() , and you&#39;re using the Conventional Modular directory structure , you&#39;ll want to change your code to make use of autorendering: If you&#39;re rendering multiple view scripts in a single action, you don&#39;t need to change a thing.
(1423) {267628} [267799]: If you aren&#39;t using the conventional modular directory structure, you can even associate different path specifications with the ViewRenderer .
(1647) {306876} [306923]: If it doesn&#39;t, an exception will be raised.
(8502) {1414390} [1414427]: Do so by calling the render() method.
*****************************************************************
========================= CLASS #114 =============================
(1426) {268071} [268334]: As part of this change, the following methods have been removed as they are now encapsulated in the redirector action helper : setRedirectCode() ; use Zend_Controller_Action_Helper_Redirector::setCode() .
(1427) {268352} [268464]: setRedirectPrependBase() ; use Zend_Controller_Action_Helper_Redirector::setPrependBase() .
(1428) {268482} [268580]: setRedirectExit() ; use Zend_Controller_Action_Helper_Redirector::setExit() .
*****************************************************************
========================= CLASS #115 =============================
(1449) {272276} [272741]: You can override this in several ways: Set throwExceptions() in the front controller: Set renderExceptions() in the response object: Zend_Controller_Dispatcher_Interface::dispatch() now accepts and returns a object instead of a dispatcher token.
(1450) {272755} [272895]: Zend_Controller_Router_Interface::route() now accepts and returns a object instead of a dispatcher token.
(1465) {275842} [275949]: All methods now accept and return a object instead of a dispatcher token.
*****************************************************************
========================= CLASS #116 =============================
(1457) {274235} [274586]: _redirect() now takes an optional second argument, the HTTP code to return with the redirect, and an optional third argument, $prependBase , that can indicate that the base URL registered with the request object should be prepended to the url specified.
(1481) {278346} [278446]: As an example: addControllerDirectory() will take an optional second argument.
*****************************************************************
========================= CLASS #117 =============================
(1469) {276583} [276739]: Two global controllers, &#39;IndexController&#39; and &#39;FooController&#39; are also defined; neither of these will be namespaced.
(1472) {276976} [277258]: Thus, in the example above, the controllers in the default module do not need a prefix of &#39;Default_&#39; -- they are simply dispatched according to their base controller name: &#39;IndexController&#39; and &#39;FooController&#39;.
(6653) {1135430} [1135468]: But it&#39;s also more course-grained.
*****************************************************************
========================= CLASS #118 =============================
(1495) {281203} [281364]: You can retrieve the plugin from the front controller at any time using Zend_Controller_Front::getPlugin(&#39;Zend_Controller_Plugin_ActionStack&#39;) .
(1502) {281910} [281988]: Default value is &#39;Zend_Controller_Plugin_ActionStack&#39;.
*****************************************************************
========================= CLASS #119 =============================
(1511) {283476} [283659]: You may set alternate values for these by using the various accessors available to the plugin: setErrorHandlerModule() sets the controller module to use.
(1512) {283673} [283745]: setErrorHandlerController() sets the controller to use.
*****************************************************************
========================= CLASS #120 =============================
(1536) {288017} [288137]: preDispatch() is called before an action is dispatched by the dispatcher .
(1539) {288459} [288579]: postDispatch() is called after an action is dispatched by the dispatcher .
*****************************************************************
========================= CLASS #121 =============================
(1537) {288138} [288208]: This callback allows for proxy or filter behavior.
(1540) {288580} [288650]: This callback allows for proxy or filter behavior.
*****************************************************************
========================= CLASS #122 =============================
(1538) {288209} [288441]: By altering the request and resetting its dispatched flag (via Zend_Controller_Request_Abstract::setDispatched(false) ), the current action may be skipped and/or replaced.
(1541) {288651} [288879]: By altering the request and resetting its dispatched flag (via Zend_Controller_Request_Abstract::setDispatched(false) ), a new action may be specified for dispatching.
*****************************************************************
========================= CLASS #123 =============================
(1606) {300280} [300465]: The request object is passed to the front controller, or if none is provided, it is instantiated at the beginning of the dispatch process, before routing occurs.
(1829) {339207} [339271]: The request object is then passed to the dispatcher.
*****************************************************************
========================= CLASS #124 =============================
(1636) {304394} [304809]: setParamSources() allows you to specify an empty array or an array with one or more of the values &#39;_GET&#39; or &#39;_POST&#39; indicating which parameter sources are allowed (by default, both are allowed); if you wish to restrict access to only &#39;_GET&#39; specify setParamSources(array(&#39;_GET&#39;)) .
(3429) {601410} [601692]: As an example, you can use any Zend_Filter concrete implementations; however, instead of referring to them as &#39;Zend_Filter_Alpha&#39; or &#39;Zend_Filter_StringToLower&#39;, you&#39;d specify only &#39;Alpha&#39; or &#39;StringToLower&#39;.
*****************************************************************
========================= CLASS #125 =============================
(1698) {316240} [316366]: If the segment exists already, it will be removed prior to the operation (i.e., overwritten and replaced).
(1700) {316449} [316575]: If the segment exists already, it will be removed prior to the operation (i.e., overwritten and replaced).
(1703) {316814} [316960]: If the segment exists already, it will be removed prior to the operation (i.e., overwritten and replaced).
*****************************************************************
========================= CLASS #126 =============================
(1713) {318239} [318392]: hasExceptionOfMessage($message) allows you to determine if an exception with a specific message is in the stack.
(1717) {318828} [318958]: getExceptionByMessage($message) allows you to retrieve all exceptions with a specific message from the stack.
*****************************************************************
========================= CLASS #127 =============================
(1714) {318410} [318554]: hasExceptionOfCode($code) allows you to determine if an exception with a specific code is in the stack.
(1719) {319094} [319215]: getExceptionByCode($code) allows you to retrieve all exceptions with a specific code from the stack.
*****************************************************************
========================= CLASS #128 =============================
(1716) {318713} [318810]: It will return false if none are found, and an array of exceptions otherwise.
(1718) {318979} [319076]: It will return false if none are found, and an array of exceptions otherwise.
(1720) {319236} [319333]: It will return false if none are found, and an array of exceptions otherwise.
*****************************************************************
========================= CLASS #129 =============================
(1738) {322292} [322431]: You can get the contents of the defined subpatterns the usual way: Notice the key is an integer (1) instead of a string (&#39;1&#39;).
(4161) {740082} [740164]: By default, the checked value is &#39;1&#39;, and the unchecked value &#39;0&#39;.
(5354) {950313} [950405]: To get only territories and continents use &#39;1&#39; as value.
(5355) {950406} [950453]: To get only countries use &#39;2&#39; as value.
(5513) {973006} [973098]: Yesterday would be &#39;-1&#39;, tomorrow &#39;1&#39; and so on.
(5664) {996208} [996326]: A value of &#39;-1&#39; disables modification of the number of digits in the fractional part of the value.
(5942) {1037798} [1037838]: The standard precision is &#39; 2 &#39;.
(5983) {1041935} [1041975]: The standard precision is &#39; 2 &#39;.
(8705) {1448587} [1448779]: By default, when no $value is provided and no $options are present, &#39;0&#39; is assumed to be the unchecked value, and &#39;1&#39; the checked value.
*****************************************************************
========================= CLASS #130 =============================
(1770) {327728} [328022]: There you will be able to access all variables by means of the Zend_Controller_Action::_getParam() or Zend_Controller_Request::getParam() methods: Route definition can contain one more special character - a wildcard - represented by &#39;*&#39; symbol.
(1806) {334229} [334397]: These variables are later accessible through the Zend_Controller_Request::getParam() or Zend_Controller_Action::_getParam() methods.
(6928) {1173658} [1173722]: The &#39;*&#39; symbol is used as a multiple character wildcard.
*****************************************************************
========================= CLASS #131 =============================
(1814) {335759} [336497]: It&#39;s created more-or-less like below: If you do not want this particular default route in your routing schema, you may override it by creating your own &#39;default&#39; route (i.e., storing it under the name of &#39;default&#39;) or removing it altogether by using removeDefaultRoutes() : Base URL and subdirectories The rewrite router can be used in subdirectories (e.g., http://domain.com/~user/application-root/ ) in which case the base URL of the application ( /~user/application-root ) should be automatically detected by Zend_Controller_Request_Http and used accordingly.
(6980) {1180579} [1180608]: It&#39;s the default setting.
*****************************************************************
========================= CLASS #132 =============================
(1819) {337459} [337634]: Each first-level key under that section will be used to define a route name; the above example defines the routes &#39;archive&#39; and &#39;news&#39;.
(1823) {338185} [338312]: In the example above, the &#39;news&#39; route is defined to use Zend_Controller_Router_Route_Static .
*****************************************************************
========================= CLASS #133 =============================
(1851) {341749} [341903]: The following options has been integrated: position : Replacement for the old &#39;rules&#39; parameter.
(1852) {341925} [342009]: script : Replacement for the old &#39;script&#39; parameter.
(1854) {342222} [342306]: display : Replacement for the old &#39;rules&#39; parameter.
(1856) {342400} [342481]: name : Replacement for the ole &#39;rules&#39; parameter.
*****************************************************************
========================= CLASS #134 =============================
(1855) {342328} [342378]: precision : New parameter.
(1858) {342558} [342607]: currency : New parameter.
(1859) {342629} [342676]: symbol : New parameter.
*****************************************************************
========================= CLASS #135 =============================
(1860) {342722} [342845]: The toCurrency() method does no longer support the optional &#39;script&#39; and &#39;locale&#39; parameters.
(1982) {357916} [358041]: Therefor a &#39; latitude &#39; and a &#39; longitude &#39; has to be given and optional the &#39; horizon &#39;.
*****************************************************************
========================= CLASS #136 =============================
(1862) {342978} [343176]: The methods getSymbol() , getShortName() , getName() , getRegionList() and getCurrencyList() are no longer static and can be called from within the object.
(1940) {352917} [353021]: The function getSymbol() , getShortName() and getName() accept two optional parameters.
(3852) {677154} [677217]: Uses the setName() and getName() accessors.
*****************************************************************
========================= CLASS #137 =============================
(1875) {344670} [344848]: Therefor the first parameter &#39;currency&#39; can define which currency should be used by giving the short name or full name of that currency.
(1891) {346341} [346437]: If the &#39; currency &#39; parameter is supressed the actual currency will be used.
*****************************************************************
========================= CLASS #138 =============================
(1880) {345197} [345355]: locale : The third parameter &#39;locale&#39; defines which locale should be used for formatting the currency.
(5689) {999894} [999997]: The options array may contain a &#39;locale&#39; to define grouping and decimal characters.
*****************************************************************
========================= CLASS #139 =============================
(1892) {346438} [346653]: The region &#39; de &#39; for example knows the currencies &#39; EUR &#39; and &#39; DEM &#39;... &#39; EUR &#39; is the actual one and will be used if the parameter is supressed.
(5518) {973864} [974002]: The currency has to be given in ISO format which is for example &#39;EUR&#39; for the currency &#39;euro&#39;.
(5532) {975556} [975664]: The currency has to be given as ISO4217 code for example &#39;EUR&#39; for euro.
*****************************************************************
========================= CLASS #140 =============================
(1931) {351656} [351822]: The supported methods are: getSymbol() : Returns the known sign of the actual currency or a given currency.
(1933) {351946} [352069]: getShortName() : Returns the abbreviation of the actual currency or a given currency.
*****************************************************************
========================= CLASS #141 =============================
(1932) {351823} [351928]: For example $ for the US Dollar within the locale &#39; en_US .
(1934) {352071} [352178]: For example USD for the US Dollar within the locale &#39; en_US .
(1936) {352312} [352425]: For example US Dollar for the US Dollar within the locale &#39; en_US .
*****************************************************************
========================= CLASS #142 =============================
(1950) {353904} [354027]: By using the static method Zend_Currency::setCache($cache) which accepts one option, an Zend_Cache adapter.
(5676) {997944} [998041]: Use the static method Zend_Locale::setCache($cache) if you are using Zend_Locale .
*****************************************************************
========================= CLASS #143 =============================
(2025) {362843} [362996]: Ouput a Date The date in a Zend_Date object may be obtained as a localized integer or string using the get() method.
(2256) {415017} [415037]: Use get() instead.
*****************************************************************
========================= CLASS #144 =============================
(2043) {366600} [369152]: Day Constants Constant Description Date Affected part/example Zend_Date::DAY Day (as a number, two digit) 2009-02-06T14:53:27+01:00 2009-02- 06 T14:53:27+01:00 (06) Zend_Date::DAY_SHORT Day (as a number, one or two digit) 2009-02-06T14:53:27+01:00 2009-02-0 6 T14:53:27+01:00 (6) Zend_Date::WEEKDAY Weekday (Name of the day, localized, complete) 2009-02-06T14:53:27+01:00 Friday Zend_Date::WEEKDAY_SHORT Weekday (Name of the day, localized, abbreviated, the first three digits) 2009-02-06T14:53:27+01:00 Fre for Friday Zend_Date::WEEKDAY_NAME Weekday (Name of the day, localized, abbreviated, the first two digits) 2009-02-06T14:53:27+01:00 Fr for Friday Zend_Date::WEEKDAY_NARROW Weekday (Name of the day, localized, abbreviated, only the first digit) 2009-02-06T14:53:27+01:00 F for Friday Zend_Date::WEEKDAY_DIGIT Weekday (0 = Sunday, 6 = Saturday) 2009-02-06T14:53:27+01:00 5 for Friday Zend_Date::WEEKDAY_8601 Weekday according to ISO 8601 (1 = Monday, 7 = Sunday) 2009-02-06T14:53:27+01:00 5 for Friday Zend_Date::DAY_OF_YEAR Day (as a number, one or two digit) 2009-02-06T14:53:27+01:00 43 Zend_Date::DAY_SUFFIX English addendum for the day (st, nd, rd, th) 2009-02-06T14:53:27+01:00 th Week Constants Constant Description Date Affected part/example Zend_Date::WEEK Week (as a number, 1-53) 2009-02-06T14:53:27+01:00 7 Month Constants Constant Description Date Affected part/example Zend_Date::MONTH_NAME Month (Name of the month, localized, complete) 2009-02-06T14:53:27+01:00 February Zend_Date::MONTH_NAME_SHORT Month (Name of the month, localized, abbreviated, three digit) 2009-02-06T14:53:27+01:00 Feb Zend_Date::MONTH_NAME_NARROW Month (Name of the month, localized, abbreviated, one digit) 2009-02-06T14:53:27+01:00 F Zend_Date::MONTH Month (Number of the month, two digit) 2009-02-06T14:53:27+01:00 2009- 02 -06T14:53:27+01:00 (02) Zend_Date::MONTH_SHORT Month (Number of the month, one or two digit) 2009-02-06T14:53:27+01:00 2009-0 2 -06T14:53:27+01:00 (2) Zend_Date::MONTH_DAYS Number of days for this month (number) 2009-02-06T14:53:27+01:00 28 Year Constants Constant Description Date Affected part/example Zend_Date::YEAR Year (number) 2009-02-06T14:53:27+01:00 2009 -02-06T14:53:27+01:00 Zend_Date::YEAR_8601 Year according to ISO 8601 (number) 2009-02-06T14:53:27+01:00 2009 Zend_Date::YEAR_SHORT Year (number, two digit) 2009-02-06T14:53:27+01:00 20 09 -02-06T14:53:27+01:00 Zend_Date::YEAR_SHORT_8601 Year according to ISO 8601 (number, two digit) 2009-02-06T14:53:27+01:00 09 Zend_Date::LEAPYEAR Is the year a leap year?
(2246) {410396} [410420]: Is the year a leap year?
*****************************************************************
========================= CLASS #145 =============================
(2053) {374341} [374466]: The following examples illustrate the usage of constants from the table below to create self-defined ISO formats.
(2078) {380276} [380397]: The following examples illustrate the usage of constants from the table below to create self-defined formats.
*****************************************************************
========================= CLASS #146 =============================
(2074) {379599} [379864]: Self-defined OUTPUT formats using PHP&#39;s date() format specifiers If you are more comfortable with PHP&#39;s date format specifier than with ISO format specifiers, then you can use the PHP&#39;s date() format specifiers .
(2148) {393418} [393569]: If you are more comfortable with PHP&#39;s date format specifier than with ISO format specifiers, then you can use $format parameter.
*****************************************************************
========================= CLASS #147 =============================
(2081) {381006} [382418]: Constants for PHP date output Constant Description Corresponds best to closest CLDR equivalent Affected part/example d Day of the month, two digit Zend_Date::DAY dd 09 D Day of the week, localized, abbreviated, three digit Zend_Date::WEEKDAY_SHORT EEE Mon j Day of the month, one or two digit Zend_Date::DAY_SHORT d 9 l (lowercase L) Day of the week, localized, complete Zend_Date::WEEKDAY EEEE Monday N Number of the weekday, one digit Zend_Date::WEEKDAY_8601 e 4 S English suffixes for day of month, two chars no equivalent no equivalent st w Number of the weekday, 0=sunday, 6=saturday Zend_Date::WEEKDAY_DIGIT no equivalent 4 z Day of the year, one, two or three digit Zend_Date::DAY_OF_YEAR D 7 W Week, one or two digit Zend_Date::WEEK w 5 F Month, localized, complete Zend_Date::MONTH_NAME MMMM February m Month, two digit Zend_Date::MONTH MM 02 M Month, localized, abbreviated Zend_Date::MONTH_NAME_SHORT MMM Feb n Month, one or two digit Zend_Date::MONTH_SHORT M 2 t Number of days per month, one or two digits Zend_Date::MONTH_DAYS no equivalent 30 L Leapyear, boolean Zend_Date::LEAPYEAR no equivalent true o Year according to ISO 8601, at least four digit Zend_Date::YEAR_8601 YYYY 2009 Y Year, at least four digit Zend_Date::YEAR yyyy 2009 y Year, at least two digit Zend_Date::YEAR_SHORT yy 09 a Time of day, localized Zend_Date::MERIDIEM a (sort of, but likely to be uppercase) vorm.
(2082) {382419} [382528]: A Time of day, localized Zend_Date::MERIDIEM a (sort of, but no guarantee that the format is uppercase) VORM.
*****************************************************************
========================= CLASS #148 =============================
(2136) {390876} [391214]: Unlimited timestamps Although PHP 5.2 docs state, &quot;The valid range of a timestamp is typically from Fri, 13 Dec 1901 20:45:54 GMT to Tue, 19 Jan 2038 03:14:07 GMT,&quot; Zend_Date supports a nearly unlimited range, with the help of the BCMath extension.
(2271) {417883} [418081]: The BCMath extension is required to support extremely large dates outside of the range Fri, 13 Dec 1901 20:45:54 GMT to Tue, 19 Jan 2038 03:14:07 GMT.
*****************************************************************
========================= CLASS #149 =============================
(2145) {392540} [392740]: When date strings conform to &quot;Y/m/d&quot; or &quot;Y-m-d H:i:s&quot;, according to PHP date() format tokens, use Zend_Date&#39;s built-in support for ISO 8601 formatted dates.
(2230) {405641} [405677]: Zend_Date&#39;s results are correct.
*****************************************************************
========================= CLASS #150 =============================
(2156) {394984} [395342]: To prevent such problems use the option fix_dst , which defaults to true, causing DST to have no effect on date &quot;math&quot; ( If your actual timezone within the instance of Zend_Date is set to UTC or GMT the option &#39;fix_dst&#39; will not be used because these two timezones do not work with DST.
(2157) {395343} [395553]: When you change the timezone for this instance again to a timezone which is not UTC or GMT the previous set &#39;fix_dst&#39; option will be used again for date &quot;math&quot;.
*****************************************************************
========================= CLASS #151 =============================
(2173) {397969} [398026]: To examine an object&#39;s timezone use getTimeZone()) .
(2174) {398027} [398096]: To change an object&#39;s timezone, use setTimeZone()) .
*****************************************************************
========================= CLASS #152 =============================
(2216) {403770} [403895]: Day Zend_Date::DAY_SHORT is extracted from $date if the $date operand is an instance of Zend_Date or a numeric string.
(2223) {404708} [404834]: Zend_Date::WEEKDAY_DIGIT is extracted from $date , if the $date operand is an instance of Zend_Date or a numeric string.
*****************************************************************
========================= CLASS #153 =============================
(2217) {403897} [404262]: Otherwise, an attempt is made to extract the day according to the conventions documented for these constants: Zend_Date::WEEKDAY_NARROW , Zend_Date::WEEKDAY_NAME , Zend_Date::WEEKDAY_SHORT , Zend_Date::WEEKDAY (Gregorian calendar assumed) Week Zend_Date::WEEK is extracted from $date if the $date operand is an instance of Zend_Date or a numeric string.
(2219) {404297} [404433]: (Gregorian calendar assumed) Date Zend_Date::DAY_MEDIUM is extracted from $date if the $date operand is an instance of Zend_Date .
(2224) {404836} [405209]: Otherwise, an attempt is made to extract the day according to the conventions documented for these constants: Zend_Date::WEEKDAY_NARROW , Zend_Date::WEEKDAY_NAME , Zend_Date::WEEKDAY_SHORT , Zend_Date::WEEKDAY (Gregorian calendar assumed) DayOfYear In Zend_Date , the day of the year represents the number of calendar days elapsed since the start of the year (0-365).
*****************************************************************
========================= CLASS #154 =============================
(2233) {406083} [406369]: Basic Operations Basic Operation Explanation get() get($part = null, $locale = null) Use get($part) to retrieve the date $part of this object&#39;s date localized to $locale as a formatted string or integer.
(2257) {415067} [415281]: get() get($part = null, $locale = null) This method returns the $part of object&#39;s date localized to $locale as a formatted string or integer.
*****************************************************************
========================= CLASS #155 =============================
(2237) {407140} [407347]: add() add($date, $part = null, $locale = null) Adds the $part of $date having a locale $locale to the current object&#39;s date.
(2238) {407381} [407595]: sub() sub($date, $part = null, $locale = null) Subtracts the $part of $date having a locale $locale from the current object&#39;s date.
*****************************************************************
========================= CLASS #156 =============================
(2242) {408520} [409585]: Date Comparison Methods Method Explanation equals() equals($date, $part = null, $locale = null) returns true, if $part of $date having locale $locale is the same as this object&#39;s date $part , otherwise false isEarlier() isEarlier($date, $part = null, $locale = null) returns true, if $part of this object&#39;s date is earlier than $part of $date having a locale $locale isLater() isLater($date, $part = null, $locale = null) returns true, if $part of this object&#39;s date is later than $part of $date having a locale $locale isToday() isToday() Tests if today&#39;s year, month, and day match this object&#39;s date value, using this object&#39;s timezone.
(2243) {409615} [409820]: isTomorrow() isTomorrow() Tests if tomorrow&#39;s year, month, and day match this object&#39;s date value, using this object&#39;s timezone.
(2244) {409850} [410058]: isYesterday() isYesterday() Tests if yesterday&#39;s year, month, and day match this object&#39;s date value, using this object&#39;s timezone.
*****************************************************************
========================= CLASS #157 =============================
(2281) {419418} [420530]: Zend_Db provides Adapter classes to PDO drivers for the following RDBMS brands: IBM DB2 and Informix Dynamic Server (IDS), using the pdo_ibm PHP extension MySQL, using the pdo_mysql PHP extension Microsoft SQL Server, using the pdo_mssql PHP extension Oracle, using the pdo_oci PHP extension PostgreSQL, using the pdo_pgsql PHP extension SQLite, using the pdo_sqlite PHP extension In addition, Zend_Db provides Adapter classes that utilize PHP database extensions for the following RDBMS brands: MySQL, using the mysqli PHP extension Oracle, using the oci8 PHP extension IBM DB2, using the ibm_db2 PHP extension Firebird/Interbase, using the php_interbase PHP extension Each Zend_Db Adapter uses a PHP extension.
(2553) {461617} [461661]: This Adapter uses the PHP extension ibm_db2.
(2563) {463083} [463124]: This Adapter uses the PHP extension oci8.
(2570) {464033} [464086]: This Adapter uses the PHP extensions pdo and pdo_ibm.
(2574) {464559} [464614]: This Adapter uses the PHP extensions pdo and pdo_mssql.
(2584) {466241} [466296]: This Adapter uses the PHP extensions pdo and pdo_mysql.
(2588) {466840} [466893]: This Adapter uses the PHP extensions pdo and pdo_oci.
(2591) {467361} [467416]: This Adapter uses the PHP extensions pdo and pdo_pgsql.
(2597) {468263} [468319]: This Adapter uses the PHP extensions pdo and pdo_sqlite.
(2604) {469794} [469888]: Firebird/Interbase This Adapter uses the PHP extension php_interbase.
*****************************************************************
========================= CLASS #158 =============================
(2316) {426135} [426291]: Passing the case-folding option to the factory You can specify this option by the constant Zend_Db::CASE_FOLDING .
(2319) {426682} [426848]: Passing the auto-quoting option to the factory You can specify this option by the constant Zend_Db::AUTO_QUOTE_IDENTIFIERS .
*****************************************************************
========================= CLASS #159 =============================
(2345) {430988} [431156]: Reading Query Results This section describes methods of the Adapter class with which you can run SELECT queries and retrieve the query results.
(2390) {437384} [437450]: This section describes methods to do these operations.
*****************************************************************
========================= CLASS #160 =============================
(2346) {431166} [431328]: Fetching a Complete Result Set You can run a SQL SELECT query and retrieve its results in one step using the fetchAll() method.
(2858) {509154} [509302]: Fetching a Complete Result Set To retrieve all the rows of the result set in one step, use the fetchAll() method.
*****************************************************************
========================= CLASS #161 =============================
(2347) {431359} [431451]: The first argument to this method is a string containing a SELECT statement.
(8456) {1407038} [1407137]: The first argument of this method is a string containing the error message.
*****************************************************************
========================= CLASS #162 =============================
(2362) {433575} [433619]: Specify this when instantiating the Adapter.
(2491) {453829} [453889]: Specify this when instantiating the Adapter.
*****************************************************************
========================= CLASS #163 =============================
(2364) {433672} [433751]: Zend_Db::FETCH_NUM : return data in an array of arrays.
(2366) {433945} [434025]: Zend_Db::FETCH_BOTH : return data in an array of arrays.
*****************************************************************
========================= CLASS #164 =============================
(2378) {435565} [435619]: Any other columns returned by the query are discarded.
(2383) {436144} [436214]: Any other columns returned by the query are discarded.
*****************************************************************
========================= CLASS #165 =============================
(2391) {437460} [437585]: Inserting Data You can add new rows to a table in your database using the insert() method.
(3067) {541816} [541863]: Use the insert() method of your Table object.
*****************************************************************
========================= CLASS #166 =============================
(2392) {437587} [437757]: The first argument is a string that names the table, and the second argument is an associative array, mapping column names to data values.
(3068) {541864} [541945]: The argument is an associative array, mapping column names to values.
*****************************************************************
========================= CLASS #167 =============================
(2400) {438714} [438938]: To specify that the value is an SQL expression and therefore should not be quoted, pass the value in the data array as an object of type Zend_Db_Expr instead of a plain string.
(3071) {542224} [542270]: Use an object of type Zend_Db_Expr to do this.
*****************************************************************
========================= CLASS #168 =============================
(2404) {439405} [439490]: Instead, the return value is the number of rows affected (usually 1).
(2434) {444666} [444754]: The return value is the number of rows affected by the update operation.
(2443) {445891} [445979]: The return value is the number of rows affected by the delete operation.
*****************************************************************
========================= CLASS #169 =============================
(2408) {439988} [440108]: To support sequences, the lastInsertId() method accepts two optional string arguments.
(2860) {509438} [509500]: The fetchAll() method accepts two arguments.
*****************************************************************
========================= CLASS #170 =============================
(2414) {440995} [441380]: Using lastSequenceId() For RDBMS brands that don&#39;t support sequences, including MySQL, Microsoft SQL Server, and SQLite, the arguments to the lastInsertId() method are ignored, and the value returned is the most recent value generated for any table by INSERT operations during the current connection.
(2555) {461818} [461899]: Therefore the arguments to lastInsertId() are optional.
(2593) {467576} [467657]: Therefore the arguments to lastInsertId() are optional.
*****************************************************************
========================= CLASS #171 =============================
(2430) {444221} [444345]: The third argument is a string containing an SQL expression that is used as criteria for the rows to change.
(2439) {445445} [445570]: The second argument is a string containing an SQL expression that is used as criteria for the rows to delete.
(2772) {496297} [496372]: The first argument is a string containing a SQL expression.
(2826) {504789} [504848]: The first argument is a string containing an SQL statement.
*****************************************************************
========================= CLASS #172 =============================
(2431) {444347} [444433]: The values and identifiers in this argument are not quoted or escaped.
(2440) {445572} [445658]: The values and identifiers in this argument are not quoted or escaped.
*****************************************************************
========================= CLASS #173 =============================
(2432) {444450} [444564]: You are responsible for ensuring that any dynamic content is interpolated into this string safely.
(2441) {445675} [445789]: You are responsible for ensuring that any dynamic content is interpolated into this string safely.
*****************************************************************
========================= CLASS #174 =============================
(2433) {444581} [444635]: See for methods to help you do this.
(2442) {445806} [445860]: See for methods to help you do this.
*****************************************************************
========================= CLASS #175 =============================
(2436) {444970} [445149]: If you provide an array of strings as the third argument, these strings are joined together as terms in an expression separated by AND operators.
(2445) {446166} [446346]: If you provide an array of strings as the second argument, these strings are joined together as terms in an expression separated by AND operators.
*****************************************************************
========================= CLASS #176 =============================
(2437) {445163} [445324]: Updating rows using an array of expressions Deleting Data You can delete rows from a database table using the delete() method.
(3102) {547074} [547184]: Deleting Rows from a Table You can delete rows from a database table using the delete() method.
*****************************************************************
========================= CLASS #177 =============================
(2511) {456630} [456897]: The value corresponding to each column is also an associative array, with the following keys and values: Metadata fields returned by describeTable() Key Type Description SCHEMA_NAME (string) Name of the database schema in which this table exists.
(2513) {456966} [457006]: COLUMN_NAME (string) Name of the column.
*****************************************************************
========================= CLASS #178 =============================
(2552) {461440} [461570]: IBM DB2 Specify this Adapter to the factory() method with the name &#39;Db2&#39;.
(2558) {462316} [462450]: MySQLi Specify this Adapter to the factory() method with the name &#39;Mysqli&#39;.
(2562) {462902} [463036]: Oracle Specify this Adapter to the factory() method with the name &#39;Oracle&#39;.
(2573) {464357} [464512]: PDO Microsoft SQL Server Specify this Adapter to the factory() method with the name &#39;Pdo_Mssql&#39;.
(2583) {466054} [466194]: PDO MySQL Specify this Adapter to the factory() method with the name &#39;Pdo_Mysql&#39;.
(2587) {466654} [466793]: PDO Oracle Specify this Adapter to the factory() method with the name &#39;Pdo_Oci&#39;.
(2590) {467169} [467314]: PDO PostgreSQL Specify this Adapter to the factory() method with the name &#39;Pdo_Pgsql&#39;.
(2596) {468074} [468216]: PDO SQLite Specify this Adapter to the factory() method with the name &#39;Pdo_Sqlite&#39;.
*****************************************************************
========================= CLASS #179 =============================
(2554) {461733} [461816]: IBM DB2 supports both sequences and auto-incrementing keys.
(2592) {467488} [467574]: PostgreSQL supports both sequences and auto-incrementing keys.
*****************************************************************
========================= CLASS #180 =============================
(2556) {461901} [462046]: If you give no arguments, the Adapter returns the last value generated for an auto-increment key.
(2594) {467659} [467804]: If you give no arguments, the Adapter returns the last value generated for an auto-increment key.
*****************************************************************
========================= CLASS #181 =============================
(2557) {462048} [462269]: If you give arguments, the Adapter returns the last value generated by the sequence named according to the convention &#39; table _ column _seq&#39;.
(2595) {467806} [468027]: If you give arguments, the Adapter returns the last value generated by the sequence named according to the convention &#39; table _ column _seq&#39;.
*****************************************************************
========================= CLASS #182 =============================
(2560) {462591} [462809]: MySQL does not support sequences, so lastInsertId() ignores its arguments and always returns the last value generated for an auto-increment key.
(2575) {464661} [464894]: Microsoft SQL Server does not support sequences, so lastInsertId() ignores its arguments and always returns the last value generated for an auto-increment key.
(2585) {466343} [466561]: MySQL does not support sequences, so lastInsertId() ignores its arguments and always returns the last value generated for an auto-increment key.
(2598) {468366} [468585]: SQLite does not support sequences, so lastInsertId() ignores its arguments and always returns the last value generated for an auto-increment key.
*****************************************************************
========================= CLASS #183 =============================
(2561) {462811} [462880]: The lastSequenceId() method returns null .
(2576) {464896} [464965]: The lastSequenceId() method returns null .
(2586) {466563} [466632]: The lastSequenceId() method returns null .
(2599) {468587} [468656]: The lastSequenceId() method returns null .
*****************************************************************
========================= CLASS #184 =============================
(2564) {463171} [463378]: Oracle does not support auto-incrementing keys, so you should specify the name of a sequence to lastInsertId() or lastSequenceId() .
(2589) {466940} [467147]: Oracle does not support auto-incrementing keys, so you should specify the name of a sequence to lastInsertId() or lastSequenceId() .
(2605) {469935} [470154]: Firebird/interbase does not support auto-incrementing keys, so you should specify the name of a sequence to lastInsertId() or lastSequenceId() .
*****************************************************************
========================= CLASS #185 =============================
(2567) {463588} [463696]: Currently the Zend_Db::CASE_FOLDING option is not supported by the Oracle adapter.
(2606) {470201} [470321]: Currently the Zend_Db::CASE_FOLDING option is not supported by the Firebird/interbase adapter.
*****************************************************************
========================= CLASS #186 =============================
(2579) {465323} [465459]: The value can be &quot;mssql&quot; (the default), &quot;dblib&quot;, &quot;freetds&quot;, or &quot;sybase&quot;.
(2581) {465596} [465804]: Both &quot;freetds&quot; and &quot;sybase&quot; imply a prefix of &quot;sybase:&quot;, which is used for the FreeTDS set of libraries.
*****************************************************************
========================= CLASS #187 =============================
(2600) {468703} [468941]: To connect to an SQLite2 database, specify &#39;dsnprefix&#39;=&gt;&#39;sqlite2&#39; in the array of parameters when creating an instance of the Pdo_Sqlite Adapter.
(2601) {468988} [469233]: To connect to an in-memory SQLite database, specify &#39;dbname&#39;=&gt;&#39;:memory:&#39; in the array of parameters when creating an instance of the Pdo_Sqlite Adapter.
(3422) {600699} [600774]: These are specified by prefixing with a &#39;:&#39;: :script .
(5845) {1022857} [1022981]: to use CRAM-MD5 you would pass &#39;auth&#39; =&gt; &#39;crammd5&#39; in the Zend_Mail_Transport_Smtp constructor.
*****************************************************************
========================= CLASS #188 =============================
(2666) {479849} [480012]: Example of the using methods to add clauses You also can use most methods of the Zend_Db_Select object with a convenient fluent interface.
(5824) {1019539} [1019630]: You also can use most methods of the Zend_Mail object with a convenient fluent interface.
*****************************************************************
========================= CLASS #189 =============================
(2667) {480013} [480168]: A fluent interface means that each method returns a reference to the object on which it was called, so you can immediately call another method.
(5825) {1019631} [1019798]: A fluent interface means that each method returns a reference to the object on which it was called, so you can immediately call another method.
*****************************************************************
========================= CLASS #190 =============================
(2678) {481563} [481763]: You can specify the table name as &quot; schemaName.tableName &quot;, where Zend_Db_Select quotes each part individually, or you may specify the schema name separately.
(2687) {482978} [483023]: Zend_Db_Select quotes each part individually.
*****************************************************************
========================= CLASS #191 =============================
(2680) {481939} [482134]: Example of specifying a schema name Adding Columns In the second argument of the from() method, you can specify the columns to select from the respective table.
(2751) {493138} [493194]: The second argument to the where() method is optional.
*****************************************************************
========================= CLASS #192 =============================
(2699) {484861} [485076]: The quoteIdentifier() method uses SQL quoting to delimit the identifier, which makes it clear that it is an identifier for a table or a column, and not any other part of SQL syntax.
(8271) {1381133} [1381194]: Therefor the isTranslated() method can be used.
*****************************************************************
========================= CLASS #193 =============================
(2709) {486650} [486778]: Using this method is similar to the from() method, except you can also specify a join condition in most cases.
(2771) {496227} [496296]: Its usage is similar to that of the where() method.
*****************************************************************
========================= CLASS #194 =============================
(2713) {487137} [487381]: No quoting is applied to the expression you specify for the join condition; if you have column names that need to be quoted, you must use quoteIdentifier() as you form the string for the join condition.
(2750) {492940} [493103]: If you have column names that need to be quoted, you must use quoteIdentifier() as you form the string for the condition.
(2776) {496901} [497064]: If you have column names that need to be quoted, you must use quoteIdentifier() as you form the string for the condition.
*****************************************************************
========================= CLASS #195 =============================
(2725) {488859} [488899]: All RDBMS brands support this join type.
(2727) {489298} [489338]: All RDBMS brands support this join type.
*****************************************************************
========================= CLASS #196 =============================
(2726) {488921} [489251]: LEFT JOIN with the All rows from the left operand table are included, matching rows from the right operand table included, and the columns from the right operand table are filled with NULLs if no row exists matching the left table.
(2729) {489486} [489770]: All rows from the right operand table are included, matching rows from the left operand table included, and the columns from the left operand table are filled with NULLs if no row exists matching the right table.
*****************************************************************
========================= CLASS #197 =============================
(2730) {489817} [490018]: Some RDBMS brands don&#39;t support this join type, but in general any right join can be represented as a left join by reversing the order of the tables.
(2733) {490513} [490564]: Some RDBMS brands don&#39;t support this join type.
(2739) {491248} [491299]: Some RDBMS brands don&#39;t support this join type.
*****************************************************************
========================= CLASS #198 =============================
(2738) {491151} [491247]: The joinCross() method has no parameter to specify the join condition.
(2743) {491837} [491935]: The joinNatural() method has no parameter to specify the join condition.
*****************************************************************
========================= CLASS #199 =============================
(2749) {492785} [492939]: Example of the where() method No quoting is applied to expressions given to the where() or orWhere() methods.
(2775) {496743} [496900]: Example of the having() method No quoting is applied to expressions given to the having() or orHaving() methods.
*****************************************************************
========================= CLASS #200 =============================
(2801) {500409} [500537]: The query() method returns an object of type Zend_Db_Statement or PDOStatement, depending on the adapter type.
(2803) {500809} [500944]: Both methods return an object of type Zend_Db_Statement or PDOStatement, depending on the adapter type.
*****************************************************************
========================= CLASS #201 =============================
(2811) {502223} [502354]: The single argument to the getPart() method is a string that identifies which part of the Select query to return.
(2816) {503550} [503582]: The single argument is optional.
*****************************************************************
========================= CLASS #202 =============================
(2827) {504861} [504976]: The optional second argument is an array of values to bind to parameter placeholders in the SQL string.
(2836) {506084} [506188]: The single argument is an array of value to bind to parameter placeholders in the statement.
*****************************************************************
========================= CLASS #203 =============================
(2828) {504986} [505181]: Creating a SQL statement object with query() The statement object corresponds to a SQL statement that has been prepared, and executed once with the bind-values specified.
(2833) {505731} [505775]: The statement is prepared, but not executed.
*****************************************************************
========================= CLASS #204 =============================
(2889) {513208} [513279]: Use the class name, not the physical name of the SQL table.
(2904) {514977} [515036]: Use the class name, not the physical name of the SQL table.
*****************************************************************
========================= CLASS #205 =============================
(2901) {514546} [514736]: The elements of this rule entry are described below: columns =&gt; A string or an array of strings naming the foreign key column name(s) in the dependent table.
(2908) {515578} [515706]: refColumns =&gt; A string or an array of strings naming the primary key column name(s) in the parent table.
*****************************************************************
========================= CLASS #206 =============================
(2902) {514775} [514882]: It&#39;s common for this to be a single column, but some tables have multi-column keys.
(2909) {515745} [515852]: It&#39;s common for this to be a single column, but some tables have multi-column keys.
*****************************************************************
========================= CLASS #207 =============================
(2919) {517157} [517266]: The first argument $table can be a string that specifies the dependent table by its class name.
(2941) {520724} [520830]: The first argument $table can be a string that specifies the parent table by its class name.
*****************************************************************
========================= CLASS #208 =============================
(2920) {517267} [517359]: You can also specify the dependent table by using an object of that table class.
(2942) {520831} [520920]: You can also specify the parent table by using an object of that table class.
(2961) {523962} [524056]: You can also specify the destination table by using an object of that table class.
(2963) {524277} [524372]: You can also specify the intersection table by using an object of that table class.
*****************************************************************
========================= CLASS #209 =============================
(2921) {517369} [517545]: Fetching a Dependent Rowset This example shows getting a Row object from the table Accounts , and finding the Bugs reported by that account.
(2928) {518156} [518375]: Fetching a Dependent Rowset By a Specific Rule This example shows getting a Row object from the table Accounts , and finding the Bugs assigned to be fixed by the user of that account.
(2931) {518675} [518976]: Fetching a Dependent Rowset using a Zend_Db_Table_Select This example shows getting a Row object from the table Accounts , and finding the Bugs assigned to be fixed by the user of that account, limited only to 3 rows and ordered by name.
*****************************************************************
========================= CLASS #210 =============================
(2922) {517572} [517612]: The second argument $rule is optional.
(2944) {521229} [521269]: The second argument $rule is optional.
*****************************************************************
========================= CLASS #211 =============================
(2923) {517613} [517723]: It is a string that names the rule key in the $_referenceMap array of the dependent table class.
(2945) {521270} [521380]: It is a string that names the rule key in the $_referenceMap array of the dependent table class.
(2966) {524756} [524866]: These are strings that name the rule keys in the $_referenceMap array of the intersection table.
*****************************************************************
========================= CLASS #212 =============================
(2924) {517724} [517838]: If you don&#39;t specify a rule, the first rule in the array that references the parent table is used.
(2946) {521381} [521495]: If you don&#39;t specify a rule, the first rule in the array that references the parent table is used.
*****************************************************************
========================= CLASS #213 =============================
(2925) {517851} [517927]: If you need to use a rule other than the first, you need to specify the key.
(2947) {521508} [521584]: If you need to use a rule other than the first, you need to specify the key.
(2972) {525559} [525647]: If you need to use a rule other than the first, you need to specify the key.
*****************************************************************
========================= CLASS #214 =============================
(2926) {517950} [518095]: In the example code above, the rule key is not specified, so the rule used by default is the first one that matches the parent table.
(2948) {521607} [521747]: In the example above, the rule key is not specified, so the rule used by default is the first one that matches the parent table.
(2973) {525670} [525799]: In the example code above, the rule key is not specified, so the rules used by default are the first ones that match.
*****************************************************************
========================= CLASS #215 =============================
(2929) {518376} [518516]: The rule key string that corresponds to this reference relationship in this example is &#39;Engineer&#39; .
(2951) {522000} [522140]: The rule key string that corresponds to this reference relationship in this example is &#39;Engineer&#39; .
*****************************************************************
========================= CLASS #216 =============================
(2932) {519008} [519137]: Alternatively, you can query rows from a dependent table using a special mechanism called a &quot;magic method&quot;.
(2952) {522167} [522254]: Alternatively, you can query rows from a parent table using a &quot;magic method&quot;.
*****************************************************************
========================= CLASS #217 =============================
(2933) {519138} [519522]: Zend_Db_Table_Row_Abstract invokes the method: $row-&gt;find&lt;TableClass&gt;() $row-&gt;find&lt;TableClass&gt;By&lt;Rule&gt;() In the patterns above, &lt;TableClass&gt; and &lt;Rule&gt; are strings that correspond to the class name of the dependent table, and the dependent table&#39;s rule key that references the parent table.
(2953) {522267} [522566]: Zend_Db_Table_Row_Abstract invokes the method: In the patterns above, &lt;TableClass&gt; and &lt;Rule&gt; are strings that correspond to the class name of the parent table, and the dependent table&#39;s rule key that references the parent table.
*****************************************************************
========================= CLASS #218 =============================
(2936) {519823} [519974]: The table identity and the rule key named in the method call must match the spelling of the class and rule key exactly.
(2954) {522593} [522728]: The table identity and the rule key named in the method call must match the spelling of the class and rule key exactly.
(2978) {526891} [527029]: The table identities and the rule keys named in the method call must match the spelling of the class and rule key exactly.
*****************************************************************
========================= CLASS #219 =============================
(2938) {520162} [520293]: In this case, the application uses the magic method invocation instead of specifying the table and rule as strings.
(2956) {522907} [523038]: In this case, the application uses the magic method invocation instead of specifying the table and rule as strings.
*****************************************************************
========================= CLASS #220 =============================
(2964) {524382} [524650]: Fetching a Rowset with the Many-to-many Method This example shows geting a Row object from from the origin table Bugs , and finding rows from the destination table Products , representing products related to that bug.
(2975) {525905} [526192]: Fetching a Rowset with the Many-to-many Method By a Specific Rule This example shows geting a Row object from from the origin table Bugs , and finding rows from the destination table Products , representing products related to that bug.
*****************************************************************
========================= CLASS #221 =============================
(2990) {529123} [529290]: Set the associative array keys &#39;onDelete&#39; and &#39;onUpdate&#39; to the string &#39;cascade&#39; (or the constant self::CASCADE ).
(2993) {529720} [529838]: The &#39;onDelete&#39; element of the reference map entry is set to self::CASCADE .
(2995) {529991} [530087]: The &#39;onUpdate&#39; element of the reference map entry is self::RESTRICT .
(8709) {1449161} [1449296]: You may also pass an associative array with the keys &#39;checked&#39; and &#39;unChecked&#39;.
*****************************************************************
========================= CLASS #222 =============================
(3019) {533443} [533549]: The solution also includes a class that implements the Row Data Gateway pattern.
(3219) {565993} [566078]: Zend_Db_Table_Row is an implementation of the Row Data Gateway pattern.
*****************************************************************
========================= CLASS #223 =============================
(3048) {538368} [538645]: Table initialization If application-specific logic needs to be initialized when a Table class is constructed, you can select to move your tasks to the init() method, which is called after all Table metadata has been processed.
(3266) {573358} [573653]: Specifying a custom Row class Row initialization If application-specific logic needs to be initialized when a row is constructed, you can select to move your tasks to the init() method, which is called after all row metadata has been processed.
*****************************************************************
========================= CLASS #224 =============================
(3049) {538646} [538793]: This is recommended over the __construct method if you do not need to alter the metadata in any programmatic way.
(3267) {573654} [573801]: This is recommended over the __construct method if you do not need to alter the metadata in any programmatic way.
*****************************************************************
========================= CLASS #225 =============================
(3096) {546153} [546424]: This method takes two arguments: an associative array of columns to change and new values to assign to these columns; and an SQL expression that is used in a WHERE clause, as criteria for the rows to change in the UPDATE operation.
(3103) {547185} [547337]: This method takes one argument, which is an SQL expression that is used in a WHERE clause, as criteria for the rows to delete.
*****************************************************************
========================= CLASS #226 =============================
(3097) {546434} [546647]: Example of updating rows in a Table Since the table update() method proxies to the database adapter update() method, the second argument can be an array of SQL expressions.
(3106) {547559} [547723]: Since the table delete() method proxies to the database adapter delete() method, the second argument can be an array of SQL expressions.
*****************************************************************
========================= CLASS #227 =============================
(3098) {546648} [546730]: The expressions are combined as Boolean terms using an AND operator.
(3105) {547454} [547536]: The expressions are combined as Boolean terms using an AND operator.
(3107) {547724} [547806]: The expressions are combined as Boolean terms using an AND operator.
*****************************************************************
========================= CLASS #228 =============================
(3099) {546757} [546829]: The values and identifiers in the SQL expression are not quoted for you.
(3108) {547833} [547905]: The values and identifiers in the SQL expression are not quoted for you.
*****************************************************************
========================= CLASS #229 =============================
(3100) {546830} [546953]: If you have values or identifiers that require quoting, you are responsible for doing this.
(3109) {547906} [548029]: If you have values or identifiers that require quoting, you are responsible for doing this.
*****************************************************************
========================= CLASS #230 =============================
(3101) {546954} [547060]: Use the quote() , quoteInto() , and quoteIdentifier() methods of the database adapter.
(3110) {548030} [548136]: Use the quote() , quoteInto() , and quoteIdentifier() methods of the database adapter.
*****************************************************************
========================= CLASS #231 =============================
(3117) {549149} [549300]: Because the number of rows returned is variable, the find() method returns an object of type Zend_Db_Table_Rowset_Abstract .
(3140) {552989} [553075]: This method returns an object of type Zend_Db_Table_Rowset_Abstract .
*****************************************************************
========================= CLASS #232 =============================
(3161) {556247} [556374]: Example of finding a single row by an expression This method returns an object of type Zend_Db_Table_Row_Abstract.
(3248) {570648} [570708]: Objects of type Zend_Db_Table_Row_Abstract are serializable.
*****************************************************************
========================= CLASS #233 =============================
(3162) {556375} [556522]: If the search criteria you specified match no rows in the database table, then fetchRow() returns PHP&#39;s null value.
(3298) {578733} [578822]: If the Rowset contains zero rows, current() returns PHP&#39;s null value.
*****************************************************************
========================= CLASS #234 =============================
(3166) {557008} [557084]: cols =&gt; an array, naming the column(s) of the table.
(3167) {557102} [557187]: primary =&gt; an array, naming the column(s) in the primary key.
*****************************************************************
========================= CLASS #235 =============================
(3170) {557421} [557552]: rowClass =&gt; the name of the concrete class used for Row objects returned by methods of this table instance.
(3172) {557626} [557763]: rowsetClass =&gt; the name of the concrete class used for Rowset objects returned by methods of this table instance.
*****************************************************************
========================= CLASS #236 =============================
(3204) {563374} [563609]: Custom method to find bugs by status Define Inflection in Zend_Db_Table Some people prefer that the table class name match a table name in the RDBMS by using a string transformation called inflection .
(3279) {576033} [576235]: Define Inflection in Zend_Db_Table_Row Some people prefer that the table class name match a table name in the RDBMS by using a string transformation called inflection .
*****************************************************************
========================= CLASS #237 =============================
(3214) {565372} [565534]: Example of an abstract table class that implements inflection You are responsible for writing the functions to perform inflection transformation.
(3285) {577060} [577143]: You are responsible for writing the functions to perform inflection transformation.
*****************************************************************
========================= CLASS #238 =============================
(3215) {565551} [565599]: Zend Framework does not provide such a function.
(3286) {577160} [577208]: Zend Framework does not provide such a function.
*****************************************************************
========================= CLASS #239 =============================
(3220) {566088} [566344]: Fetching a Row Zend_Db_Table_Abstract provides methods find() and fetchAll() , which each return an object of type Zend_Db_Table_Rowset, and the method fetchRow() , which returns an object of type Zend_Db_Table_Row.
(3290) {577675} [577845]: Fetching a Rowset Zend_Db_Table_Abstract provides methods find() and fetchAll() , each of which returns an object of type Zend_Db_Table_Rowset_Abstract .
*****************************************************************
========================= CLASS #240 =============================
(3229) {567502} [567611]: Example of using the toArray() method The array returned from toArray() is not updateable.
(3315) {580901} [580984]: Using toArray() The array returned from toArray() is not updateable.
*****************************************************************
========================= CLASS #241 =============================
(3249) {570718} [570899]: Serializing a Row Simply use PHP&#39;s serialize() function to create a string containing a byte-stream representation of the Row object argument.
(3319) {581397} [581584]: Serializing a Rowset Simply use PHP&#39;s serialize() function to create a string containing a byte-stream representation of the Rowset object argument.
*****************************************************************
========================= CLASS #242 =============================
(3250) {570913} [571110]: Example of serializing a row Unserializing Row Data Use PHP&#39;s unserialize() function to restore a string containing a byte-stream representation of an object.
(3320) {581598} [581777]: Unserializing a Serialized Rowset Use PHP&#39;s unserialize() function to restore a string containing a byte-stream representation of an object.
*****************************************************************
========================= CLASS #243 =============================
(3251) {571111} [571152]: The function returns the original object.
(3321) {581779} [581820]: The function returns the original object.
*****************************************************************
========================= CLASS #244 =============================
(3252) {571183} [571246]: Note that the Row object returned is in a disconnected state.
(3322) {581851} [581917]: Note that the Rowset object returned is in a disconnected state.
*****************************************************************
========================= CLASS #245 =============================
(3253) {571263} [571489]: You can read the Row object and its properties, but you cannot change values in the Row or execute other methods that require a database connection (for example, queries against related tables).
(3323) {581918} [582195]: You can iterate through the Rowset and read the Row objects and their properties, but you cannot change values in the Rows or execute other methods that require a database connection (for example, queries against related tables).
*****************************************************************
========================= CLASS #246 =============================
(3255) {571615} [571691]: A serialized object is a string that is readable to anyone who possesses it.
(3325) {582278} [582354]: A serialized object is a string that is readable to anyone who possesses it.
*****************************************************************
========================= CLASS #247 =============================
(3256) {571692} [571870]: It could be a security risk to store parameters such as database account and password in plain, unencrypted text in the serialized string.
(3326) {582355} [582525]: It could be a security risk to store parameters such as database account and password in plain, unencrypted text in the serialized string.
*****************************************************************
========================= CLASS #248 =============================
(3257) {571871} [572069]: You would not want to store such data to a text file that is not protected, or send it in an email or other medium that is easily read by potential attackers.
(3327) {582526} [582700]: You would not want to store such data to a text file that is not protected, or send it in an email or other medium that is easily read by potential attackers.
*****************************************************************
========================= CLASS #249 =============================
(3258) {572070} [572241]: The reader of the serialized object should not be able to use it to gain access to your database without knowing valid credentials.
(3328) {582701} [582848]: The reader of the serialized object should not be able to use it to gain access to your database without knowing valid credentials.
*****************************************************************
========================= CLASS #250 =============================
(3259) {572259} [572377]: Reactivating a Row as Live Data You can reactivate a disconnected Row, using the setTable() method.
(3329) {582875} [582946]: You can reactivate a disconnected Rowset using the setTable() method.
*****************************************************************
========================= CLASS #251 =============================
(3260) {572394} [572505]: The argument to this method is a valid object of type Zend_Db_Table_Abstract, which you create.
(3330) {582948} [583057]: The argument to this method is a valid object of type Zend_Db_Table_Abstract , which you create.
*****************************************************************
========================= CLASS #252 =============================
(3261) {572506} [572671]: Creating a Table object requires a live connection to the database, so by reassociating the Table with the Row, the Row gains access to the database.
(3331) {583059} [583238]: Creating a Table object requires a live connection to the database, so by reassociating the Table with the Rowset, the Rowset gains access to the database.
*****************************************************************
========================= CLASS #253 =============================
(3262) {572688} [572795]: Subsequently, you can change values in the Row object and save the changes to the database.
(3332) {583240} [583368]: Subsequently, you can change values in the Row objects contained in the Rowset and save the changes to the database.
*****************************************************************
========================= CLASS #254 =============================
(3265) {573090} [573348]: To use your new Row class to store results of Table queries, specify the custom Row class by name either in the $_rowClass protected member of a Table class, or in the array argument of the constructor of a Table object.
(3335) {583714} [583917]: Specify the custom Rowset class by name either in the $_rowsetClass protected member of a Table class, or in the array argument of the constructor of a Table object.
*****************************************************************
========================= CLASS #255 =============================
(3308) {580036} [580202]: The second optional parameter is a boolean; it tells the Rowset iterator if it must seek to that position in the same time, or not (default is false).
(4882) {863969} [864043]: The second optional parameter is the content-type of the data.
*****************************************************************
========================= CLASS #256 =============================
(3475) {610028} [610125]: Alnum Returns the string $value , removing all but alphabetic and digit characters.
(3477) {610216} [610303]: Alpha Returns the string $value , removing all but alphabetic characters.
*****************************************************************
========================= CLASS #257 =============================
(3476) {610126} [610206]: This filter includes an option to also allow white space characters.
(3478) {610304} [610384]: This filter includes an option to also allow white space characters.
*****************************************************************
========================= CLASS #258 =============================
(3482) {610855} [611120]: Int Returns (int) $value RealPath Expands all symbolic links and resolves references to &#39;/./&#39;, &#39;/../&#39; and extra &#39;/&#39; characters in the input path and return the canonicalized absolute pathname.
(3483) {611121} [611223]: The resulting path will have no symbolic link, &#39;/./&#39; or &#39;/../&#39; components.
*****************************************************************
========================= CLASS #259 =============================
(3487) {611512} [611627]: StringToLower Returns the string $value , converting alphabetic characters to lowercase as necessary.
(3488) {611637} [611752]: StringToUpper Returns the string $value , converting alphabetic characters to uppercase as necessary.
*****************************************************************
========================= CLASS #260 =============================
(3497) {613070} [613221]: It also provides a simple filter chaining mechanism by which multiple filters may be applied to a single datum in a user-defined order.
(8440) {1404193} [1404350]: It also provides a simple validator chaining mechanism by which multiple validators may be applied to a single datum in a user-defined order.
*****************************************************************
========================= CLASS #261 =============================
(3511) {615284} [615701]: Following is a basic example of using a filter upon two input data, the ampersand ( &amp; ) and double quote ( &quot; ) characters: Using the static get() method If it&#39;s inconvenient to load a given filter class and create an instance of the filter, you can use the static method Zend_Filter::get() as an alternative invocation style.
(8470) {1408971} [1409237]: Using the static is() method If it&#39;s inconvenient to load a given validation class and create an instance of the validator, you can use the static method Zend_Validate::is() as an alternative invocation style.
*****************************************************************
========================= CLASS #262 =============================
(3512) {615714} [615828]: The first argument of this method is a data input value, that you would pass to the filter() method.
(8471) {1409239} [1409354]: The first argument of this method is a data input value, that you would pass to the isValid() method.
*****************************************************************
========================= CLASS #263 =============================
(3514) {615982} [616141]: The get() method automatically loads the class, creates an instance, and applies the filter() method to the data input.
(8473) {1409528} [1409675]: The is() method automatically loads the class, creates an instance, and applies the isValid() method to the data input.
*****************************************************************
========================= CLASS #264 =============================
(3515) {616169} [616274]: You can also pass an array of constructor arguments, if they are needed for the filter class.
(8474) {1409703} [1409805]: You can also pass an array of constructor arguments, if they are needed for the validator.
*****************************************************************
========================= CLASS #265 =============================
(3517) {616635} [616805]: Also, the Zend_Filter_Input class allows you to instantiate and run multiple filter and validator classes on demand to process sets of input data.
(8478) {1410392} [1410564]: Also, the Zend_Filter_Input class allows you to instantiate and run multiple filter and validator classes on demand to process sets of input data.
*****************************************************************
========================= CLASS #266 =============================
(3541) {620197} [620404]: The following example filter rule set that declares the field &#39;month&#39; is filtered by Zend_Filter_Digits, and the field &#39;account&#39; is filtered by Zend_Filter_StringTrim.
(3542) {620406} [620557]: Then a validation rule set declares that the field &#39;account&#39; is valid only if it contains only alphabetical characters.
*****************************************************************
========================= CLASS #267 =============================
(3573) {625173} [625343]: The results of the getMessages() method is an associative array, mapping a rule name to an array of error messages related to that rule.
(3577) {625909} [626033]: The getErrors() method returns an associative array, mapping a rule name to an array of error identifiers.
*****************************************************************
========================= CLASS #268 =============================
(3580) {626277} [626510]: You can specify the message returned by getMissing() using the &#39;missingMessage&#39; option, as an argument to the Zend_Filter_Input constructor or using the setOptions() method.
(3631) {635737} [635945]: You can specify this message using the &#39;notEmptyMessage&#39; option, as an argument to the Zend_Filter_Input constructor or using the setOptions() method.
*****************************************************************
========================= CLASS #269 =============================
(3600) {630055} [630295]: The FIELDS metacommand If the rule name for a filter or validator is different than the field to which it should apply, you can specify the field name with the &#39;fields&#39; metacommand.
(3604) {630918} [631021]: The default value of the &#39;fields&#39; metacommand is the index of the current rule.
*****************************************************************
========================= CLASS #270 =============================
(3601) {630326} [630466]: You can specify this metacommand using the class constant Zend_Filter_Input::FIELDS instead of the string.
(3613) {632554} [632696]: You can specify this metacommand using the class constant Zend_Filter_Input::PRESENCE instead of the string.
(3616) {633080} [633227]: You can specify this metacommand using the class constant Zend_Filter_Input::DEFAULT_VALUE instead of the string.
(3628) {635135} [635280]: You can specify this metacommand using the class constant Zend_Filter_Input::ALLOW_EMPTY instead of the string.
(3635) {636643} [636788]: You can specify this metacommand using the class constant Zend_Filter_Input::BREAK_CHAIN instead of the string.
(3642) {638025} [638167]: You can specify this metacommand using the class constant Zend_Filter_Input::MESSAGES instead of the string.
*****************************************************************
========================= CLASS #271 =============================
(3603) {630627} [630887]: The string &#39;month&#39; simply becomes a mnemonic key for this filtering rule; it is not used as the field name if the field is specified with the &#39;fields&#39; metacommand, but it is used as the rule name.
(3605) {631023} [631193]: In the example above, if the &#39;fields&#39; metacommand is not specified, the rule would apply to the input field named &#39;month&#39;.
(3606) {631224} [631389]: Another use of the &#39;fields&#39; metacommand is to specify fields for filters or validators that require multiple fields as input.
*****************************************************************
========================= CLASS #272 =============================
(3623) {634275} [634503]: The ALLOW_EMPTY metacommand By default, if a field exists in the input data, then validators are applied to it, even if the value of the field is an empty string ( &#39;&#39; ).
(7134) {1204150} [1204357]: Values specifically specified in the API include &#39;comment&#39;, &#39;trackback&#39;, &#39;pingback&#39;, and an empty string (&#39;&#39;), but it may be any value.
*****************************************************************
========================= CLASS #273 =============================
(3633) {636234} [636417]: Alternatively, if the value of the &#39;breakChainOnFailure&#39; metacommand is true , the validator chain terminates after the first validator fails.
(3639) {637210} [637392]: With the latter class, the defined value of the &#39;breakChainOnFailure&#39; metacommand for a rule applies uniformly for all validators in the rule.
*****************************************************************
========================= CLASS #274 =============================
(3644) {638331} [638516]: If you have multiple validators for which you want to set the error message, you should use an array for the value of the &#39;messages&#39; metacommand.
(3651) {639341} [639486]: You can use these keys in the &#39;messages&#39; metacommand by passing an associative array instead of a string.
*****************************************************************
========================= CLASS #275 =============================
(3668) {642379} [642621]: In the submitted form, we&#39;ll now have three elements, the &#39;save&#39; element for the submit, and then two arrays, &#39;shipping&#39; and &#39;billing&#39;, each with keys for their various elements.
(8165) {1368383} [1368427]: Change &#39;array&#39; to &#39;gettext&#39;.
*****************************************************************
========================= CLASS #276 =============================
(3685) {645438} [645560]: The key to creating a multi-page form is to utilize sub forms, but to display only one such sub form per page.
(3941) {698500} [698526]: Creating multi-page forms.
*****************************************************************
========================= CLASS #277 =============================
(3712) {650435} [650621]: Creating Custom Form Markup Using Zend_Form_Decorator Rendering a form object is completely optional -- you do not need to use Zend_Form &#39;s render() methods at all.
(3958) {702228} [702294]: Zend_Form &#39;s answer to this issue is decorators .
*****************************************************************
========================= CLASS #278 =============================
(3720) {651601} [651795]: Before each decorator&#39;s render() method is called, the current item is set in the decorator using setElement() , giving the decorator awareness of the item being rendered.
(3738) {654061} [654141]: Each decorator&#39;s render() method accepts a string, $content .
*****************************************************************
========================= CLASS #279 =============================
(3724) {652360} [652644]: Standard options include: placement : Placement can be either &#39;append&#39; or &#39;prepend&#39; (case insensitive), and indicates whether content passed to render() will be appended or prepended, respectively.
(8536) {1421018} [1421204]: $placement can be either &#39;SET&#39; (overwrites all previously stored values), &#39;APPEND&#39; (added to end of stack), or &#39;PREPEND&#39; (added to top of stack).
(8551) {1423993} [1424076]: $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8565) {1426780} [1427018]: If you wish for it to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
(8575) {1428487} [1428702]: Finally, you can also use the headStyle() method to quickly add declarations elements; the signature for this is $placement should be either &#39;APPEND&#39;, &#39;PREPEND&#39;, or &#39;SET&#39;.
(8583) {1430330} [1430570]: If you wish for them to replace the stack or be added to the top, you will need to pass &#39;SET&#39; or &#39;PREPEND&#39;, respectively, as the first argument to captureStart() .
*****************************************************************
========================= CLASS #280 =============================
(3725) {652645} [652740]: In the case that a decorator replaces the content, this setting is ignored.
(3729) {653117} [653216]: In the case that a decorator replaces the content, this setting may be ignored.
*****************************************************************
========================= CLASS #281 =============================
(3746) {655458} [656078]: You might build such a &#39;Composite&#39; decorator as follows: You can then place this in the decorator path: You can then specify this decorator as &#39;Composite&#39; and attach it to an element: While this example showed how to create a decorator that renders complex output from several element properties, you can also create decorators that handle a single aspect of an element; the &#39;Decorator&#39; and &#39;Label&#39; decorators are excellent examples of this practice.
(3759) {658384} [658534]: The following loader types are used with the various plugin loader methods: &#39;validate&#39;, &#39;filter&#39;, and &#39;decorator&#39;.
(3773) {660893} [661016]: As a result, &#39;My_Decorator_Label&#39; will now be used when the &#39;Label&#39; decorator is requested.
(3892) {686360} [686490]: The following loader types are used with the various plugin loader methods: &#39;element&#39; and &#39;decorator&#39;.
*****************************************************************
========================= CLASS #282 =============================
(3748) {656278} [656864]: For example, if you wanted to simply display that an error occurred when validating an element, but not display each of the individual validation error messages, you might create your own &#39;Errors&#39; decorator: In this particular example, because the decorator&#39;s final segment, &#39;Errors&#39;, matches the same as Zend_Form_Decorator_Errors , it will be rendered in place of that decorator -- meaning you would not need to change any decorators to modify the output.
(4007) {713793} [713819]: Validation error messages.
*****************************************************************
========================= CLASS #283 =============================
(3757) {658038} [658226]: Plugin Loaders Zend_Form_Element makes use of Zend_Loader_PluginLoader to allow developers to specify locations of alternate validators, filters, and decorators.
(3890) {686034} [686202]: Plugin Loaders Zend_Form makes use of Zend_Loader_PluginLoader to allow developers to specify locations of alternate elements and decorators.
*****************************************************************
========================= CLASS #284 =============================
(3758) {658227} [658361]: Each has its own plugin loader associated with it, and general accessors are used to retrieve and modify each.
(3891) {686203} [686337]: Each has its own plugin loader associated with it, and general accessors are used to retrieve and modify each.
*****************************************************************
========================= CLASS #285 =============================
(3760) {658535} [658583]: The type names are case insensitive.
(3893) {686491} [686539]: The type names are case insensitive.
*****************************************************************
========================= CLASS #286 =============================
(3763) {658923} [659016]: getPluginLoader($type) : retrieves the plugin loader associated with $type .
(3894) {686562} [686727]: The methods used to interact with plugin loaders are as follows: getPluginLoader($type) : retrieves the plugin loader associated with $type.
*****************************************************************
========================= CLASS #287 =============================
(3767) {659578} [659723]: Custom validators, filters, and decorators are an easy way to share functionality between forms and encapsulate custom functionality.
(3899) {687602} [687735]: Custom elements and decorators are an easy way to share functionality between forms and encapsulate custom functionality.
*****************************************************************
========================= CLASS #288 =============================
(3777) {661671} [662186]: Filtering happens both during validation and when you retrieve the element value via getValue() : Filters may be added to the chain in two ways: passing in a concrete filter instance providing a filter name -- either a short name or fully qualified class name Let&#39;s see some examples: Short names are typically the filter name minus the prefix.
(3785) {663720} [664102]: Validators may be added to the chain in two ways: passing in a concrete validator instance providing a validator name -- either a short name or fully qualified class name Let&#39;s see some examples: Short names are typically the validator name minus the prefix.
*****************************************************************
========================= CLASS #289 =============================
(3778) {662187} [662275]: In the default case, this will mean minus the &#39;Zend_Filter_&#39; prefix.
(3786) {664103} [664193]: In the default case, this will mean minus the &#39;Zend_Validate_&#39; prefix.
*****************************************************************
========================= CLASS #290 =============================
(3779) {662288} [662343]: Additionally, the first letter need not be upper-cased.
(3787) {664206} [664261]: Additionally, the first letter need not be upper-cased.
*****************************************************************
========================= CLASS #291 =============================
(3780) {662353} [662543]: Using Custom Filter Classes If you have your own set of filter classes, you can tell Zend_Form_Element about these using addPrefixPath() .
(3788) {664271} [664467]: Using Custom Validator Classes If you have your own set of validator classes, you can tell Zend_Form_Element about these using addPrefixPath() .
*****************************************************************
========================= CLASS #292 =============================
(3781) {662544} [662847]: For instance, if you have validators under the &#39;My_Filter&#39; prefix, you can tell Zend_Form_Element about this as follows: (Recall that the third argument indicates which plugin loader on which to perform the action.)
(3789) {664468} [664774]: For instance, if you have validators under the &#39;My_Validator&#39; prefix, you can tell Zend_Form_Element about this as follows: (Recall that the third argument indicates which plugin loader on which to perform the action.)
*****************************************************************
========================= CLASS #293 =============================
(3810) {668995} [669138]: By default, this flag is false, meaning that your validator chain will be skipped if no value is passed to isValid() .
(3824) {671991} [672021]: By default, this flag is true.
(3869) {678723} [678753]: By default, this flag is true.
*****************************************************************
========================= CLASS #294 =============================
(3814) {669729} [669971]: By default, if an element is required, but does not contain a &#39;NotEmpty&#39; validator, isValid() will add one to the top of the stack, with the breakChainOnFailure flag set.
(3868) {678559} [678722]: autoInsertNotEmptyValidator : flag indicating whether or not to insert a &#39;NotEmpty&#39; validator when the element is required.
*****************************************************************
========================= CLASS #295 =============================
(3816) {670310} [670612]: If you do not want this behavior, you can turn it off by passing a false value to setAutoInsertNotEmptyValidator($flag) ; this will prevent isValid() from placing the &#39;NotEmpty&#39; validator in the validator chain.
(3823) {671753} [671990]: setAutoInsertNotEmptyValidator($flag) allows you to specify whether or not a &#39;NotEmpty&#39; validator will be prepended to the validator chain when the element is required.
*****************************************************************
========================= CLASS #296 =============================
(3833) {673324} [673486]: By default, Zend_Form_Element specifies the &#39;formText&#39; view helper, but individual subclasses specify different helpers.
(4154) {739022} [739099]: It specifies the &#39;formButton&#39; view helper for decoration.
(4214) {748995} [749101]: Zend_Form_Element_Text simply uses the &#39;formText&#39; view helper to display the element.
(4216) {749371} [749537]: Zend_Form_Element_Textarea uses the &#39;textArea&#39; view helper to display such elements, placing the value as the content of the element.
*****************************************************************
========================= CLASS #297 =============================
(3839) {674004} [674156]: Default Decorators Do Not Need to Be Loaded By default, the default decorators are loaded during object initialization.
(3963) {703075} [703227]: Default Decorators Do Not Need to Be Loaded By default, the default decorators are loaded during object initialization.
*****************************************************************
========================= CLASS #298 =============================
(3840) {674157} [674430]: You can disable this by passing the &#39;disableLoadDefaultDecorators&#39; option to the constructor: This option may be mixed with any other options you pass, both as array options or in a Zend_Config object.
(3928) {694093} [694200]: You may optionally pass in an array of options or a Zend_Config object as the third argument.
(3930) {694758} [695058]: You can disable this by passing the &#39;disableLoadDefaultDecorators&#39; option when creating a display group: This option may be mixed with any other options you pass, both as array options or in a Zend_Config object.
(3964) {703228} [703501]: You can disable this by passing the &#39;disableLoadDefaultDecorators&#39; option to the constructor: This option may be mixed with any other options you pass, both as array options or in a Zend_Config object.
*****************************************************************
========================= CLASS #299 =============================
(3847) {675744} [675932]: Using Multiple Decorators of the Same Type Internally, Zend_Form_Element uses a decorator&#39;s class as the lookup mechanism when retrieving decorators.
(3965) {703515} [703695]: Using Multiple Decorators of the Same Type Internally, Zend_Form uses a decorator&#39;s class as the lookup mechanism when retrieving decorators.
*****************************************************************
========================= CLASS #300 =============================
(3848) {675933} [676122]: As a result, you cannot register multiple decorators of the same type; subsequent decorators will simply overwrite those that existed before.
(3966) {703696} [703885]: As a result, you cannot register multiple decorators of the same type; subsequent decorators will simply overwrite those that existed before.
*****************************************************************
========================= CLASS #301 =============================
(3849) {676153} [676195]: To get around this, you can use aliases .
(3967) {703916} [703956]: To get around this, you can use aliases.
*****************************************************************
========================= CLASS #302 =============================
(3850) {676212} [677093]: Instead of passing a decorator or decorator name as the first argument to addDecorator() , pass an array with a single element, with the alias pointing to the decorator object or name: In the addDecorators() and setDecorators() methods, you will need to pass the &#39;decorator&#39; option in the array representing the decorator: Methods associated with decorators include: getDecorator($name) (retrieve a decorator object by name) getDecorators() (retrieve all decorators) removeDecorator($name) (remove decorator by name) clearDecorators() (remove all decorators) Metadata and Attributes Zend_Form_Element handles a variety of attributes and element metadata.
(3968) {703957} [704504]: Instead of passing a decorator or decorator name as the first argument to addDecorator() , pass an array with a single element, with the alias pointing to the decorator object or name: In the addDecorators() and setDecorators() methods, you will need to pass the &#39;decorator&#39; option in the array representing the decorator: You may create your own decorators for generating the form.
*****************************************************************
========================= CLASS #303 =============================
(3877) {681480} [681698]: Generally speaking, keys are named as follows: If &#39;set&#39; + key refers to a Zend_Form_Element method, then the value provided will be passed to that method.
(3985) {708818} [708981]: As a general rule, if &#39;set&#39; + the option key refers to a Zend_Form method, then the value provided will be passed to that method.
*****************************************************************
========================= CLASS #304 =============================
(3882) {683518} [683851]: You could define such an element as follows: You could then inform your form object about the prefix path for such elements, and start creating elements: The &#39;foo&#39; element will now be of type My_Element_Text , and exhibit the behaviour you&#39;ve outlined.
(5095) {902900} [903005]: As some examples: &#39;foo&#39; will be transformed to &#39;foo.phtml&#39;.
(5096) {903040} [903111]: &#39;FooBarBaz&#39; will be transformed to &#39;foo-bar-baz.phtml&#39;.
*****************************************************************
========================= CLASS #305 =============================
(3918) {691487} [691677]: setElementDecorators() accepts an array of decorators, just like setDecorators() , and will overwrite any previously set decorators in each element.
(3934) {695799} [696020]: setDisplayGroupDecorators() accepts an array of decorators, just like setDecorators() , and will overwrite any previously set decorators in each display group.
*****************************************************************
========================= CLASS #306 =============================
(3929) {694223} [694757]: Assuming that the elements &#39;username&#39; and &#39;password&#39; are already set in the form, the following code would group these elements in a &#39;login&#39; display group: You can access display groups using the getDisplayGroup() method, or via overloading using the display group&#39;s name: Default Decorators Do Not Need to Be Loaded By default, the default decorators are loaded during object initialization.
(5842) {1022515} [1022689]: The available built-in Authentication methods are PLAIN, LOGIN and CRAM-MD5 which all expect a &#39;username&#39; and &#39;password&#39; value in the configuration array.
*****************************************************************
========================= CLASS #307 =============================
(3939) {697300} [698369]: Methods for Interacting With Display Groups The following methods may be used to interact with display groups: getDisplayGroup($name) getDisplayGroups() removeDisplayGroup($name) clearDisplayGroups() setDefaultDisplayGroupClass($class) getDefaultDisplayGroupClass($class) Zend_Form_DisplayGroup Methods Zend_Form_DisplayGroup has the following methods, grouped by type: Configuration: Metadata: getAttrib($key) getAttribs() removeAttrib($key) clearAttribs() setName($name) getName() setDescription($value) getDescription() setLegend($legend) getLegend() setOrder($order) getOrder() Elements: getElement($name) getElements() removeElement($name) clearElements() Plugin loaders: getPluginLoader() Decorators: getDecorator($name) getDecorators() removeDecorator($name) clearDecorators() Rendering: getView() I18N: getTranslator() setDisableTranslator($flag) translatorIsDisabled() Sub Forms Sub forms serve several purposes: Creating logical element groups.
(3970) {704784} [705015]: The following methods may be used to interact with decorators: getDecorator($name) getDecorators() removeDecorator($name) clearDecorators() Validation A primary use case for forms is validating submitted data.
(3983) {707625} [708688]: Methods The following is a full list of methods available to Zend_Form , grouped by type: Configuration and Options: Plugin Loaders and paths: Metadata: getAttrib($key) getAttribs() removeAttrib($key) clearAttribs() setAction($action) getAction() setMethod($method) getMethod() setName($name) getName() Elements: getElement($name) getElements() removeElement($name) clearElements() getValue($name) getValues() getUnfilteredValue($name) getUnfilteredValues() Sub forms: getSubForm($name) getSubForms() removeSubForm($name) clearSubForms() Display groups: getDisplayGroup($name) getDisplayGroups() removeDisplayGroup($name) clearDisplayGroups() Validation persistData() Rendering: getView() getDecorator($name) getDecorators() removeDecorator($name) clearDecorators() I18N: getTranslator() setDisableTranslator($flag) translatorIsDisabled() Configuration Zend_Form is fully configurable via setOptions() and setConfig() (or by passing options or a Zend_Config object to the constructor).
*****************************************************************
========================= CLASS #308 =============================
(3945) {698852} [698970]: Like display groups, sub forms, when rendered as part of a larger form, can be used to group elements.
(4014) {714295} [714375]: Display groups and sub forms render in fieldsets by default.
*****************************************************************
========================= CLASS #309 =============================
(4017) {714552} [714694]: All form types (element, form, display group, sub form) allow specifying an optional item description.
(4111) {731478} [731601]: Zend_Form_Decorator_FormElements Forms, display groups, and sub forms are collections of elements.
*****************************************************************
========================= CLASS #310 =============================
(4080) {726718} [726977]: Next, we&#39;ll setup a section for the given controller (&#39;user&#39;), and a key for the form (&#39;login&#39;): You could then pass this to the form constructor: and the entire form will be defined.
(4317) {765374} [765449]: This link can be accessed by calling getLink(&#39;next&#39;) .
*****************************************************************
========================= CLASS #311 =============================
(4114) {731898} [732168]: Zend_Form_Decorator_HtmlTag The HtmlTag decorator allows you to utilize HTML tags to decorate content; the tag utilized is passed in the &#39;tag&#39; option, and any other options are used as HTML attributes to that tag.
(4125) {733702} [733824]: If the &#39;tag&#39; option is present, and no label present, the tag is rendered with no content.
*****************************************************************
========================= CLASS #312 =============================
(4123) {733440} [733559]: By default, labels are translated when a translation adapter exists and a translation for the label exists.
(4156) {739323} [739400]: The label will be translated if a translation adapter is present.
*****************************************************************
========================= CLASS #313 =============================
(4129) {734276} [734455]: You can do so with the following options and methods: optionalPrefix : set the text to prefix the label with when the element is optional.
(4133) {734835} [734939]: requiredPrefix : set the text to prefix the label with when the element is required.
*****************************************************************
========================= CLASS #314 =============================
(4131) {734593} [734697]: optionalSuffix : set the text to append the label with when the element is optional.
(4135) {735077} [735181]: requiredSuffix : set the text to append the label with when the element is required.
*****************************************************************
========================= CLASS #315 =============================
(4191) {744199} [744600]: You may manipulate the various checkbox options using the following methods: getMultiOption($option) getMultiOptions() removeMultiOption($option) clearMultiOptions() Zend_Form_Element_Multiselect XHTML select elements allow a &#39;multiple&#39; attribute, indicating multiple options may be selected for submission, instead of the usual one.
(4192) {744602} [744749]: Zend_Form_Element_Multiselect extends Zend_Form_Element_Select , and sets the multiple attribute to &#39;multiple&#39;.
*****************************************************************
========================= CLASS #316 =============================
(4225) {750858} [751073]: Google Provisioning provides the ability to create, retrieve, update, and delete user accounts, nicknames, and email lists on a Google Apps hosted domain.
(4525) {800877} [801032]: Specifically, this API allows administrators the ability to create, retrieve, update, and delete user accounts, nicknames, and email lists.
*****************************************************************
========================= CLASS #317 =============================
(4235) {752405} [752511]: These also include other classes such as Zend_Gdata, Zend_Gdata_Spreadsheets, etc.
(4248) {754382} [754503]: These also include other classes such as Zend_Gdata_Entry, and Zend_Gdata_Spreadsheets_ListEntry.
*****************************************************************
========================= CLASS #318 =============================
(4287) {761584} [761623]: The value of the parameter is a string.
(4296) {762679} [762740]: The value of the parameter is an integer.
*****************************************************************
========================= CLASS #319 =============================
(4328) {767407} [767580]: To post entries, you must be using an authenticated Zend_Http_Client that you created using the Zend_Gdata_AuthSub or Zend_Gdata_ClientLogin classes.
(4332) {768023} [768198]: To delete entries, you must be using an authenticated Zend_Http_Client that you created using the Zend_Gdata_AuthSub or Zend_Gdata_ClientLogin classes.
*****************************************************************
========================= CLASS #320 =============================
(4335) {768599} [768939]: The Google documentation says the ClientLogin mechanism is appropriate for &quot;installed applications&quot; whereas the AuthSub mechanism is for &quot;web applications.&quot; The difference is that AuthSub requires interaction from the user, and a browser interface that can react to redirection requests.
(4471) {791947} [792287]: The Google documentation says the ClientLogin mechanism is appropriate for &quot;installed applications&quot; whereas the AuthSub mechanism is for &quot;web applications.&quot; The difference is that AuthSub requires interaction from the user, and a browser interface that can react to redirection requests.
*****************************************************************
========================= CLASS #321 =============================
(4336) {768941} [769095]: The ClientLogin solution uses PHP code to supply the account credentials; the user is not required to enter her credentials interactively.
(4472) {792289} [792443]: The ClientLogin solution uses PHP code to supply the account credentials; the user is not required to enter her credentials interactively.
*****************************************************************
========================= CLASS #322 =============================
(4348) {770841} [771067]: Below is an example of PHP code for a web application to acquire authentication to use the Google Calendar service and create a Zend_Gdata client object using that authenticated Http Client.
(4487) {794481} [794712]: Below is an example of PHP code for a web application to acquire authentication to use the Google Calendar service and create a Zend_Gdata client object using that authenticated Zend_Http_Client.
*****************************************************************
========================= CLASS #323 =============================
(4357) {772313} [772523]: Connecting To The Calendar Service The Google Calendar API, like all GData APIs, is based off of the Atom Publishing Protoco (APP), an XML based format for managing web-based resources.
(4611) {817108} [817296]: Connect To The Base Service The Google Base API, like all GData APIs, is based off of the Atom Publishing Protocol (APP), an XML based format for managing web-based resources.
(4651) {824152} [824356]: Connecting To The Service The Picasa Web Albums API, like all GData APIs, is based off of the Atom Publishing Protocol (APP), an XML based format for managing web-based resources.
*****************************************************************
========================= CLASS #324 =============================
(4358) {772524} [772676]: Traffic between a client and the Google Calendar servers occurs over HTTP and allows for both authenticated and unauthenticated connections.
(4612) {817297} [817433]: Traffic between a client and the Google Base servers occurs over HTTP and allows for both authenticated and unauthenticated connections.
(4652) {824357} [824493]: Traffic between a client and the servers occurs over HTTP and allows for both authenticated and unauthenticated connections.
*****************************************************************
========================= CLASS #325 =============================
(4359) {772699} [772767]: Before any transactions can occur, this connection needs to be made.
(4613) {817456} [817524]: Before any transactions can occur, this connection needs to be made.
(4653) {824516} [824584]: Before any transactions can occur, this connection needs to be made.
*****************************************************************
========================= CLASS #326 =============================
(4360) {772768} [772962]: Creating a connection to the calendar servers involves two steps: creating an HTTP client and binding a Zend_Gdata_Calendar service instance to that client.
(4614) {817525} [817688]: Creating a connection to the base servers involves two steps: creating an HTTP client and binding a Zend_Gdata_Gbase service instance to that client.
(4654) {824585} [824775]: Creating a connection to the Picasa servers involves two steps: creating an HTTP client and binding a Zend_Gdata_Photos service instance to that client.
*****************************************************************
========================= CLASS #327 =============================
(4362) {773085} [773195]: Public feeds do not require authentication, but are read-only and offer reduced functionality.
(4616) {817803} [817897]: Public feeds do not require authentication, but are read-only and offer reduced functionality.
(4656) {824893} [825003]: Public feeds do not require authentication, but are read-only and offer reduced functionality.
*****************************************************************
========================= CLASS #328 =============================
(4363) {773196} [773346]: Private feeds offers the most complete functionality but requires an authenticated connection to the calendar servers.
(4617) {817898} [818012]: Private feeds offers the most complete functionality but requires an authenticated connection to the base servers.
(4657) {825004} [825152]: Private feeds offers the most complete functionality but requires an authenticated connection to the Picasa servers.
*****************************************************************
========================= CLASS #329 =============================
(4364) {773347} [773571]: There are three authentication schemes that are supported by Google Calendar: ClientAuth provides direct username/password authentication to the calendar servers.
(4618) {818013} [818205]: There are three authentication schemes that are supported by Google Base: ClientAuth provides direct username/password authentication to the base servers.
(4658) {825153} [825374]: There are three authentication schemes that are supported by Google Picasa : ClientAuth provides direct username/password authentication to the Picasa servers.
*****************************************************************
========================= CLASS #330 =============================
(4365) {773572} [773819]: Since this scheme requires that users provide your application with their password, this authentication is only recommended when other authentication schemes are insufficient.
(4619) {818206} [818381]: Since this scheme requires that users provide your application with their password, this authentication is only recommended when other authentication schemes are insufficient.
(4659) {825375} [825622]: Since this scheme requires that users provide your application with their password, this authentication is only recommended when other authentication schemes are insufficient.
*****************************************************************
========================= CLASS #331 =============================
(4366) {773841} [773970]: AuthSub allows authentication to the calendar servers via a Google proxy server.
(4620) {818403} [818504]: AuthSub allows authentication to the base servers via a Google proxy server.
(4660) {825644} [825771]: AuthSub allows authentication to the Picasa servers via a Google proxy server.
*****************************************************************
========================= CLASS #332 =============================
(4367) {773971} [774187]: This provides the same level of convenience as ClientAuth but without the security risk, making this an ideal choice for web-based applications.
(4621) {818505} [818649]: This provides the same level of convenience as ClientAuth but without the security risk, making this an ideal choice for web-based applications.
(4661) {825772} [825988]: This provides the same level of convenience as ClientAuth but without the security risk, making this an ideal choice for web-based applications.
*****************************************************************
========================= CLASS #333 =============================
(4370) {774758} [774869]: The Zend_Gdata library provides support for all three authentication schemes.
(4622) {818688} [818783]: The Zend_Gdata library provides support for all three authentication schemes.
(4662) {826027} [826133]: The Zend_Gdata library provides support for both authentication schemes.
*****************************************************************
========================= CLASS #334 =============================
(4371) {774886} [775072]: The rest of this chapter will assume that you are familiar the authentication schemes available and how to create an appropriate authenticated connection.
(4623) {818784} [818938]: The rest of this chapter will assume that you are familiar the authentication schemes available and how to create an appropriate authenticated connection.
(4663) {826150} [826336]: The rest of this chapter will assume that you are familiar the authentication schemes available and how to create an appropriate authenticated connection.
*****************************************************************
========================= CLASS #335 =============================
(4372) {775073} [775300]: For more information, please see section the Authentication section of this manual or the Authentication Overview in the Google Data API Developer&#39;s Guide .
(4624) {818939} [818982]: For more information, please see section .
(4625) {818999} [819093]: or the Authentication Overview in the Google Data API Developer&#39;s Guide .
(4664) {826337} [826564]: For more information, please see section the Authentication section of this manual or the Authentication Overview in the Google Data API Developer&#39;s Guide .
*****************************************************************
========================= CLASS #336 =============================
(4373) {775314} [775480]: Creating A Service Instance In order to interact with Google Calendar, this library provides the Zend_Gdata_Calendar service class.
(4626) {819107} [819280]: Create A Service Instance In order to interact with Google Base, this library provides the Zend_Gdata_Gbase service class.
*****************************************************************
========================= CLASS #337 =============================
(4374) {775481} [775675]: This class provides a common interface to the Google Data and Atom Publishing Protocol models and assists in marshaling requests to and from the calendar servers.
(4627) {819281} [819439]: This class provides a common interface to the Google Data and Atom Publishing Protocol models and assists in marshaling requests to and from the base servers.
(4666) {826739} [826924]: This class provides a common interface to the Google Data and Atom Publishing Protocol models and assists in marshaling requests to and from the servers.
*****************************************************************
========================= CLASS #338 =============================
(4375) {775706} [775829]: Once deciding on an authentication scheme, the next step is to create an instance of Zend_Gdata_Calendar .
(4628) {819470} [819607]: Once deciding on an authentication scheme, the next step is to create an instance of Zend_Gdata_Gbase .
(4667) {826955} [827076]: Once deciding on an authentication scheme, the next step is to create an instance of Zend_Gdata_Photos .
*****************************************************************
========================= CLASS #339 =============================
(4376) {775830} [775929]: The class constructor takes an instance of Zend_Http_Client as a single argument.
(4629) {819608} [819715]: This class takes in an instance of Zend_Http_Client as a single argument.
(4668) {827077} [827176]: The class constructor takes an instance of Zend_Http_Client as a single argument.
*****************************************************************
========================= CLASS #340 =============================
(4377) {775930} [776105]: This provides an interface for AuthSub and ClientAuth authentication, as both of these require creation of a special authenticated HTTP client.
(4630) {819716} [819851]: This provides an interface for AuthSub and ClientAuth authentication, as both of these creation of a special authenticated HTTP client.
(4669) {827177} [827352]: This provides an interface for AuthSub and ClientAuth authentication, as both of these require creation of a special authenticated HTTP client.
*****************************************************************
========================= CLASS #341 =============================
(4378) {776106} [776232]: If no arguments are provided, an unauthenticated instance of Zend_Http_Client will be automatically created.
(4631) {819852} [819994]: If no arguments are provided, an unauthenticated instance of Zend_Http_Client will be automatically created.
(4670) {827353} [827479]: If no arguments are provided, an unauthenticated instance of Zend_Http_Client will be automatically created.
*****************************************************************
========================= CLASS #342 =============================
(4379) {776246} [776751]: The example below shows how to create a Calendar service class using ClientAuth authentication: A Calendar service using AuthSub can be created in a similar, though slightly more lengthy fashion: Finally, an unauthenticated server can be created for use with either public feeds or MagicCookie authentication: Note that MagicCookie authentication is not supplied with the HTTP connection, but is instead specified along with the desired visibility when submitting queries.
(4632) {820025} [820402]: The example below shows how to create a Base service class using ClientAuth authentication: A Base service using AuthSub can be created in a similar, though slightly more lengthy fashion: Finally, an unauthenticated server can be created for use with snippets feeds: Retrieve Items You can query customer items feed or snippets feed to retrieve items.
*****************************************************************
========================= CLASS #343 =============================
(4391) {778377} [778550]: Queries When retrieving events using the Calendar API, specially constructed query URLs are used to describe what events should be returned.
(4635) {820681} [820809]: When retrieveing items using the Base API, specially constructed query URLs are used to describe what events should be returned.
*****************************************************************
========================= CLASS #344 =============================
(4392) {778551} [778718]: The Zend_Gdata_Calendar_EventQuery class simplifies this task by automatically constructing a query URL based on provided parameters.
(4636) {820810} [820978]: The Zend_Gdata_Gbase_ItemQuery and Zend_Gdata_Gbase_SnippetQuery classes simplify this task by automatically constructing a query URL based on provided parameters.
*****************************************************************
========================= CLASS #345 =============================
(4395) {779107} [779308]: If no user is provided, &quot;default&quot; will be used instead to indicate the currently authenticated user (if authenticated).
(4673) {828108} [828257]: If no user is provided, &quot;default&quot; will be used instead to indicate the currently authenticated user (if authenticated).
(4694) {830337} [830372]: The default is &quot;default&quot;.
*****************************************************************
========================= CLASS #346 =============================
(4406) {781264} [781434]: Refer to the Zend Framework API Documentation and the Calendar Protocol Reference for a complete list.
(4430) {785136} [785311]: For a complete list of event attributes, refer to the Zend Framework API Documentation and the Calendar Protocol Reference .
*****************************************************************
========================= CLASS #347 =============================
(4484) {794046} [794172]: It is only necessary when logging in after receiving a CAPTCHA challenge from a previous login attempt.
(4486) {794332} [794458]: It is only necessary when logging in after receiving a CAPTCHA challenge from a previous login attempt.
*****************************************************************
========================= CLASS #348 =============================
(4496) {796123} [796295]: This feed contains a list of Zend_Gdata_Docs_DocumentListEntry objects ( $feed-&gt;entries ), each of which represents a single Google Document.
(4732) {836759} [836910]: Among other things, this feed contains a list of $feed-&gt;entries ), each of which represents a single worksheet.
*****************************************************************
========================= CLASS #349 =============================
(4546) {804555} [804729]: If the specified user cannot be located a ServiceException will be thrown with an error code of Zend_Gdata_Gapps_Error::ENTITY_DOES_NOT_EXIST.
(4574) {809576} [809763]: As with users, if no corresponding nickname is found a ServiceException will be thrown with an error code of Zend_Gdata_Gapps_Error::ENTITY_DOES_NOT_EXIST.
*****************************************************************
========================= CLASS #350 =============================
(4557) {806081} [806340]: Forcing a user to change their password A user can be forced to change their password at their next login by setting the login-&gt;changePasswordAtNextLogin property to true .
(4558) {806379} [806522]: Similarly, this can be undone by setting the login-&gt;changePasswordAtNextLogin property to false .
*****************************************************************
========================= CLASS #351 =============================
(4560) {806767} [807174]: Accounts can be suspended or restored by using the suspendUser() and restoreUser() convenience methods: &lt;?php $gdata-&gt;suspendUser(&#39;foo&#39;); $gdata-&gt;restoreUser(&#39;foo&#39;); ?&gt; Alternatively, you can set the UserEntry&#39;s login-&gt;suspended property to true .
(4566) {808118} [808263]: &lt;?php $gdata-&gt;deleteUser(&#39;foo&#39;); ?&gt; Interacting with nicknames Nicknames serve as email aliases for existing users.
*****************************************************************
========================= CLASS #352 =============================
(4578) {810200} [810427]: Alternatively, create a new Zend_Gdata_Gapps_NicknameQuery, set its username property to the desired user, and submit the query by calling getNicknameFeed() on a service object.
(4580) {810781} [810876]: Alternatively, call getNicknameFeed() on a service object with no arguments.
*****************************************************************
========================= CLASS #353 =============================
(4586) {811749} [812210]: Creating an email list Email lists can be created by calling the createEmailList() convenience method: &lt;?php $gdata-&gt;createEmailList(&#39;friends&#39;); ?&gt; Email lists can also be created by instantiating EmailListEntry, providing a name for the list, then calling insertEmailList() on a service object to upload the entry to the server.
(4592) {813382} [813761]: Deleting an email list To delete an email list, call the deleteEmailList() convenience method: &lt;?php $gdata-&gt;deleteEmailList(&#39;friends&#39;); ?&gt; Interacting with email list recipients Each recipient subscribed to an email list is represented by an instance of Zend_Gdata_Gapps_EmailListRecipient.
*****************************************************************
========================= CLASS #354 =============================
(4587) {812224} [812645]: Retrieving all email lists to which a recipient is subscribed To retrieve all email lists to which a particular recipient is subscribed, call the retrieveEmailLists() convenience method: This will create a Zend_Gdata_Gapps_EmailListFeed object which holds each email list associated with the specified recipient.
(4590) {813127} [813242]: This will create a Zend_Gdata_Gapps_EmailListFeed object which holds each email list on the domain.
*****************************************************************
========================= CLASS #355 =============================
(4588) {812676} [812915]: Alternatively, create a new Zend_Gdata_Gapps_EmailListQuery, set its recipient property to the desired email address, and submit the query by calling getEmailListFeed() on a service object.
(4591) {813273} [813368]: Alternatively, call getEmailListFeed() on a service object with no arguments.
*****************************************************************
========================= CLASS #356 =============================
(4672) {827890} [828087]: There are query classes for each of the following types: User is used to specify the user whose data is being searched for, and is specified as a username.
(4693) {830262} [830335]: User sets the user whose data is being searched for.
*****************************************************************
========================= CLASS #357 =============================
(4677) {828800} [828958]: They are as follows: Projection sets the format of the data returned in the feed, as either &quot;api&quot; or &quot;base&quot;.
(4678) {828960} [829017]: Normally, &quot;api&quot; is desired.
(4679) {829019} [829050]: The default is &quot;api&quot;.
(4683) {829373} [829424]: The default is &quot;all&quot;.
*****************************************************************
========================= CLASS #358 =============================
(4680) {829068} [829183]: Type sets the type of element to be returned, as either &quot;feed&quot; or &quot;entry&quot;.
(4681) {829185} [829217]: The default is &quot;feed&quot;.
*****************************************************************
========================= CLASS #359 =============================
(4696) {830465} [830518]: This element only applies to album and photo queries.
(4701) {830839} [830916]: This element only applies to the album and photo queries.
*****************************************************************
========================= CLASS #360 =============================
(4697) {830539} [830628]: In the case of photo queries, this specifies the album that contains the requested photo.
(4702) {830918} [831007]: In the case of photo queries, this specifies the album that contains the requested photo.
*****************************************************************
========================= CLASS #361 =============================
(4698) {830630} [830711]: The album id is mutually exclusive with the album&#39;s name.
(4703) {831028} [831089]: The album name is mutually exclusive with the album&#39;s id.
*****************************************************************
========================= CLASS #362 =============================
(4699) {830713} [830742]: Setting one unsets the other.
(4704) {831091} [831120]: Setting one unsets the other.
*****************************************************************
========================= CLASS #363 =============================
(4715) {832900} [833076]: By setting a query to return a kind of &quot;comment&quot;, a feed request can return comments associated with a specific user, album, or photo.
(4717) {833289} [833425]: By setting a query to return a kind of &quot;tag&quot;, a feed request can return tags associated with a specific photo.
*****************************************************************
========================= CLASS #364 =============================
(4747) {838926} [839149]: Among other things, this feed contains an array of Zend_Gdata_Spreadsheets_ListEntry objects ( $listFeed-&gt;entries ), each of which represents a single row in a worksheet.
(4766) {842969} [843192]: Among other things, this feed contains an array of Zend_Gdata_Spreadsheets_CellEntry objects ( $cellFeed&gt;entries ), each of which represents a single cell in a worksheet.
*****************************************************************
========================= CLASS #365 =============================
(4756) {841069} [841207]: The method returns a Zend_Gdata_Spreadsheets_SpreadsheetsEntry object which represents the inserted row.
(4761) {841898} [842035]: The method returns a Zend_Gdata_Spreadsheets_SpreadsheetsEntry object which represents the updated row.
*****************************************************************
========================= CLASS #366 =============================
(4777) {844581} [844726]: Authentication The YouTube data API currently allows read-only access to public data, so no authentication is required.
(7253) {1230132} [1230192]: It also allows read-only access to public data of all users.
*****************************************************************
========================= CLASS #367 =============================
(4792) {847297} [847379]: This example retrieves videos uploaded by the user &#39;liz&#39;.
(4794) {847550} [847633]: This example retrieves videos favorited by the user &#39;liz&#39;.
*****************************************************************
========================= CLASS #368 =============================
(4800) {848640} [848880]: To retrieve the playlists for the user &#39;liz&#39;: Retrieving a specific playlist The library provides a helper method to retrieve the videos associated with a given playlist.
(4803) {849289} [849482]: To retrieve all subscriptions for the user &#39;liz&#39;: Retrieving a user&#39;s profile You can retrieve the public profile information for any YouTube user.
*****************************************************************
========================= CLASS #369 =============================
(4807) {850160} [850545]: Currently, the Zend_Http_Client class provides three built-in connection adapters: Zend_Http_Client_Adapter_Socket (default) Zend_Http_Client_Adapter_Proxy Zend_Http_Client_Adapter_Test The Zend_Http_Client object&#39;s adapter connection adapter is set using the &#39;adapter&#39; configuration option.
(4808) {850546} [850713]: When instantiating the client object, you can set the &#39;adapter&#39; configuration option to a string containing the adapter&#39;s name (eg.
(4854) {859120} [859214]: This can be changed by setting the &#39;maxredirects&#39; configuration parameter.
*****************************************************************
========================= CLASS #370 =============================
(4976) {880839} [880912]: $ret_as specifies the return type as described above.
(4982) {881441} [881495]: $ret_as specifies the return type as described above.
*****************************************************************
========================= CLASS #371 =============================
(5008) {887388} [887842]: Once an instance has been created you must then provide at least one SSL certificate public/private key pair used by the web server which received the Once the adapter has been configured you can then use the standard Zend_Auth facilities to validate the provided information card token and authenticate the user by examining the identity provided by the getIdentity() method.
(5012) {888370} [888591]: As was the case with the Zend_Auth_Adapter_InfoCard , we create an instance of Zend_InfoCard and then set one or more SSL certificate public/private key pairs used by the web server.
*****************************************************************
========================= CLASS #372 =============================
(5103) {904400} [904501]: Additionally, you want it to look in a &#39;layouts&#39; subdirectory for the script.
(5122) {907035} [907133]: By default, this value is &#39;layout&#39; and resolves to &#39;layout.phtml&#39;.
*****************************************************************
========================= CLASS #373 =============================
(5144) {909557} [909979]: Examples The following examples assume the following $options array and $config object: Passing options to the constructor or startMvc() Both the constructor and the startMvc() static method can accept either an array of options or a Zend_Config object with options in order to configure the Zend_Layout instance.
(8707) {1448963} [1448991]: $options should be an array.
*****************************************************************
========================= CLASS #374 =============================
(5153) {911873} [912082]: Particularly useful are the various placeholder helpers , as they allow you to retrieve content for areas such as the &lt;head&gt; section, navigation, etc.
(8531) {1419778} [1419897]: In your layout script, in the &lt;head&gt; section, you will then echo the helper to output it.
*****************************************************************
========================= CLASS #375 =============================
(5187) {919382} [919671]: The permitted options are as follows: Zend_Ldap Options Name Description host The default hostname of LDAP server if not supplied to connect() (also may be used when trying to canonicalize usernames in bind() ).
(5188) {919697} [919790]: port Default port of LDAP server if not supplied to connect() .
*****************************************************************
========================= CLASS #376 =============================
(5256) {931168} [931323]: Example of loadFile() method The $filename argument specifies the filename to load, which must not contain any path information.
(5273) {933462} [933575]: Example of isReadable() method The $filename argument specifies the filename to check.
*****************************************************************
========================= CLASS #377 =============================
(5308) {943048} [943238]: The option &#39; fix_date &#39; uses simple tests to determine if the day or month is not valid, and then applies heuristics to try and correct any detected problems.
(5316) {944876} [945054]: The option &#39; fix_date &#39; uses simple tests to determine if the day or month is not valid, and then applies heuristics to try and correct any detected problems.
*****************************************************************
========================= CLASS #378 =============================
(5337) {948371} [948554]: setLocale Getting the language and region Use getLanguage() to obtain a string containing the two character language code from the string locale identifier.
(5338) {948555} [948679]: Use getRegion() to obtain a string containing the two character region code from the string locale identifier.
*****************************************************************
========================= CLASS #379 =============================
(5348) {949599} [949743]: Details for getTranslationList($type = null, $locale = null, $value = null) Type Description Language Returns a localized list of all languages.
(5455) {965294} [965490]: See the following table for detailed informations: Details for getTranslation($value = null, $type = null, $locale = null) Type Description Language Returns a translation for a language.
*****************************************************************
========================= CLASS #380 =============================
(5349) {949744} [949852]: The language part of the locale is returned as key and the translation as value.
(5351) {949996} [950083]: The script is returned as key and the translation as value.
*****************************************************************
========================= CLASS #381 =============================
(5353) {950232} [950312]: This contains countries, continents and territories.
(5460) {966020} [966098]: This can be countries, continents and territories.
*****************************************************************
========================= CLASS #382 =============================
(5360) {950957} [951039]: When you omit the value you will get a list with both.
(5369) {951851} [951941]: When you omit the value you will get a list all both returned.
*****************************************************************
========================= CLASS #383 =============================
(5363) {951235} [951312]: This keys are generic values used in translation.
(5465) {966487} [966564]: This keys are generic values used in translation.
*****************************************************************
========================= CLASS #384 =============================
(5364) {951313} [951365]: These are normally calendar, collation and currency.
(5466) {966565} [966617]: These are normally calendar, collation and currency.
*****************************************************************
========================= CLASS #385 =============================
(5367) {951619} [951735]: When you use &#39;collation&#39; as value you will get all types of collations returned.
(5368) {951736} [951850]: When you use &#39;calendar&#39; as value you will get all types of calendars returned.
*****************************************************************
========================= CLASS #386 =============================
(5372) {952394} [952501]: There are several different represenations which are all returned as sub array.
(5380) {953548} [953655]: There are several different represenations which are all returned as sub array.
(5389) {954847} [954954]: There are several different represenations which are all returned as sub array.
*****************************************************************
========================= CLASS #387 =============================
(5373) {952502} [952633]: If you omit the value you will get a list of all months from the &#39;gregorian&#39; calendar returned.
(5381) {953656} [953785]: If you omit the value you will get a list of all days from the &#39;gregorian&#39; calendar returned.
(5390) {954955} [955088]: If you omit the value you will get a list of all quarters from the &#39;gregorian&#39; calendar returned.
(5395) {955897} [956026]: If you omit the value you will get a list of all eras from the &#39;gregorian&#39; calendar returned.
(5411) {958367} [958476]: If you omit the value you will get this list for the gregorian calendar returned.
(5413) {958821} [958930]: If you omit the value you will get this list for the gregorian calendar returned.
(5468) {966895} [966973]: For most locales this will be &#39;gregorian&#39;.
(5470) {967154} [967222]: If you omit the value the &#39;gregorian&#39; calendar will be used.
(5472) {967402} [967470]: If you omit the value the &#39;gregorian&#39; calendar will be used.
(5478) {968070} [968138]: If you omit the value the &#39;gregorian&#39; calendar will be used.
(5480) {968314} [968382]: If you omit the value the &#39;gregorian&#39; calendar will be used.
(5489) {969506} [969607]: If you omit the value then the &#39;gregorian&#39; calendar will be used.
(5492) {969845} [969946]: If you omit the value then the &#39;gregorian&#39; calendar will be used.
(5497) {970513} [970581]: If you omit the value the &#39;gregorian&#39; calendar will be used.
(5499) {970747} [970881]: If you omit the value then the &#39;gregorian&#39; calendar will be used with the &#39;medium&#39; format.
(5500) {970882} [971004]: If you give a string then the &#39;gregorian&#39; calendar will be used with the given format.
(5502) {971238} [971306]: If you omit the value the &#39;gregorian&#39; calendar will be used.
(5504) {971472} [971606]: If you omit the value then the &#39;gregorian&#39; calendar will be used with the &#39;medium&#39; format.
(5505) {971607} [971729]: If you give a string then the &#39;gregorian&#39; calendar will be used with the given format.
(5507) {972029} [972125]: If you omit the value the &#39;gregorian&#39; calendar will be used.
(5510) {972455} [972542]: In this case the &#39;gregorian&#39; calendar will be used.
(5514) {973099} [973146]: This will use the &#39;gregorian&#39; calendar.
*****************************************************************
========================= CLASS #388 =============================
(5374) {952662} [952783]: You can give any known calendar as value to get a list of months from this calendar returned.
(5382) {953814} [953933]: You can give any known calendar as value to get a list of days from this calendar returned.
*****************************************************************
========================= CLASS #389 =============================
(5375) {952784} [952909]: Use Zend_Date for simplicity Month Returns a localized list of all month names for this locale.
(5473) {967471} [967570]: Use Zend_Date for simplicity Month Returns a translation for a month.
*****************************************************************
========================= CLASS #390 =============================
(5376) {952910} [953138]: If you omit the value you will get the normally used gregorian full name of the months where each month number is used as key and the translated month is returned as value.
(5392) {955311} [955545]: If you omit the value you will get the normally used gregorian full name of the quarters where each quarter number is used as key and the translated quarter is returned as value.
(5397) {956237} [956459]: If you omit the value you will get the normally used gregorian full name of the eras where each era number is used as key and the translated era is returned as value.
*****************************************************************
========================= CLASS #391 =============================
(5377) {953139} [953256]: You can get the months for different calendars and formats if you give an array as value.
(5385) {954320} [954435]: You can get the days for different calendars and formats if you give an array as value.
(5393) {955546} [955693]: You can get the quarters for different calendars and formats if you give an array as value.
(5398) {956460} [956603]: You can get the eras for different calendars and formats if you give an array as value.
*****************************************************************
========================= CLASS #392 =============================
(5378) {953285} [953421]: The first array entry has to be the calendar, the second the used context and the third the width to return.
(5386) {954436} [954572]: The first array entry has to be the calendar, the second the used context and the third the width to return.
(5394) {955694} [955896]: The first array entry has to be the calendar, the second the used context and the third the width to return Eras Returns a list of all era representations within this locale.
*****************************************************************
========================= CLASS #393 =============================
(5379) {953422} [953547]: Use Zend_Date for simplicity Days Returns a list of all day representations within this locale.
(5481) {968383} [968478]: Use Zend_Date for simplicity Day Returns a translation for a day.
*****************************************************************
========================= CLASS #394 =============================
(5401) {956997} [957120]: You can get the date formats for different calendars if you give the wished calendar as string.
(5405) {957466} [957589]: You can get the time formats for different calendars if you give the wished calendar as string.
(5409) {957989} [958117]: You can get the date-time formats for different calendars if you give the wished calendar as string.
*****************************************************************
========================= CLASS #395 =============================
(5404) {957349} [957465]: If you omit the value you will get the time formats for the gregorian calendar returned.
(5408) {957839} [957960]: If you omit the value you will get the date-time formats for the gregorian calendar returned.
*****************************************************************
========================= CLASS #396 =============================
(5410) {958118} [958366]: Use Zend_Date for simplicity Field Returns a localized list of date fields which can be used to display calendars or date strings like &#39;month&#39; or &#39;year&#39; in a wished language.
(5508) {972126} [972366]: Use Zend_Date for simplicity Field Returns a translated date field which can be used to display calendars or date strings like &#39;month&#39; or &#39;year&#39; in a wished language.
*****************************************************************
========================= CLASS #397 =============================
(5412) {958477} [958792]: You can get the list for different calendars if you give the wished calendar as string Relative Returns a localized list of relative dates which can be used to display textual relative dates like &#39;yesterday&#39; or &#39;tomorrow&#39; in a wished language.
(5511) {972543} [972888]: You can get the field for other calendar formats if you give an array which has to look like this: Relative Returns a translated date which is relative to today which can include date strings like &#39;yesterday&#39; or &#39;tomorrow&#39; in a wished language.
*****************************************************************
========================= CLASS #398 =============================
(5415) {959190} [959279]: The currency is used as key and the translated name as value.
(5419) {959643} [959723]: The currency is used as key and the symbol as value.
*****************************************************************
========================= CLASS #399 =============================
(5420) {959724} [959921]: Use Zend_Currency for simplicity Question Returns a list of localized strings for acceptance (&#39;yes&#39;) and negotation (&#39;no&#39;).
(5522) {974336} [974524]: Use Zend_Currency for simplicity Question Returns a localized string for acceptance (&#39;yes&#39;) and negotation (&#39;no&#39;).
(5523) {974525} [974647]: You have to give either &#39;yes&#39; or &#39;no&#39; as value to receive the expected string.
*****************************************************************
========================= CLASS #400 =============================
(5421) {959922} [960101]: Use Zend_Locale&#39;s getQuestion method for simplicity CurrencyFraction Returns a list of fractions for currency values.
(5524) {974648} [974828]: Use Zend_Locale&#39;s getQuestion method for simplicity CurrencyFraction Returns the fraction to use for a given currency.
*****************************************************************
========================= CLASS #401 =============================
(5423) {960193} [960319]: Use Zend_Currency for simplicity CurrencyRounding Returns a list of how to round which currency.
(5526) {974898} [975016]: Use Zend_Currency for simplicity CurrencyRounding Returns how to round a given currency.
*****************************************************************
========================= CLASS #402 =============================
(5425) {960411} [960563]: Use Zend_Currency for simplicity CurrencyToRegion Returns a list of currencies which are known to be used within a region.
(5529) {975193} [975313]: Use Zend_Currency for simplicity CurrencyToRegion Returns the currency for a given region.
*****************************************************************
========================= CLASS #403 =============================
(5426) {960592} [960736]: The ISO3166 value (&#39;region&#39;) is used as array key and the ISO4217 value (&#39;currency&#39;) as array value.
(5428) {960870} [961014]: The ISO4217 value (&#39;currency&#39;) is used as array key and the ISO3166 value (&#39;region&#39;) as array value.
(5431) {961352} [961502]: The ISO territory code (&#39;territory&#39;) is used as array key and the ISO3166 value (&#39;region&#39;) as array value.
(5433) {961744} [961893]: The ISO3166 code (&#39;region&#39;) is used as array key and the ISO territory code (&#39;territory&#39;) as array value.
*****************************************************************
========================= CLASS #404 =============================
(5427) {960737} [960869]: Use Zend_Currency for simplicity RegionToCurrency Returns a list of regions where a currency is used .
(5531) {975430} [975555]: Use Zend_Currency for simplicity RegionToCurrency Returns the regions where a currency is used.
*****************************************************************
========================= CLASS #405 =============================
(5430) {961133} [961351]: Use Zend_Currency for simplicity RegionToTerritory Returns a list of territories with the countries or sub territories which are included within that territory.
(5534) {975795} [975918]: Use Zend_Currency for simplicity RegionToTerritory Returns the regions for a given territory.
*****************************************************************
========================= CLASS #406 =============================
(5437) {962386} [962488]: The script code is used as array key and the language code as array value.
(5439) {962684} [962787]: The country code is used as array key and the language code as array value.
(5441) {963034} [963109]: The country code is used as array key and the language code as array value.
*****************************************************************
========================= CLASS #407 =============================
(5450) {964813} [964927]: It returns always a string but it accepts some different types than the getTranslationList() method.
(5454) {965215} [965267]: This differs from the getTranslationList() method.
*****************************************************************
========================= CLASS #408 =============================
(5456) {965491} [965593]: To select the wished translation you must give the language code as value.
(5458) {965734} [965834]: To select the wished translation you must give the script code as value.
*****************************************************************
========================= CLASS #409 =============================
(5457) {965594} [965733]: For your convinience use the getLanguageTranslation($value) method Script Returns a translation for a script.
(5462) {966199} [966295]: For your convinience use the getCountryTranslation($value) method.
*****************************************************************
========================= CLASS #410 =============================
(5476) {967689} [967890]: If you want to receive data for other calendars, contexts or formats, then you must give an array instead of an integer with the expected values.
(5483) {968614} [968814]: If you want to receive data for other calendars, contexts or format, then you must give an array instead of an integer with the expected values.
(5486) {969064} [969265]: If you want to receive data for other calendars, contexts or formats, then you must give an array instead of an integer with the expected values.
(5488) {969392} [969505]: If you want to receive data for other calendars an string with the expected calendar.
(5491) {969731} [969844]: If you want to receive data for other calendars an string with the expected calendar.
(5495) {970142} [970337]: If you want to receive data for other calendars or formats, then you must give an array instead of the era number with the expected values.
*****************************************************************
========================= CLASS #411 =============================
(5477) {967891} [968069]: The array has to look like this: Zend_Date for simplicity DayContext Returns the default context for Â´days which is used within the given calendar.
(5484) {968815} [968947]: The array has to look like this: Zend_Date for simplicity Quarter Returns a translation for a quarter.
*****************************************************************
========================= CLASS #412 =============================
(5487) {969266} [969391]: The array has to look like this: Am Returns a translation for &#39;AM&#39; in a expected locale.
(5490) {969608} [969730]: Use Zend_Date for simplicity Pm Returns a translation for &#39;PM&#39; in a expected locale.
*****************************************************************
========================= CLASS #413 =============================
(5498) {970582} [970718]: Use Zend_Date for simplicity Date Returns the date format for an given calendar or format within a locale.
(5503) {971307} [971443]: Use Zend_Date for simplicity Time Returns the time format for an given calendar or format within a locale.
*****************************************************************
========================= CLASS #414 =============================
(5525) {974829} [974897]: You must give the currency as ISO value.
(5527) {975017} [975085]: You must give the currency as ISO value.
*****************************************************************
========================= CLASS #415 =============================
(5530) {975314} [975429]: The region code has to be given as ISO3166 string for example &#39;AT&#39; for austria.
(5537) {976211} [976321]: The region has to be given in ISO3166 string for example &#39;AT&#39; for austria.
*****************************************************************
========================= CLASS #416 =============================
(5539) {976569} [976684]: The language has to be given as ISO language code for example &#39;en&#39; for english.
(5543) {977279} [977394]: The language has to be given as ISO language code for example &#39;en&#39; for english.
*****************************************************************
========================= CLASS #417 =============================
(5613) {988153} [988354]: For example, &quot;de_IS&quot; would be truncated to &quot;de&quot;, and &quot;xh_RU&quot; would be truncated to &quot;xh&quot;, because neither of these combinations are valid.
(6215) {1076290} [1076383]: For example, &quot;Europe/Paris&quot; or &quot;America/Los_Angeles&quot;.
*****************************************************************
========================= CLASS #418 =============================
(5623) {989620} [990085]: Selecting the Right Locale For most situations, Automatically selecting a locale The seach algorithm used by Zend_Locale for automatic selection of a locale uses three sources of information: const Zend_Locale::BROWSER - The user&#39;s Web browser provides information with each request, which is published by PHP in the global variable HTTP_ACCEPT_LANGUAGE .
(5635) {991954} [992047]: It is published by PHP in the global variable HTTP_ACCEPT_LANGUAGE .
*****************************************************************
========================= CLASS #419 =============================
(5624) {990086} [990235]: If no matching locale can be found, then preference is given to ENVIRONMENT and lastly FRAMEWORK .
(5626) {990429} [990546]: If no matching locale can be found, then preference is given to FRAMEWORK and lastly BROWSER.
(5628) {990901} [991048]: If no matching locale can be found, then preference is given to ENVIRONMENT and lastly BROWSER .
*****************************************************************
========================= CLASS #420 =============================
(5634) {991732} [991953]: There are three locales which have a slightly different behaviour: &#39;browser&#39; - Zend_Locale should work with the information which is provided by the user&#39;s Web browser.
(5638) {992469} [992602]: &#39;environment&#39; - Zend_Locale should work with the information which is provided by the host server.
*****************************************************************
========================= CLASS #421 =============================
(5636) {992094} [992224]: If a user provides more than one locale within his browser, Zend_Locale will use the first found locale.
(5640) {992737} [992855]: If a environment provides more than one locale, Zend_Locale will use the first found locale.
*****************************************************************
========================= CLASS #422 =============================
(5637) {992225} [992447]: If the user does not provide a locale or the script is being called from the commandline the automatic locale &#39;environment&#39; will automatically be used and returned.
(5641) {992856} [992999]: If the host does not provide a locale the automatic locale &#39;browser&#39; will automatically be used and returned.
*****************************************************************
========================= CLASS #423 =============================
(5657) {994807} [995004]: See the following example for details: Setting a default locale In the case that no locale can be detected, automatically the locale de will be used.
(8264) {1380442} [1380500]: See the following example for details.
(8268) {1380859} [1380917]: See the following example for details.
*****************************************************************
========================= CLASS #424 =============================
(5668) {996690} [996830]: The &#39;number_format&#39; option specifies a default number format for use with toNumber() (see ).
(5700) {1001210} [1001332]: The &#39;number_format&#39; option explicitly specifies a non-default number format for use with toNumber() .
*****************************************************************
========================= CLASS #425 =============================
(5699) {1001085} [1001209]: This function will return a localized string of the given number in a conventional format for a specific locale.
(5711) {1002920} [1002997]: This function will return a localized string of the given number.
*****************************************************************
========================= CLASS #426 =============================
(5841) {1022304} [1022514]: SMTP Authentication Zend_Mail supports the use of SMTP Authentication, which can be enabled be passing the &#39;auth&#39; parameter to the configuration array in the Zend_Mail_Transport_Smtp constructor.
(5847) {1023091} [1023281]: This can be enabled be passing the &#39;ssl&#39; parameter to the configuration array in the Zend_Mail_Transport_Smtp constructor with a value of either &#39;ssl&#39; or &#39;tls&#39;.
*****************************************************************
========================= CLASS #427 =============================
(5899) {1030199} [1030356]: So it&#39;s very easy to output the whole tree in a view: The current selected folders is returned by the method getSelectedFolder() .
(8093) {1359891} [1359938]: So it&#39;s easy to learn and easy to maintain.
*****************************************************************
========================= CLASS #428 =============================
(6001) {1044624} [1044700]: The weight of the flowing mass is used as reference point within this class.
(6003) {1044901} [1044978]: The density of the flowing mass is used as reference point within this class.
(6005) {1045192} [1045268]: The volume of the flowing mass is used as reference point within this class.
(6017) {1047082} [1047151]: The weight of the fluid is used as reference point within this class.
(6019) {1047390} [1047467]: The distance of the flown fluid is used as reference point within this class.
*****************************************************************
========================= CLASS #429 =============================
(6036) {1049455} [1049527]: Zend_Memory uses Zend_Cache backends as storage providers.
(6087) {1057614} [1057705]: The memory manager uses Zend_Cache backends as storage providers.
*****************************************************************
========================= CLASS #430 =============================
(6037) {1049550} [1049671]: You may use the special name &#39; None &#39; as a backend name, in addition to standard Zend_Cache backends.
(6038) {1049699} [1049810]: If you use &#39; None &#39; as the backend name, then the memory manager never swaps memory blocks.
(6040) {1049975} [1050042]: The &#39; None &#39; backend doesn&#39;t need any option specified.
*****************************************************************
========================= CLASS #431 =============================
(6042) {1050237} [1050530]: Creating Movable Objects Create movable objects (objects, which may be swapped) using the Zend_Memory_Manager::create([$data]) method: The $data argument is optional and used to initialize the object value.
(6044) {1050627} [1050925]: Creating Locked Objects Create locked objects (objects, which are not swapped) using the Zend_Memory_Manager::createLocked([$data]) method: The $data argument is optional and used to initialize the object value.
*****************************************************************
========================= CLASS #432 =============================
(6043) {1050532} [1050613]: If the $data argument is omitted, the value is an empty string.
(6045) {1050927} [1051008]: If the $data argument is omitted, the value is an empty string.
*****************************************************************
========================= CLASS #433 =============================
(6055) {1052669} [1052985]: Memory Objects Movable Create movable memory objects using the create([$data]) method of the memory manager: &quot;Movable&quot; means that such objects may be swapped and unloaded from memory and then loaded when application code accesses the object.
(6056) {1052995} [1053244]: Locked Create locked memory objects using the createLocked([$data]) method of the memory manager: &quot;Locked&quot; means that such objects are never swapped and unloaded from memory.
*****************************************************************
========================= CLASS #434 =============================
(6067) {1054509} [1054700]: Memory container interface Memory container provides the following methods: getRef() method The getRef() method returns reference to the object value.
(6072) {1055299} [1055412]: The getRef() method returns reference to string, which is changed directly by user application.
*****************************************************************
========================= CLASS #435 =============================
(6107) {1061326} [1061383]: boundaryLine() : Returns the complete MIME boundary line.
(6108) {1061401} [1061457]: mimeEnd() : Returns the complete MIME end boundary line.
*****************************************************************
========================= CLASS #436 =============================
(6155) {1067894} [1068063]: Note this request redirects the end-user&#39;s web browser to an OpenID server site, where users are able to continue the authentication process.
(6160) {1068957} [1069062]: This response is passed indirectly, as an HTTP redirection of the end-user&#39;s web browser.
*****************************************************************
========================= CLASS #437 =============================
(6180) {1071480} [1071680]: Authentication Request for Specified Realm The example below only implements the second step of authentication, the first and third steps are the same as in the first example.
(6186) {1072369} [1072558]: Immediate Check without Interaction The example below only implements the second step of authentication, first and third steps are the same as in the first example.
*****************************************************************
========================= CLASS #438 =============================
(6205) {1075104} [1075178]: dob - the end user&#39;s date of birth as YYYY-MM-DD.
(6212) {1076001} [1076096]: country - the End User&#39;s country of residence as specified by ISO3166.
(6213) {1076114} [1076203]: language - end User&#39;s preferred language as specified by ISO639.
*****************************************************************
========================= CLASS #439 =============================
(6341) {1094194} [1094252]: Zend_Pdf module supports retrieving of specified revision.
(6442) {1107391} [1107437]: Retrieving specified revision of the document.
*****************************************************************
========================= CLASS #440 =============================
(6485) {1111933} [1111960]: mm is the minute (00â€“59).
(6486) {1111990} [1112018]: SS is the second (00â€“59).
*****************************************************************
========================= CLASS #441 =============================
(6488) {1112229} [1112314]: HH followed by &#39; is the absolute value of the offset from UT in hours (00â€“23).
(6489) {1112344} [1112431]: mm followed by &#39; is the absolute value of the offset from UT in minutes (00â€“59).
*****************************************************************
========================= CLASS #442 =============================
(6510) {1115045} [1115075]: Zend_Pdf module usage example.
(6514) {1115307} [1115334]: Zend_Pdf module usage demo.
*****************************************************************
========================= CLASS #443 =============================
(6610) {1130314} [1130389]: Index optimization is a process of merging several segments into a new one.
(6786) {1154171} [1154235]: Optimization essentially merges several segments into a new one.
*****************************************************************
========================= CLASS #444 =============================
(6637) {1133453} [1133666]: Many small segments may also trigger the &quot;Too many open files&quot; error determined by OS limitations Zend_Search_Lucene keeps each segment file opened to improve search performance.
(6643) {1134082} [1134147]: This again may trigger the &quot;Too many open files&quot; error.
*****************************************************************
========================= CLASS #445 =============================
(6645) {1134256} [1134373]: Greater than MaxBufferedDocs , but not greater than MaxBufferedDocs * MergeFactor .
(6646) {1134374} [1134503]: Greater than MaxBufferedDocs * MergeFactor , but not greater than MaxBufferedDocs * MergeFactor * MergeFactor .
*****************************************************************
========================= CLASS #446 =============================
(6714) {1142936} [1143071]: ctype_alpha() is not UTF-8 compatible, so the analyzer converts text to &#39;ASCII//TRANSLIT&#39; encoding before indexing.
(6716) {1143174} [1143250]: Conversion to &#39;ASCII//TRANSLIT&#39; may depend on current locale and OS.
(6854) {1163094} [1163177]: Actually, the default analyzer converts text to &#39;ASCII//TRANSLIT&#39; encoding.
*****************************************************************
========================= CLASS #447 =============================
(6783) {1153776} [1153966]: See Lucene index file formats for details ( http://lucene.apache.org/java/2_0_0/fileformats.html ) The currently supported Lucene index file format is version 2.1. .
(6832) {1160238} [1160284]: The currently supported Lucene version is 2.2.
*****************************************************************
========================= CLASS #448 =============================
(6794) {1155110} [1155263]: MaxBufferedDocs can be retrieved or set by $index-&gt;getMaxBufferedDocs() or $index-&gt;setMaxBufferedDocs($maxBufferedDocs) calls.
(6799) {1155714} [1155855]: MaxMergeDocs can be retrieved or set by $index-&gt;getMaxMergeDocs() or $index-&gt;setMaxMergeDocs($maxMergeDocs) calls.
(6809) {1156889} [1157026]: MergeFactor can be retrieved or set by $index-&gt;getMergeFactor() or $index-&gt;setMergeFactor($mergeFactor) calls.
*****************************************************************
========================= CLASS #449 =============================
(6795) {1155294} [1155314]: Default value is 10.
(6810) {1157057} [1157077]: Default value is 10.
*****************************************************************
========================= CLASS #450 =============================
(6865) {1164287} [1164378]: Binary fields are not tokenized or indexed, but are stored for retrieval with search hits.
(6869) {1164753} [1164825]: UnStored fields are tokenized and indexed, but not stored in the index.
*****************************************************************
========================= CLASS #451 =============================
(6890) {1167825} [1168086]: Simply use the query parser to construct a query from a string: Query Parser Exceptions The query parser may generate two types of exceptions: Zend_Search_Lucene_Exception is thrown if something goes wrong in the query parser itself.
(7046) {1190151} [1190233]: The first method uses query parser to construct a query from a string.
*****************************************************************
========================= CLASS #452 =============================
(6898) {1169229} [1169340]: Query string: or Query construction by API: The term field is optional.
(6929) {1173745} [1173891]: Query string: field1:test* or Query construction by API: The term field is optional.
(6933) {1174492} [1174641]: Query string: field1:test~0.4 or Query construction by API: The term field is optional.
(6964) {1178602} [1178723]: Query string: or Query construction by API: Term fields are optional.
*****************************************************************
========================= CLASS #453 =============================
(6901) {1169678} [1170053]: required means that documents not matching this term will not match the query; prohibited means that documents matching this term will not match the query; neither , in which case matched documents are neither prohibited from, nor required to, match the term.
(6914) {1171563} [1171951]: required means that documents not matching this subquery will not match the query; prohibited means that documents matching this subquery will not match the query; optional , in which case matched documents are neither prohibited from, nor required to, match the subquery.
*****************************************************************
========================= CLASS #454 =============================
(6902) {1170054} [1170145]: A document must match at least 1 term, however, to match the query.
(6915) {1171952} [1172047]: A document must match at least 1 subquery, however, to match the query.
*****************************************************************
========================= CLASS #455 =============================
(6904) {1170397} [1170452]: Both search methods can be used for multi-term queries.
(6917) {1172312} [1172364]: Both search methods can be used for boolean queries.
*****************************************************************
========================= CLASS #456 =============================
(6905) {1170475} [1170565]: Query string: &#39;+&#39; is used to define a required term.
(6918) {1172387} [1172481]: Query string: &#39;+&#39; is used to define a required subquery.
*****************************************************************
========================= CLASS #457 =============================
(6907) {1170691} [1170765]: &#39;field:&#39; prefix is used to indicate a document field for a search.
(6920) {1172611} [1172685]: &#39;field:&#39; prefix is used to indicate a document field for a search.
*****************************************************************
========================= CLASS #458 =============================
(6909) {1170854} [1171134]: or Query construction by API: It&#39;s also possible to specify terms list within MultiTerm query constructor: The $signs array contains information about the term type: true is used to define required term.
(6922) {1172774} [1173065]: or Query construction by API: It&#39;s also possible to specify subqueries list within Boolean query constructor: The $signs array contains information about the subquery type: true is used to define required subquery.
*****************************************************************
========================= CLASS #459 =============================
(6940) {1175710} [1175783]: If it&#39;s omitted or equal to null, then an empty query is constructed.
(6942) {1175911} [1176021]: If it&#39;s omitted or equal to null, then the terms&#39; positions are assumed to be sequential with no gaps.
(6944) {1176136} [1176209]: If it&#39;s omitted or equal to null, then the default field is searched.
*****************************************************************
========================= CLASS #460 =============================
(6945) {1176232} [1176326]: Thus: will search for the phrase &#39;zend framework&#39; in all fields.
(6946) {1176349} [1176391]: will search for the phrase &#39;zend ?????
(6952) {1177122} [1177202]: Thus: will search for the phrase &#39;zend framework&#39;.
*****************************************************************
========================= CLASS #461 =============================
(6985) {1181377} [1181543]: Starting in 1.5, Wildcards Wildcard queries support is available with SVN and latest snapshot versions and doesn&#39;t included into current release.
(6993) {1182736} [1182977]: Fuzzy search is availably only starting ZF 1.5 Starting in 1.5, Range Searches Range queries support is available with SVN and latest snapshot versions and doesn&#39;t included into current release.
(7000) {1183554} [1183721]: Starting in 1.5, Fuzzy Searches Fuzzy queries support is available with SVN and latest snapshot versions and doesn&#39;t included into current release.
*****************************************************************
========================= CLASS #462 =============================
(6987) {1181696} [1181771]: To perform a single character wildcard search use the &quot;?&quot; symbol.
(6988) {1181794} [1181871]: To perform a multiple character wildcard search use the &quot;*&quot; symbol.
*****************************************************************
========================= CLASS #463 =============================
(7002) {1183877} [1183968]: To do a fuzzy search use the tilde, &quot;~&quot;, symbol at the end of a Single word Term.
(7008) {1184616} [1184715]: To do a proximity search use the tilde, &quot;~&quot;, symbol at the end of the phrase.
*****************************************************************
========================= CLASS #464 =============================
(7024) {1186433} [1186641]: To search for documents that contain &quot;PHP framework&quot; and &quot;Zend Framework&quot; use the query: OR The OR operator divides the query into several optional terms.
(7025) {1186672} [1186886]: To search for documents that contain &quot;PHP framework&quot; or &quot;Zend Framework&quot; use the query: NOT The NOT operator excludes documents that contain the term after NOT.
(7027) {1187080} [1187231]: To search for documents that contain &quot;PHP framework&quot; but not &quot;Zend Framework&quot; use the query: &amp;&amp;, ||, and !
(7028) {1187232} [1187280]: operators &amp;&amp;, ||, and !
(7032) {1187801} [1188064]: To search for documents that contain &quot;PHP framework&quot; but not &quot;Zend Framework&quot; use the query: No Operator If no operator is used, then the search behavior is defined by the &quot;default boolean operator&quot;.
*****************************************************************
========================= CLASS #465 =============================
(7100) {1199166} [1199473]: The Zend_Server_Reflection tree provides a standard mechanism for performing function and class introspection for use as callbacks with the server classes, and provides data suitable for use with Zend_Server_Interface &#39;s getFunctions() and loadFunctions() methods.
(7101) {1199479} [1199669]: Zend_Server_Reflection Introduction Zend_Server_Reflection provides a standard mechanism for performing function and class introspection for use with server classes.
*****************************************************************
========================= CLASS #466 =============================
(7146) {1205645} [1205704]: An exception will be raised if the API key used is invalid.
(7152) {1206425} [1206496]: An exception will be raised if the API key used is invalid.
*****************************************************************
========================= CLASS #467 =============================
(7172) {1210260} [1210431]: Looking up a Specific Amazon Item by ASIN The itemLookup() method provides the ability to fetch a particular Amazon item when the ASIN is known.
(7173) {1210441} [1210604]: Looking up a Specific Amazon Item by ASIN The itemLookup() method also accepts an optional second parameter for handling search options.
*****************************************************************
========================= CLASS #468 =============================
(7174) {1210605} [1210721]: For full details, including a list of available options, please see the relevant Amazon documentation .
(7178) {1211452} [1211693]: For full details, including a list of available options, please see the relevant Amazon documentation The Zend_Service_Amazon_Query class is an easy to use wrapper around this method.
*****************************************************************
========================= CLASS #469 =============================
(7191) {1216405} [1216504]: using foreach ), as well as direct access to a specific result using seek() .
(7287) {1237064} [1237233]: Implements the SeekableIterator interface for easy iteration (e.g., using foreach ), as well as direct access to a specific result using seek() .
*****************************************************************
========================= CLASS #470 =============================
(7192) {1216522} [1217018]: Zend_Service_Amazon_ResultSet::totalResults() int totalResults Returns the total number of results returned by the search Back to Class List Zend_Service_Amazon_OfferSet Each result returned by Zend_Service_Amazon::itemSearch() and Zend_Service_Amazon::itemLookup() contains a Zend_Service_Amazon_OfferSet object through which pricing information for the item can be retrieved.
(7655) {1288588} [1288725]: Zend_Service_Yahoo_ResultSet::totalResults() int totalResults Returns the number of results returned for the search.
*****************************************************************
========================= CLASS #471 =============================
(7206) {1221739} [1222000]: Zend_Service_Audioscrobbler provides several methods for retrieving data specific to a single user: userGetProfileInformation() : Returns a SimpleXML object containing the current user&#39;s profile information.
(7207) {1222022} [1222164]: userGetTopArtists() : Returns a SimpleXML object containing a list of the current user&#39;s most listened to artists.
(7208) {1222186} [1222326]: userGetTopAlbums() : Returns a SimpleXML object containing a list of the current user&#39;s most listened to albums.
(7209) {1222348} [1222488]: userGetTopTracks() : Returns a SimpleXML object containing a list of the current user&#39;s most listened to tracks.
(7210) {1222510} [1222639]: userGetTopTags() : Returns a SimpleXML object containing a list of tags most applied by the current user.
(7217) {1223402} [1223532]: userGetFriends() : Returns a SimpleXML object containing the user names of the current user&#39;s friends.
(7218) {1223554} [1223713]: userGetNeighbours() : Returns a SimpleXML object containing the user names of people with similar listening habits to the current user.
(7222) {1224254} [1224403]: userGetRecentJournals() : Returns a SimpleXML object containing a list of the current user&#39;s most recent journal entries.
(7231) {1226011} [1226148]: artistGetTopFans() : Returns a SimpleXML object containing a list of Users who listen most to the current Artist.
(7232) {1226170} [1226307]: artistGetTopTracks() : Returns a SimpleXML object containing a list of the current Artist&#39;s top-rated Tracks.
(7233) {1226329} [1226466]: artistGetTopAlbums() : Returns a SimpleXML object containing a list of the current Artist&#39;s top-rated Albums.
(7234) {1226488} [1226632]: artistGetTopTags() : Returns a SimpleXML object containing a list of the Tags most frequently applied to current Artist.
(7236) {1227017} [1227163]: trackGetTopTags() : Returns a SimpleXML object containing a list of the Tags most frequently applied to the current Track.
(7237) {1227195} [1227503]: Tags Zend_Service_Audioscrobbler provides several methods for retrieving data specific to a single tag, specified via the setTag() method: tagGetOverallTopTags() : Returns a SimpleXML object containing a list of Tags most frequently used on Audioscrobbler.
(7238) {1227525} [1227678]: tagGetTopArtists() : Returns a SimpleXML object containing a list of Artists to whom the current Tag was most frequently applied.
(7239) {1227700} [1227852]: tagGetTopAlbums() : Returns a SimpleXML object containing a list of Albums to which the current Tag was most frequently applied.
(7240) {1227874} [1228026]: tagGetTopTracks() : Returns a SimpleXML object containing a list of Tracks to which the current Tag was most frequently applied.
*****************************************************************
========================= CLASS #472 =============================
(7212) {1222763} [1222889]: Returns a SimpleXML object containing the tags most applied to the current artist by the current user.
(7214) {1223010} [1223135]: Returns a SimpleXML object containing the tags most applied to the current album by the current user.
(7216) {1223255} [1223380]: Returns a SimpleXML object containing the tags most applied to the current track by the current user.
*****************************************************************
========================= CLASS #473 =============================
(7220) {1223898} [1224055]: userGetRecentBannedTracks() : Returns a SimpleXML object containing a list of the 10 tracks most recently banned by the current user.
(7221) {1224077} [1224232]: userGetRecentLovedTracks() : Returns a SimpleXML object containing a list of the 10 tracks most recently loved by the current user.
*****************************************************************
========================= CLASS #474 =============================
(7223) {1224425} [1224587]: userGetWeeklyChartList() : Returns a SimpleXML object containing a list of weeks for which there exist Weekly Charts for the current user.
(7224) {1224609} [1224763]: userGetRecentWeeklyArtistChart() : Returns a SimpleXML object containing the most recent Weekly Artist Chart for the current user.
(7225) {1224785} [1224937]: userGetRecentWeeklyAlbumChart() : Returns a SimpleXML object containing the most recent Weekly Album Chart for the current user.
(7226) {1224959} [1225111]: userGetRecentWeeklyTrackChart() : Returns a SimpleXML object containing the most recent Weekly Track Chart for the current user.
(7242) {1228403} [1228563]: groupGetWeeklyChart() : Returns a SimpleXML object containing a list of weeks for which there exist Weekly Charts for the current Group.
(7243) {1228585} [1228741]: groupGetRecentWeeklyArtistChart() : Returns a SimpleXML object containing the most recent Weekly Artist Chart for the current Group.
(7244) {1228763} [1228917]: groupGetRecentWeeklyAlbumChart() : Returns a SimpleXML object containing the most recent Weekly Album Chart for the current Group.
(7245) {1228939} [1229093]: groupGetRecentWeeklyTrackChart() : Returns a SimpleXML object containing the most recent Weekly Track Chart for the current Group.
*****************************************************************
========================= CLASS #475 =============================
(7227) {1225133} [1225202]: $fromDate to $toDate for the current user.
(7228) {1225133} [1225202]: $fromDate to $toDate for the current user.
(7229) {1225133} [1225202]: $fromDate to $toDate for the current user.
*****************************************************************
========================= CLASS #476 =============================
(7246) {1229115} [1229148]: setFromDate() and setToDate() .
(7248) {1229327} [1229360]: setFromDate() and setToDate() .
*****************************************************************
========================= CLASS #477 =============================
(7247) {1229149} [1229305]: Returns a SimpleXML object containing the Weekly Artist Chart from the current fromDate to the current toDate for the current Group.
(7249) {1229361} [1229516]: Returns a SimpleXML object containing the Weekly Album Chart from the current fromDate to the current toDate for the current Group.
*****************************************************************
========================= CLASS #478 =============================
(7281) {1235523} [1235610]: getIdByUsername() : Returns a string user ID associated with the given username string.
(7282) {1235628} [1235737]: getIdByEmail() : Returns a string user ID associated with the given email address string.
*****************************************************************
========================= CLASS #479 =============================
(7288) {1237251} [1237660]: Properties Zend_Service_Flickr_ResultSet Properties Name Type Description totalResultsAvailable int Total Number of Results available totalResultsReturned int Total Number of Results returned firstResultPosition int The offset in the total result set of this result set Zend_Service_Flickr_ResultSet::totalResults() int totalResults Returns the total number of results in this result set.
(7656) {1288743} [1288898]: Properties Zend_Service_Yahoo_ResultSet Name Type Description totalResultsAvailable int Total number of results found.
*****************************************************************
========================= CLASS #480 =============================
(7297) {1238325} [1238375]: dateupload string The date the photo was uploaded.
(7298) {1238376} [1238422]: datetaken string The date the photo was taken.
*****************************************************************
========================= CLASS #481 =============================
(7416) {1257807} [1258180]: To view a SOAP transaction, call the getSoapClient() method to get the SOAPClient instance and then call the appropriate methods like __getLastRequest() and __getLastRequest() : Zend_Service_StrikeIron: Bundled Services Zend_Service_StrikeIron comes with wrapper classes for three popular StrikeIron services.
(7437) {1261723} [1261770]: Wrappers for three popular StrikeIron services.
*****************************************************************
========================= CLASS #482 =============================
(7417) {1258186} [1258320]: ZIP Code Information Zend_Service_StrikeIron_ZipCodeInfo provides a client for StrikeIron&#39;s Zip Code Information Service.
(7419) {1258645} [1258764]: Address Verification Zend_Service_StrikeIron_USAddressVerification provides a client for StrikeIron&#39;s U.S.
*****************************************************************
========================= CLASS #483 =============================
(7418) {1258322} [1258644]: For more information on this service, visit these StrikeIron resources: Zip Code Information Service Page Zip Code Information Service WSDL The service contains a getZipCode() method that will retrieve information about a United States ZIP code or Canadian postal code: U.S.
(7421) {1258796} [1258890]: For more information on this service, visit these StrikeIron resources: U.S.
*****************************************************************
========================= CLASS #484 =============================
(7423) {1258930} [1259249]: Address Verification Service WSDL The service contains a verifyAddressUSA() method that will verify an address in the United States: Sales &amp; Use Tax Basic Zend_Service_StrikeIron_SalesUseTaxBasic provides a client for StrikeIron&#39;s Sales &amp; Use Tax Basic service.
(7452) {1263936} [1264043]: getService() method is used to return a client to the Sales &amp; Use Tax Basic service.
*****************************************************************
========================= CLASS #485 =============================
(7475) {1266563} [1266669]: It&#39;s important to understand the difference between exceptions and normal failed method calls.
(7483) {1267857} [1267939]: It&#39;s important to check the status on each service that you are using.
*****************************************************************
========================= CLASS #486 =============================
(7522) {1273298} [1273413]: You can get information about your API key usage using the Zend_Service_Technorati::keyInfo() method.
(7523) {1273423} [1273528]: Zend_Service_Technorati::keyInfo() returns a Zend_Service_Technorati_KeyInfoResult object.
(7550) {1276843} [1276933]: It returns a Zend_Service_Technorati_KeyInfoResult object.
*****************************************************************
========================= CLASS #487 =============================
(7524) {1273529} [1273595]: For full details please see the API reference guide .
(7628) {1286191} [1286243]: For full details, please see the Yahoo!
(7634) {1286489} [1286541]: For full details, please see the Yahoo!
(7640) {1286810} [1286862]: For full details, please see the Yahoo!
(7646) {1287170} [1287222]: For full details, please see the Yahoo!
*****************************************************************
========================= CLASS #488 =============================
(7527) {1274029} [1274138]: For full details please see Zend_Service_Technorati::cosmos() in the API reference guide .
(7530) {1274385} [1274494]: For full details please see Zend_Service_Technorati::search() in the API reference guide .
(7533) {1274734} [1274840]: For full details please see Zend_Service_Technorati::tag() in the API reference guide .
(7536) {1275107} [1275221]: For full details please see Zend_Service_Technorati::dailyCounts() in the API reference guide .
(7539) {1275474} [1275584]: For full details please see Zend_Service_Technorati::topTags() in the API reference guide .
(7542) {1275855} [1275966]: For full details please see Zend_Service_Technorati::blogInfo() in the API reference guide .
(7545) {1276232} [1276347]: For full details please see Zend_Service_Technorati::blogPostTags() in the API reference guide .
(7548) {1276600} [1276710]: For full details please see Zend_Service_Technorati::getInfo() in the API reference guide .
(7551) {1276934} [1277043]: For full details please see Zend_Service_Technorati::keyInfo() in the API reference guide .
(7560) {1279101} [1279208]: For full details please see Zend_Service_Technorati in the API reference guide .
*****************************************************************
========================= CLASS #489 =============================
(7538) {1275381} [1275473]: It returns a Zend_Service_Technorati_TagsResultSet object.
(7544) {1276139} [1276231]: It returns a Zend_Service_Technorati_TagsResultSet object.
*****************************************************************
========================= CLASS #490 =============================
(7553) {1277172} [1277364]: Each Zend_Service_Technorati_*ResultSet class holds a type-specific result set which can be easily iterated, with each result being contained in a type result object.
(7651) {1287440} [1287603]: Each search type returns a type-specific result set which can be easily iterated, with each result being contained in a type result object.
*****************************************************************
========================= CLASS #491 =============================
(7554) {1277365} [1277570]: All result set classes extend Zend_Service_Technorati_ResultSet class and implement the SeekableIterator interface, allowing for easy iteration and seeking to a specific result.
(7652) {1287604} [1287744]: All result set classes implement the SeekableIterator interface, allowing for easy iteration and seeking to a specific result.
*****************************************************************
========================= CLASS #492 =============================
(7562) {1279321} [1279501]: The scope of this class is to be extended by a query-specific child result set class, and it should never be used to initialize a standalone object.
(7576) {1281369} [1281545]: The scope of this class is to be extended by a query specific child result class, and it should never be used to initialize a standalone object.
*****************************************************************
========================= CLASS #493 =============================
(7578) {1281709} [1281868]: It is never returned as a standalone object, but it always belongs to a valid Zend_Service_Technorati_CosmosResultSet object.
(7581) {1282149} [1282308]: It is never returned as a standalone object, but it always belongs to a valid Zend_Service_Technorati_SearchResultSet object.
(7584) {1282580} [1282736]: It is never returned as a standalone object, but it always belongs to a valid Zend_Service_Technorati_TagResultSet object.
(7587) {1283029} [1283193]: It is never returned as a standalone object, but it always belongs to a valid Zend_Service_Technorati_DailyCountsResultSet object.
(7590) {1283492} [1283650]: It is never returned as a standalone object, but it always belongs to a valid Zend_Service_Technorati_TagsResultSet object.
*****************************************************************
========================= CLASS #494 =============================
(7607) {1284788} [1284817]: Searching the Web with Yahoo!
(7613) {1285250} [1285279]: Searching the Web with Yahoo!
*****************************************************************
========================= CLASS #495 =============================
(7609) {1284880} [1285038]: using the webSearch() method, which accepts a string query parameter and an optional second parameter as an array of search options.
(7616) {1285426} [1285557]: This method accepts a string query parameter and an optional array of search options, as for the webSearch() method .
*****************************************************************
========================= CLASS #496 =============================
(7610) {1285039} [1285112]: For full details and an option list, please visit the Yahoo!
(7617) {1285558} [1285643]: For full details and an option list, please visit the Yahoo!
(7622) {1285867} [1285940]: For full details and an option list, please visit the Yahoo!
*****************************************************************
========================= CLASS #497 =============================
(7614) {1285280} [1285306]: Finding Images with Yahoo!
(7619) {1285694} [1285720]: Finding Images with Yahoo!
*****************************************************************
========================= CLASS #498 =============================
(7615) {1285320} [1285425]: You can search for Images with Yahoo using Zend_Service_Yahoo &#39;s imageSearch() method.
(7621) {1285761} [1285866]: You can search for videos with Yahoo using Zend_Service_Yahoo &#39;s videoSearch() method.
*****************************************************************
========================= CLASS #499 =============================
(7620) {1285721} [1285747]: Finding videos with Yahoo!
(7624) {1285991} [1286017]: Finding videos with Yahoo!
*****************************************************************
========================= CLASS #500 =============================
(7625) {1286018} [1286067]: Finding Local Businesses and Services with Yahoo!
(7626) {1286081} [1286141]: You can search for local businesses and services with Yahoo!
(7630) {1286294} [1286343]: Finding Local Businesses and Services with Yahoo!
*****************************************************************
========================= CLASS #501 =============================
(7632) {1286361} [1286395]: News Searching Yahoo!
(7637) {1286608} [1286629]: News Searching Yahoo!
*****************************************************************
========================= CLASS #502 =============================
(7638) {1286630} [1286687]: Site Explorer Inbound Links Searching Yahoo!
(7641) {1286875} [1286918]: Site Explorer Inbound Links Documentation .
(7643) {1286945} [1286989]: Site Explorer Inbound Links Searching Yahoo!
*****************************************************************
========================= CLASS #503 =============================
(7659) {1289211} [1289233]: Web Search result set.
(7661) {1289444} [1289468]: Image Search result set.
(7663) {1289681} [1289705]: Video Search result set.
(7665) {1289918} [1289942]: Local Search result set.
(7668) {1290330} [1290353]: News Search result set.
(7672) {1290830} [1290857]: PageData Search result set.
*****************************************************************
========================= CLASS #504 =============================
(7679) {1291961} [1292247]: Properties Zend_Service_Yahoo_ImageResult Properties Name Type Description Summary string Result summary RefererUrl string The URL of the page which contains the image FileSize int The size of the image file in bytes FileFormat string The format of the image (bmp, gif, jpeg, png, etc.)
(7681) {1292530} [1292844]: Properties Zend_Service_Yahoo_VideoResult Properties Name Type Description Summary string Result summary RefererUrl string The URL of the page which contains the video FileSize int The size of the video file in bytes FileFormat string The format of the video (avi, flash, mpeg, msmedia, quicktime, realmedia, etc.)
*****************************************************************
========================= CLASS #505 =============================
(7782) {1313254} [1313483]: string save_path - The correct value is system dependent, and should be provided by the developer using an absolute path to a directory readable and writable by the PHP process.
(7792) {1315821} [1315981]: string name - The correct value is system dependent and should be provided by the developer using a value unique to the application.
*****************************************************************
========================= CLASS #506 =============================
(7799) {1317410} [1317771]: Error: Headers Already Sent If you see the error message, &quot;Cannot modify header information - headers already sent&quot;, or, &quot;You must call ... before any output has been sent to the browser; output started in ...&quot;, then carefully examine the immediate cause (function or method) associated with the message.
(7862) {1328806} [1329049]: If you see the error message, &quot;Cannot modify header information - headers already sent&quot;, then either avoid using true as the value for the first argument (requesting removal of the session cookie), or see .
*****************************************************************
========================= CLASS #507 =============================
(7802) {1318130} [1318368]: For example, in php.ini , &quot; Alternatively, try rearranging the application logic so that actions manipulating headers are performed prior to sending any output whatsoever.
(7806) {1318911} [1319078]: Alternatively, try rearranging the application logic so that all actions manipulating headers are performed prior to sending any output whatsoever.
*****************************************************************
========================= CLASS #508 =============================
(7854) {1327551} [1327723]: To help thwart session fixation/hijacking, use this function when a user successfully authenticates with your application (e.g., from a &quot;login&quot; form).
(7900) {1335114} [1335219]: Support exists for both anonymous and authenticated (e.g., &quot;login&quot;) session namespaces.
*****************************************************************
========================= CLASS #509 =============================
(7865) {1329371} [1329534]: Throws By default, $readonly is enabled and further actions involving writing to the session data store will throw an exception.
(7873) {1330548} [1330711]: Throws By default, $readonly is enabled and further actions involving writing to the session data store will throw an exception.
*****************************************************************
========================= CLASS #510 =============================
(7889) {1332848} [1333092]: Actually, all participation on any relevant topic is welcome :) Throws An exception will be thrown if Zend_Session is not marked as readable (e.g., before Zend_Session has been started).
(7891) {1333221} [1333380]: Throws An exception will be thrown if Zend_Session is not marked as readable (e.g., before Zend_Session has been started).
*****************************************************************
========================= CLASS #511 =============================
(7986) {1345849} [1346000]: The NTP ) is a protocol for synchronizing the clocks of computer systems over packet-switched, variable-latency data networks.
(7990) {1346174} [1346326]: The SNTP ) is a protocol for syncronising with clocks of computer systems over packet-switched, variable-latency data networks.
*****************************************************************
========================= CLASS #512 =============================
(7987) {1346001} [1346051]: NTP uses UDP port 123 as it&#39;s transport layer.
(7991) {1346327} [1346377]: SNTP uses UDP port 37 as it&#39;s transport layer.
*****************************************************************
========================= CLASS #513 =============================
(8040) {1353146} [1353204]: TBX is a XML file based format and a completly new format.
(8050) {1354404} [1354434]: QT is a XML file based format.
*****************************************************************
========================= CLASS #514 =============================
(8041) {1353221} [1353320]: XML files are human-readable, but the parsing is not as fast as with gettext files.
(8046) {1353954} [1354053]: XML files are human-readable, but the parsing is not as fast as with gettext files.
(8051) {1354451} [1354550]: XML files are human-readable, but the parsing is not as fast as with gettext files.
(8056) {1355100} [1355199]: XML files are human-readable, but the parsing is not as fast as with gettext files.
*****************************************************************
========================= CLASS #515 =============================
(8043) {1353469} [1353521]: The files are human readable and system-independent.
(8048) {1354149} [1354201]: The files are human readable and system-independent.
(8053) {1354660} [1354712]: The files are human readable and system-independent.
(8058) {1355286} [1355338]: The files are human readable and system-independent.
(8063) {1355922} [1355974]: The files are human readable and system-independent.
*****************************************************************
========================= CLASS #516 =============================
(8055) {1354950} [1355083]: XLIFF is a XML file based format, which is related to TMX but simpler as it does not support all possibilities of it.
(8061) {1355704} [1355810]: XLIFF is a XML file based format, which is related to XLIFF but its not as simple to read.
*****************************************************************
========================= CLASS #517 =============================
(8136) {1364917} [1365148]: The following structures are preferable: Single structured source Positive: All source files for every languages can be found in one directory.
(8141) {1365563} [1365728]: Application structured source Positive: All source files for every languages can be found in one directory.
*****************************************************************
========================= CLASS #518 =============================
(8137) {1365150} [1365180]: No splitting of related files.
(8142) {1365730} [1365760]: No splitting of related files.
*****************************************************************
========================= CLASS #519 =============================
(8214) {1373814} [1373882]: The getLocale() method can be used to get the actual set language.
(8223) {1374735} [1374859]: And finally the getList() method can be used to get all actual set languages for an adapter returned as array.
*****************************************************************
========================= CLASS #520 =============================
(8245) {1377943} [1378079]: Zend_Translate needs the &#39;scan&#39; option to know that it should search the names of all directories for languages.
(8256) {1379206} [1379312]: To use this way of detection you will have to set the &#39;scan&#39; option at initiation.
*****************************************************************
========================= CLASS #521 =============================
(8293) {1383648} [1383802]: If the scheme or URI passed is supported, Zend_Uri::factory() will return a subclass of itself that specializes in the scheme to be created.
(8297) {1384119} [1384246]: Otherwise, Zend_Uri::factory() will return a subclass of itself that specializes in the scheme to be manipulated.
*****************************************************************
========================= CLASS #522 =============================
(8294) {1383808} [1383926]: Manipulating an Existing URI To manipulate an existing URI, pass the entire URI to Zend_Uri::factory() .
(8295) {1383932} [1384031]: Manipulating an Existing URI with Zend_Uri::factory() The URI will be parsed and validated.
*****************************************************************
========================= CLASS #523 =============================
(8311) {1386070} [1386234]: Basic usage A basic example of usage is below: $email and on failure populate $validator-&gt;getMessages() with useful error messages.
(8341) {1389717} [1389884]: Basic usage A basic example of usage is below: $hostname and on failure populate $validator-&gt;getMessages() with useful error messages.
*****************************************************************
========================= CLASS #524 =============================
(8316) {1386770} [1386926]: By default only DNS hostnames of the form domain.com are accepted, though if you wish you can accept IP addresses and Local hostnames too.
(8340) {1389661} [1389711]: By default only DNS hostnames are matched.
*****************************************************************
========================= CLASS #525 =============================
(8323) {1387947} [1388043]: true or false to $validator-&gt;setValidateMx() to enable or disable MX validation.
(8362) {1392894} [1392963]: $validator-&gt;setValidateTld() to enable or disable TLD validation.
*****************************************************************
========================= CLASS #526 =============================
(8327) {1388436} [1388493]: This is known as International Domain Name (IDN) support.
(8349) {1391069} [1391121]: These are known as International Domain Names (IDN).
*****************************************************************
========================= CLASS #527 =============================
(8328) {1388494} [1388687]: This is enabled by default, though you can disable this by changing the setting via the internal Zend_Validate_Hostname object that exists within Zend_Validate_EmailAddress .
(8332) {1388984} [1389177]: This is enabled by default, though you can disable this by changing the setting via the internal Zend_Validate_Hostname object that exists within Zend_Validate_EmailAddress .
*****************************************************************
========================= CLASS #528 =============================
(8329) {1388698} [1388778]: setValidateIdn() appears in the Zend_Validate_Hostname documentation.
(8333) {1389188} [1389268]: setValidateTld() appears in the Zend_Validate_Hostname documentation.
*****************************************************************
========================= CLASS #529 =============================
(8330) {1388793} [1388872]: Please note IDNs are only validated if you allow DNS hostnames to be validated.
(8334) {1389283} [1389362]: Please note TLDs are only validated if you allow DNS hostnames to be validated.
(8357) {1392382} [1392461]: Please note IDNs are only validated if you allow DNS hostnames to be validated.
(8363) {1392978} [1393057]: Please note TLDs are only validated if you allow DNS hostnames to be validated.
*****************************************************************
========================= CLASS #530 =============================
(8331) {1388878} [1388983]: Validating Top Level Domains By default a hostname will be checked against a list of known TLDs.
(8358) {1392467} [1392572]: Validating Top Level Domains By default a hostname will be checked against a list of known TLDs.
*****************************************************************
========================= CLASS #531 =============================
(8352) {1391604} [1391802]: If you wish to disable IDN validation this can be done by by either passing a parameter to the Zend_Validate_Hostname constructor or via the $validator-&gt;setValidateIdn() method.
(8354) {1391960} [1392029]: $validator-&gt;setValidateIdn() to enable or disable IDN validation.
*****************************************************************
========================= CLASS #532 =============================
(8365) {1393205} [1393309]: Alnum Returns true if and only if $value contains only alphabetic and digit characters.
(8367) {1393415} [1393509]: Alpha Returns true if and only if $value contains only alphabetic characters.
(8379) {1395139} [1395229]: Digits Returns true if and only if $value only contains digit characters.
*****************************************************************
========================= CLASS #533 =============================
(8366) {1393322} [1393405]: This validator includes an option to also consider white space characters as valid.
(8368) {1393510} [1393605]: This validator includes an option to also consider white space characters as valid.
*****************************************************************
========================= CLASS #534 =============================
(8375) {1394741} [1394829]: Date Returns true if $value is a valid date of the format YYYY-MM-DD .
(8385) {1395776} [1395851]: Int Returns true if and only if $value is a valid integer.
(8386) {1395861} [1395938]: Ip Returns true if and only if $value is a valid IP address.
*****************************************************************
========================= CLASS #535 =============================
(8413) {1400067} [1400154]: If a value fails your validation tests, then isValid() should return false .
(8414) {1400155} [1400244]: If the value passes your validation tests, then isValid() should return true .
*****************************************************************
========================= CLASS #536 =============================
(8459) {1407403} [1407494]: Other tokens may be supported on a case-by-case basis in each validation class.
(8469) {1408861} [1408956]: Other properties may be supported on a case-by-case basis in each validation class.
*****************************************************************
========================= CLASS #537 =============================
(8505) {1414725} [1414972]: For example, if your controller script is at &quot;/path/to/app/controllers&quot; and it calls $view-&gt;render(&#39;someView.php&#39;), Zend_View will look for &quot;/path/to/app/controllers/someView.php&quot;.
(8508) {1415192} [1415325]: Now when you call $view-&gt;render(&#39;someView.php&#39;), it will look for &quot;/path/to/app/views/someView.php&quot;.
*****************************************************************
========================= CLASS #538 =============================
(8509) {1415348} [1415434]: In fact, you can &quot;stack&quot; paths using the addScriptPath() method.
(8734) {1453078} [1453166]: In fact, you can &quot;stack&quot; paths using the addHelperPath() method.
*****************************************************************
========================= CLASS #539 =============================
(8510) {1415435} [1415572]: As you add paths to the stack, Zend_View will look at the most-recently-added path for the requested view script.
(8735) {1453167} [1453307]: As you add paths to the stack, Zend_View will look at the most-recently-added path for the requested helper class.
*****************************************************************
========================= CLASS #540 =============================
(8519) {1417333} [1417432]: The Doctype helper is a concrete implementation of the Placeholder helper .
(8528) {1419436} [1419536]: The HeadLink helper is a concrete implementation of the Placeholder helper .
(8540) {1421661} [1421761]: The HeadMeta helper is a concrete implementation of the Placeholder helper .
(8555) {1424535} [1424637]: The HeadScript helper is a concrete implementation of the Placeholder helper .
(8579) {1429160} [1429261]: The HeadStyle helper is a concrete implementation of the Placeholder helper .
(8587) {1431061} [1431162]: The HeadTitle helper is a concrete implementation of the Placeholder helper .
*****************************************************************
========================= CLASS #541 =============================
(8520) {1417438} [1417518]: Doctype Helper Basic Usage You may specify the doctype at any time.
(8529) {1419542} [1419624]: HeadLink Helper Basic Usage You may specify a headLink at any time.
*****************************************************************
========================= CLASS #542 =============================
(8532) {1419907} [1420109]: HeadMeta Helper The HTML &lt;meta&gt; element is used to provide meta information about your HTML document -- typically keywords, document character set, caching pragmas, etc.
(8585) {1430802} [1430917]: HeadTitle Helper The HTML &lt;title&gt; element is used to provide a title for an HTML document.
*****************************************************************
========================= CLASS #543 =============================
(8537) {1421210} [1421362]: HeadMeta overrides each of append() , offsetSet() , prepend() , and set() to enforce usage of the special methods as listed above.
(8552) {1424082} [1424236]: HeadScript overrides each of append() , offsetSet() , prepend() , and set() to enforce usage of the special methods as listed above.
(8576) {1428708} [1428861]: HeadStyle overrides each of append() , offsetSet() , prepend() , and set() to enforce usage of the special methods as listed above.
*****************************************************************
========================= CLASS #544 =============================
(8538) {1421363} [1421494]: Internally, it stores each item as a stdClass token, which it later serializes using the itemToString() method.
(8553) {1424237} [1424368]: Internally, it stores each item as a stdClass token, which it later serializes using the itemToString() method.
(8577) {1428862} [1428993]: Internally, it stores each item as a stdClass token, which it later serializes using the itemToString() method.
*****************************************************************
========================= CLASS #545 =============================
(8539) {1421495} [1421646]: This allows you to perform checks on the items in the stack, and optionally modify these items by simply modifying the object returned.
(8554) {1424369} [1424520]: This allows you to perform checks on the items in the stack, and optionally modify these items by simply modifying the object returned.
(8578) {1428994} [1429145]: This allows you to perform checks on the items in the stack, and optionally modify these items by simply modifying the object returned.
*****************************************************************
========================= CLASS #546 =============================
(8543) {1421957} [1422939]: For instance, if you wish to specify SEO keywords, you&#39;d be creating a meta name tag with the name &#39;keywords&#39; and the content the keywords you wish to associate with your page: If you wishedto set some client-side caching rules, you&#39;d set http-equiv tags with the rules you wish to enforce: Another popular use for meta tags is setting the content type, character set, and language: As a final example, an easy way to display a transitional message before a redirect is using a &quot;meta refresh&quot;: When you&#39;re ready to place your meta tags in the layout, simply echo the helper: HeadScript Helper The HTML &lt;script&gt; element is used to either provide inline client-side scripting elements or link to a remote resource containing client-side scripting code.
(8591) {1431689} [1432017]: When you&#39;re finally ready to render the title in your layout script, simply echo the helper: InlineScript Helper The HTML &lt;script&gt; element is used to either provide inline client-side scripting elements or link to a remote resource containing client-side scripting code.
*****************************************************************
========================= CLASS #547 =============================
(8548) {1423579} [1423641]: The usage for this will be showed in an example below.
(8574) {1428410} [1428472]: The usage for this will be showed in an example below.
*****************************************************************
========================= CLASS #548 =============================
(8556) {1424643} [1424831]: Use InlineScript for HTML Body Scripts HeadScript &#39;s sibling helper, InlineScript , should be used when you wish to include scripts inline in the HTML body .
(8594) {1432254} [1432394]: Use InlineScript for HTML Body Scripts InlineScript , should be used when you wish to include scripts inline in the HTML body .
*****************************************************************
========================= CLASS #549 =============================
(8557) {1424832} [1425010]: Placing scripts at the end of your document is a good practice for speeding up delivery of your page, particularly when using 3rd party analytics scripts.
(8595) {1432395} [1432573]: Placing scripts at the end of your document is a good practice for speeding up delivery of your page, particularly when using 3rd party analytics scripts.
*****************************************************************
========================= CLASS #550 =============================
(8563) {1426398} [1426574]: While you could use string concatenation, heredocs, and the like, often it&#39;s easier just to do so by creating the script and sprinkling in PHP tags.
(8581) {1429937} [1430113]: While you could use string concatenation, heredocs, and the like, often it&#39;s easier just to do so by creating the styles and sprinkling in PHP tags.
*****************************************************************
========================= CLASS #551 =============================
(8564) {1426576} [1426779]: HeadScript lets you do just that, capturing it to the stack: The following assumptions are made: The script will be appended to the stack.
(8582) {1430115} [1430329]: HeadStyle lets you do just that, capturing it to the stack: The following assumptions are made: The style declarations will be appended to the stack.
*****************************************************************
========================= CLASS #552 =============================
(8567) {1427302} [1427485]: If you wish to specify any additional attributes for the &lt;script&gt; tag, pass them in an array as the third argument to captureStart() .
(8584) {1430605} [1430788]: If you wish to specify any additional attributes for the &lt;style&gt; tag, pass them in an array as the second argument to captureStart() .
*****************************************************************
========================= CLASS #553 =============================
(8630) {1437923} [1438123]: In addition, it offers a variety of methods for formatting the content stored in the container: setPrefix($prefix) sets text with which to prefix the content.
(8632) {1438229} [1438313]: setPostfix($prefix) sets text with which to append the content.
(8634) {1438420} [1438515]: setSeparator($prefix) sets text with which to separate aggregated content.
*****************************************************************
========================= CLASS #554 =============================
(8631) {1438124} [1438215]: Use getPrefix() at any time to determine what the current setting is.
(8633) {1438314} [1438406]: Use getPostfix() at any time to determine what the current setting is.
(8635) {1438516} [1438610]: Use getSeparator() at any time to determine what the current setting is.
(8638) {1438867} [1438958]: Use getIndent() at any time to determine what the current setting is.
*****************************************************************
========================= CLASS #555 =============================
(8688) {1445695} [1446008]: By default, the class is prefixed with &#39;Zend_View_Helper_&#39; (you can specify a custom prefix when setting a helper path), and the last segment of the class name is the helper name; this segment should be TitleCapped; the full class name is then: Zend_View_Helper_FooBar .
(8733) {1452960} [1453055]: By default, if no class prefix is provided, &#39;Zend_View_Helper_&#39; is assumed.
*****************************************************************
========================= CLASS #556 =============================
(8714) {1450210} [1450656]: You can specify alternate opening, closing, and separator content when rendering the errors by calling several methods on the helper: setElementStart($string) ; default is &#39;&lt;ul class=&quot;errors&quot;%s&quot;&gt;&lt;li&gt;&#39;, where %s is replaced with the attributes as specified in $options .
(8715) {1450678} [1450780]: setElementSeparator($string) ; default is &#39;&lt;/li&gt;&lt;li&gt;&#39;.
(8716) {1450802} [1450899]: setElementEnd($string) ; default is &#39;&lt;/li&gt;&lt;/ul&gt;&#39;.
*****************************************************************
========================= CLASS #557 =============================
(8742) {1454464} [1454632]: In our &quot;specialPurpose&quot; helper example, the required method declaration would be &quot;public function specialPurpose()&quot;.
(8747) {1454990} [1455137]: Again using our &quot;specialPurpose&quot; helper example, the file has to be named &quot;SpecialPurpose.php&quot;.
*****************************************************************
========================= CLASS #558 =============================
(8806) {1464597} [1464884]: XML-RPC is designed to be as simple as possible, while allowing complex data structures to be transmitted, processed and returned.&quot; The Zend Framework provides support for both consuming remote XML-RPC services and building new XML-RPC servers.
(8807) {1464890} [1465081]: Zend_XmlRpc_Client Introduction The Zend Framework provides support for consuming remote XML-RPC services as a client in the Zend_XmlRpc_Client package.
*****************************************************************
========================= CLASS #559 =============================
(8820) {1467012} [1467181]: A Zend_XmlRpc_Response object for the return value will also be available by calling the getLastResponse() method after the call.
(8852) {1473878} [1474017]: A Zend_XmlRpc_Response object containing the fault will also be available by calling getLastResponse() .
*****************************************************************
========================= CLASS #560 =============================
(8851) {1473686} [1473877]: Handling XML-RPC Faults When the call() method is used to make the request, the Zend_XmlRpc_Client_FaultException will be thrown on fault.
(8853) {1474048} [1474155]: When the doRequest() method is used to make the request, it will not throw the exception.
*****************************************************************
