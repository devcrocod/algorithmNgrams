========================= CLASS #1 =============================
(0) {0} [313]: <?xml version="1.0" encoding="utf-8" ?> <plainxml>$Date: 2001-08-02 14:27:50 +0400 (Чт, 02 авг 2001) $ $Revision: 546 $ Installation Installing the DocBook DTD DocBook DTD installation This appendix describes how to install the DocBook DTD on your system so that popular command-line tools like SP can use it.
(2) {440} [497]: This appendix describes the installation of DocBook V3.1.
(83) {12305} [12518]: $Date: 2001-08-02 14:27:50 +0400 (Чт, 02 авг 2001) $ $Revision: 546 $ DocBook and DocBook DTD XML XML DocBook and SGML XML and XML SGML, processing , the Extensible Markup Language , is a simple dialect of .
(2229) {321662} [321896]: $Date: 2001-08-02 14:27:50 +0400 (Чт, 02 авг 2001) $ $Revision: 546 $ Glossary attribute attributes elements attributes Attributes augment the element on which they appear; they also provide additional information about the element.
*****************************************************************
========================= CLASS #2 =============================
(10) {1834} [1984]: On UNIX systems it&#39;s common to put it somewhere under /usr/local or /share (for example, /usr/local/sgml/docbook or /share/sgml/docbook ).
(648) {93935} [93957]: And we don&#39;t care.
(729) {105722} [105749]: Don&#39;t do this, however.
*****************************************************************
========================= CLASS #3 =============================
(13) {2290} [2385]: (They aren&#39;t distributed with DocBook because they aren&#39;t maintained by the DocBook TC.
(14) {2386} [2417]: They&#39;re maintained by ISO.)
(106) {15578} [15602]: They&#39;re all illegal.
(935) {136823} [136866]: They&#39;re simply a method of indirection.
(1368) {198072} [198129]: That&#39;s because they aren&#39;t maintained by OASIS .
*****************************************************************
========================= CLASS #4 =============================
(19) {2861} [2941]: See http://www.oasis-open.org/cover/topics.html#entities for more information.
(460) {70189} [70224]: See http://www.gnu.org/copyleft/ .
*****************************************************************
========================= CLASS #5 =============================
(26) {3862} [3981]: Finding the Catalog If you&#39;ve already got some other SGML DTDs installed, you probably already have a catalog file.
(565) {81404} [81483]: If you&#39;re already familiar with or , you only need to skim this chapter.
(1030) {150410} [150460]: Actually, we&#39;ve already told you how to do it.
*****************************************************************
========================= CLASS #6 =============================
(36) {5735} [6327]: To continue with the example above, let&#39;s say that you&#39;ve got: DocBook in /share/sgml/docbk30/ , The ISO entities in /share/sgml/entities/8879/ , and Your catalog in /share/sgml/catalog Then you would change the catalog entry for the DTD to be: PUBLIC &quot;-//OASIS//DTD DocBook V3.1//EN&quot; &quot;docbk30/docbook.dtd&quot; You would change the catalog entry for the general technical character entities to: PUBLIC &quot;ISO 8879:1986//ENTITIES General Technical//EN&quot; &quot;entities/8879/iso-tech.gml&quot; And similarly for the other public identifiers used by DocBook.
(1294) {180930} [180960]: Let&#39;s talk about leopards.
*****************************************************************
========================= CLASS #7 =============================
(45) {7788} [7996]: Create a small test document, like this: &lt;!DOCTYPE chapter PUBLIC &quot;-//OASIS//DTD DocBook V3.1//EN&quot;&gt; &lt;chapter&gt;&lt;title&gt;Test Chapter&lt;/title&gt; &lt;para&gt; This is a test document.
(857) {123891} [123927]: So is &lt;&gt;this&lt;/emphasis&gt;.
(1034) {151636} [151810]: For example, Chapter 1 might begin like this: &lt;chapter id=&quot;ch1&quot;&gt;&lt;title&gt;My First Chapter&lt;/title&gt; &lt;para&gt;My first paragraph.&lt;/para&gt; ...
(1035) {151814} [152081]: But it should not begin with its own document type declaration: &lt;!DOCTYPE chapter PUBLIC &quot;-//OASIS//DTD DocBook V3.1//EN&quot;&gt; &lt;chapter id=&quot;ch1&quot;&gt;&lt;title&gt;My First Chapter&lt;/title&gt; &lt;para&gt;My first paragraph.&lt;/para&gt; ...
(1318) {185046} [185916]: For instance, if you have this markup in your document: &lt;glossterm linkend=&quot;xml&quot;&gt;Extensible Markup Language&lt;/glossterm&gt; is a new standard glossaries example your glossary might look like this: &lt;!DOCTYPE glossary PUBLIC &quot;-//OASIS//DTD DocBook V3.1//EN&quot;&gt; &lt;glossary&gt;&lt;title&gt;Example Glossary&lt;/title&gt; &lt;glossdiv&gt;&lt;title&gt;E&lt;/title&gt; &lt;glossentry id=&quot;xml&quot;&gt;&lt;glossterm&gt;Extensible Markup Language&lt;/glossterm&gt; &lt;acronym&gt;XML&lt;/acronym&gt; &lt;glossdef&gt; &lt;para&gt;Some reasonable definition here.&lt;/para&gt; &lt;glossseealso otherterm=&quot;sgml&quot;&gt; &lt;/glossdef&gt; &lt;/glossentry&gt; &lt;/glossdiv&gt; Note that the GlossTerm tag reappears in the glossary to mark up the term and distinguish it from its definition within the GlossEntry .
(1653) {241582} [241846]: Consider the following book: &lt;book&gt;&lt;title&gt;A Test Book&lt;/title&gt; &lt;preface&gt; &lt;para&gt;There are three chapters in this book: &lt;xref linkend=&quot;c1&quot;&gt;, &lt;xref linkend=&quot;c2&quot;&gt;, and &lt;xref linkend=&quot;c3&quot;&gt;.
(1761) {258072} [258136]: Take the DocBook &lt;para&gt; paragraph element as an example.
*****************************************************************
========================= CLASS #8 =============================
(46) {7997} [8228]: &lt;/para&gt; &lt;/chapter&gt; and run the following command: nsgmls -sv test.sgm declarations passing explicitly DTDDECL warnings (unsupported) If the nsgmls command produces errors, review your catalog and resolve the errors.
(858) {123928} [123988]: &lt;/para&gt; Both important and this are emphasized.
*****************************************************************
========================= CLASS #9 =============================
(80) {11949} [12040]: If not, and the preceding test succeeded, something has gone wrong contact the maintainer .
(82) {12213} [12304]: If not, and the preceding test succeeded, something has gone wrong contact the maintainer .
*****************************************************************
========================= CLASS #10 =============================
(89) {13080} [13228]: If your goal is to author DocBook documents with one of this new generation of tools, you will only be able to achieve validity with an DocBook .
(878) {127262} [127311]: Realistically, DocBook documents will have one.
*****************************************************************
========================= CLASS #11 =============================
(102) {15082} [15296]: Minimization markup minimization SGML/XML conversion problems minimization markup SGML/XML conversion problems If you have used minimization features in your instances: they will not be well-formed instances.
(859) {123990} [124172]: markup minimization SGML/XML conversion problems minimization markup SGML/XML conversion problems If you are interested in future compatibility, don&#39;t use any of these tricks.
*****************************************************************
========================= CLASS #12 =============================
(128) {18808} [19175]: Para element PARA vs. (XML) The result will be something like this: No #CONREF Attributes #CONREF attributes Startref attribute IndexTerm element OtherTerm attribute GlossSee element GlossSeeAlso element empty tags #CONREF attributes The StartRef attribute on indexterm and the OtherTerm attribute on GlossSee and GlossSeeAlso are #CONREF attributes.
(164) {25092} [25124]: No #CONREF attributes allowed.
*****************************************************************
========================= CLASS #13 =============================
(140) {20877} [21000]: The result will be something like this: No Data Attributes on Notations They&#39;re not allowed in , so don&#39;t add any.
(759) {109546} [109586]: In , they&#39;re only allowed in the .
(981) {142965} [143017]: In , there&#39;s no constraint on what they can be.
*****************************************************************
========================= CLASS #14 =============================
(147) {22351} [22509]: There&#39;s one downside: DocBook uses %admon.class; in a name group to define the content model, and attribute lists for elements in the admonitions class.
(842) {121532} [121584]: There&#39;s no difference between Para and pArA .
*****************************************************************
========================= CLASS #15 =============================
(169) {25601} [25940]: $Date: 2009-01-05 12:25:13 +0300 (Пн, 05 янв 2009) $ $Revision: 8201 $ DocBook Versions DocBook DTD versions versions DocBook DTD OASIS DocBook Technical Committee DocBook Technical Committee (OASIS) TC DocBook Technical Committee (OASIS) The OASIS DocBook Technical Committee ( TC ) is committed to the continued evolution of DocBook.
(1965) {283191} [283429]: $Date: 2009-01-05 12:25:13 +0300 (Пн, 05 янв 2009) $ $Revision: 8201 $ Customizing DocBook customizing DocBook DTD DocBook DTD customizing For the applications you have in mind, DocBook out of the box may not be exactly what you need.
*****************************************************************
========================= CLASS #16 =============================
(236) {36578} [36705]: References and Technical Notes on the Web Entity Management OASIS Technical Resolution 9401:1997 (Amendment 2 to TR 9401) .
(938) {137100} [137170]: See OASIS Technical Resolution 9401:1997 (Amendment 2 to TR 9401).
*****************************************************************
========================= CLASS #17 =============================
(240) {36909} [36999]: Exchange Table Model Document Type Definition OASIS Technical Resolution TR 9503:1995 .
(241) {37001} [37172]: Table Model Document Type Definition OASIS Technical Memorandum TM 9502:1995 XML Exchange Table Model Document Type Definition OASIS Technical Memorandum TM 9901:1999 .
*****************************************************************
========================= CLASS #18 =============================
(248) {37637} [37712]: The Specification The W3C technical recommendation that defines 1.0.
(249) {37713} [37789]: Namespaces in The W3C technical recommendation that defines namespaces.
*****************************************************************
========================= CLASS #19 =============================
(264) {39841} [39938]: $Date: 2003-06-04 16:22:51 +0400 (Ср, 04 июн 2003) $ $Revision: 2902 $ What&#39;s on the CD-ROM ?
(534) {77472} [77495]: What&#39;s on the CD ?
*****************************************************************
========================= CLASS #20 =============================
(268) {40284} [40362]: DocBook: The Definitive Guide /sgml/ contains the sources for this book in .
(2225) {321406} [321471]: Mark Nigara was the copyeditor for DocBook: The Definitive Guide.
*****************************************************************
========================= CLASS #21 =============================
(396) {57536} [57757]: For works in formats which do not have any title page as such, &quot;Title Page&quot; means the text near the most prominent appearance of the work&#39;s title, preceding the beginning of the body of the text.
(1119) {163575} [163616]: Informal equations don&#39;t have titles.
*****************************************************************
========================= CLASS #22 =============================
(421) {62447} [62665]: Preserve the section entitled &quot;History&quot;, and its title, and add to it an item stating at least the title, year, new authors, and publisher of the Modified Version as given on the Title Page.
(424) {63187} [63242]: These may be placed in the &quot;History&quot; section.
(429) {63917} [63976]: Delete any section entitled &quot;Endorsements&quot;.
(444) {66698} [66993]: In the combination, you must combine any sections entitled &quot;History&quot; in the various original documents, forming one section entitled &quot;History&quot;; likewise combine any sections entitled &quot;Acknowledgements&quot;, and any sections entitled &quot;Dedications&quot;.
*****************************************************************
========================= CLASS #23 =============================
(449) {68363} [68648]: If the Cover Text requirement of section 3 is applicable to these copies of the Document, then if the Document is less than one quarter of the entire aggregate, the Document&#39;s Cover Texts may be placed on covers that surround only the Document within the aggregate.
(567) {81614} [81638]: That&#39;s covered here.
(569) {81725} [81764]: That&#39;s covered in the next chapter.
(1490) {218459} [218527]: In this introduction, we&#39;ll cover only a few of the most common.
*****************************************************************
========================= CLASS #24 =============================
(465) {71074} [71432]: Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.1 or any later version published by the Free Software Foundation; with the Invariant Sections being LIST THEIR TITLES, with the Front-Cover Texts being LIST, and with the Back-Cover Texts being LIST.
(2301) {333244} [333444]: Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.1 or any later version published by the Free Software Foundation.
*****************************************************************
========================= CLASS #25 =============================
(466) {71439} [71546]: A copy of the license is included in the section entitled &quot;GNU Free Documentation License&quot;.
(2302) {333445} [333484]: A copy of the license is included in .
*****************************************************************
========================= CLASS #26 =============================
(472) {72344} [72396]: That&#39;s the difference between 2.0.13 and 2.0.14.
(475) {72616} [72668]: That&#39;s the difference between 2.0.11 and 2.0.12.
*****************************************************************
========================= CLASS #27 =============================
(473) {72397} [72502]: This change log is slightly abbreviated; there were hundreds of uninteresting changes to generated files.
(476) {72669} [72774]: This change log is slightly abbreviated; there were hundreds of uninteresting changes to generated files.
*****************************************************************
========================= CLASS #28 =============================
(494) {74474} [74567]: After you&#39;ve written a document, how can you tell if it really conforms to the DocBook ?
(496) {74602} [74655]: After you&#39;ve written one, what do you do with it?
*****************************************************************
========================= CLASS #29 =============================
(495) {74568} [74601]: How to publish DocBook documents.
(522) {76670} [76703]: How to publish DocBook documents.
*****************************************************************
========================= CLASS #30 =============================
(527) {77085} [77127]: A reference guide to the DocBook elements.
(528) {77128} [77180]: A reference guide to the DocBook parameter entities.
*****************************************************************
========================= CLASS #31 =============================
(548) {78815} [78916]: You can get the most up-to-date information about this book from the web site: http://docbook.org/ .
(2089) {301128} [301224]: The alternate version is on the CD-ROM and online at the book web site: http://docbook.org/ .
*****************************************************************
========================= CLASS #32 =============================
(560) {80298} [80337]: It&#39;s a better book because of them.
(1682) {246402} [246443]: It&#39;s easy to envision how this works.
*****************************************************************
========================= CLASS #33 =============================
(577) {82559} [82657]: , on the other hand, is an international standard that describes how markup languages are defined.
(579) {82728} [82776]: is an example of a markup language defined in .
*****************************************************************
========================= CLASS #34 =============================
(588) {83903} [83973]: For our purposes, it doesn&#39;t really matter whether you use or .
(1386) {202515} [202558]: In fact, they&#39;re really the same error.
*****************************************************************
========================= CLASS #35 =============================
(590) {84081} [84184]: Nevertheless, it&#39;s not unreasonable to do your authoring in and your online publishing in or .
(591) {84185} [84256]: By the same token, it&#39;s not unreasonable to do your authoring in .
*****************************************************************
========================= CLASS #36 =============================
(607) {87089} [87397]: In DocBook, a top-level section is sect1 , so the title of a top-level section named My First-Level Header would be identified like this: &lt;sect1&gt;&lt;title&gt;My First-Level Header&lt;/title&gt; Note the following features of this markup: Clarity A title begins with title and ends with title .
(632) {90789} [91444]: This is valid: &lt;sect1&gt;&lt;title&gt;...&lt;/title&gt; &lt;sect2&gt;&lt;title&gt;...&lt;/title&gt; &lt;sect3&gt;&lt;title&gt;...&lt;/title&gt; ... &lt;/sect3&gt; &lt;/sect2&gt; &lt;/sect1&gt; This is not: &lt;sect1&gt;&lt;title&gt;...&lt;/title&gt; &lt;sect3&gt;&lt;title&gt;...&lt;/title&gt; ... &lt;/sect3&gt; &lt;/sect1&gt; parsers validating validation SGML documents DTDs validating SGML documents against instance (DocBook document) Because an / document has an associated that describes the valid, logical structures of the document, you can test the logical structure of any particular document against the .
*****************************************************************
========================= CLASS #37 =============================
(725) {105262} [105363]: In , it is possible to change the markup start characters, but we won&#39;t consider that case here.
(726) {105364} [105438]: If you change the markup start characters, you know what you&#39;re doing.
*****************************************************************
========================= CLASS #38 =============================
(819) {116849} [116910]: The following sections describe the features of the prologue.
(872) {126298} [126361]: The following sections describe the features of the prologue.
*****************************************************************
========================= CLASS #39 =============================
(831) {119127} [119695]: An Internal Subset internal subset SGML document declarations It&#39;s also possible to provide additional declarations in a document by placing them in the document type declaration: &lt;!DOCTYPE book PUBLIC &quot;-//OASIS//DTD DocBook V3.1//EN&quot; [ &lt;!ENTITY nwalsh &quot;Norman Walsh&quot;&gt; &lt;!ENTITY chap1 SYSTEM &quot;chap1.sgm&quot;&gt; &lt;!ENTITY chap2 SYSTEM &quot;chap2.sgm&quot;&gt; ]&gt; external subset SGML document declarations public identifiers SGML system identifiers SGML These declarations form what is known as the internal subset .
(836) {120237} [120856]: The Document (or Root) Element elements root element root element placement Although comments and processing instructions may occur between the document type declaration and the root element, the root element usually immediately follows the document type declaration: &lt;!DOCTYPE book PUBLIC &quot;-//OASIS//DTD DocBook V3.1//EN&quot; [ &lt;!ENTITY nwalsh &quot;Norman Walsh&quot;&gt; &lt;!ENTITY chap1 SYSTEM &quot;chap1.sgm&quot;&gt; &lt;!ENTITY chap2 SYSTEM &quot;chap2.sgm&quot;&gt; ]&gt; &lt;book&gt; &amp;chap1; &amp;chap2; &lt;/book&gt; You cannot place the root element of the document in an external entity.
(884) {128397} [129137]: An Internal Subset declarations document type declaration XML document type declaration internal subset internal subset XML document type declarations XML document type declarations internal subset It&#39;s also possible to provide additional declarations in a document by placing them in the document type declaration: &lt;?xml version=&#39;1.0&#39;?&gt; &lt;!DOCTYPE book PUBLIC &quot;-//Norman Walsh//DTD DocBk XML V3.1.4/EN&quot; &quot;http://nwalsh.com/docbook/xml/3.1.4/db3xml.dtd&quot; [ &lt;!ENTITY nwalsh &quot;Norman Walsh&quot;&gt; &lt;!ENTITY chap1 SYSTEM &quot;chap1.sgm&quot;&gt; &lt;!ENTITY chap2 SYSTEM &quot;chap2.sgm&quot;&gt; ]&gt; These declarations form what is known as the internal subset.
(889) {129710} [130475]: The Document (or Root) Element root element elements root element Although comments and processing instructions may occur between the document type declaration and the root element, the root element usually immediately follows the document type declaration: &lt;?xml version=&#39;1.0&#39;?&gt; &lt;!DOCTYPE book PUBLIC &quot;-//Norman Walsh//DTD DocBk XML V3.1.4//EN&quot; &quot;http://nwalsh.com/docbook/xml/3.1.4/db3xml.dtd&quot; [ &lt;!ENTITY nwalsh &quot;Norman Walsh&quot;&gt; &lt;!ENTITY chap1 SYSTEM &quot;chap1.sgm&quot;&gt; &lt;!ENTITY chap2 SYSTEM &quot;chap2.sgm&quot;&gt; ]&gt; &lt;book&gt;...&lt;/book&gt; The important point is that the root element must be physically present immediately after the document type declaration.
(890) {130476} [130548]: You cannot place the root element of the document in an external entity.
(1032) {150788} [151557]: So, if you&#39;ve got a book that consists of three chapters and two appendixes, you might create a file called book.sgm , which looks like this: &lt;!DOCTYPE book PUBLIC &quot;-//OASIS//DTD DocBook V3.1//EN&quot; [ &lt;!ENTITY chap1 SYSTEM &quot;chap1.sgm&quot;&gt; &lt;!ENTITY chap2 SYSTEM &quot;chap2.sgm&quot;&gt; &lt;!ENTITY chap3 SYSTEM &quot;chap3.sgm&quot;&gt; &lt;!ENTITY appa SYSTEM &quot;appa.sgm&quot;&gt; &lt;!ENTITY appb SYSTEM &quot;appb.sgm&quot;&gt; ]&gt; &lt;book&gt;&lt;title&gt;My First Book&lt;/title&gt; &amp;chap1; &amp;chap2; &amp;chap3; &amp;appa; &amp;appb; &lt;/book&gt; declarations document type declaration document type declaration divisions of documents You can then write the chapters and appendixes conveniently in separate files.
(1407) {206424} [207307]: What I mean by that is that an parser reads a stream of bytes: &quot;&lt;&quot; &quot;?&quot; &quot;x&quot; &quot;m&quot; &quot;l&quot; &quot; &quot; &quot;v&quot; &quot;e&quot; ... &quot;&lt;&quot; &quot;!&quot; &quot;D&quot; &quot;O&quot; &quot;C&quot; &quot;T&quot; &quot;Y&quot; &quot;P&quot; &quot;E&quot; &quot; &quot; &quot;b&quot; &quot;o&quot; &quot;o&quot; &quot;k&quot; ... &quot;&lt;&quot; &quot;b&quot; &quot;o&quot; &quot;o&quot; &quot;k&quot; &quot; &quot; &quot;i&quot; &quot;d&quot; &quot;=&quot; &quot;&#39;&quot; &quot;f&quot; &quot;o&quot; &quot;o&quot; &quot;&#39;&quot; &quot;&gt;&quot; ... &quot;&lt;&quot; &quot;/&quot; &quot;b&quot; &quot;o&quot; &quot;o&quot; &quot;k&quot; &quot;&gt;&quot; interprets them as a stream of characters (which may change the interpretation of some sequences of bytes) and constructs some representation of the document.
(2004) {288761} [288902]: Given this fragment: &lt;!ENTITY foo &quot;Lenny&quot;&gt; &lt;!ENTITY foo &quot;Norm&quot;&gt; The replacement text for foo is Lenny.
*****************************************************************
========================= CLASS #40 =============================
(832) {119696} [119871]: The declarations stored in the file referenced by the public or system identifier in the DOCTYPE declaration is called the external subset and it is technically optional.
(885) {129138} [129310]: The declarations stored in the file referenced by the public or system identifier in the DOCTYPE declaration is called the external subset, which is technically optional.
*****************************************************************
========================= CLASS #41 =============================
(833) {119872} [120018]: It is legal to put the in the internal subset and to have no external subset, but for a as large as DocBook that wouldn&#39;t make much sense.
(886) {129312} [129459]: It is legal to put the in the internal subset and to have no external subset, but for a as large as DocBook, that would make very little sense.
*****************************************************************
========================= CLASS #42 =============================
(834) {120020} [120154]: parsing order The internal subset is parsed first and, if multiple declarations for an entity occur, the first declaration is used.
(887) {129461} [129627]: parsing order XML document declarations The internal subset is parsed first in and, if multiple declarations for an entity occur, the first declaration is used.
*****************************************************************
========================= CLASS #43 =============================
(835) {120155} [120236]: Declarations in the internal subset override declarations in the external subset.
(888) {129628} [129709]: Declarations in the internal subset override declarations in the external subset.
*****************************************************************
========================= CLASS #44 =============================
(837) {120857} [121083]: Typing an Document Emacs text editor vi text editor SGML text editors, entering through text editors SGML, entering If you are entering using a text editor such as Emacs or vi , there are a few things to keep in mind.
(891) {130549} [130691]: Typing an Document text editors If you are entering using a text editor such as Emacs or vi , there are a few things to keep in mind.
*****************************************************************
========================= CLASS #45 =============================
(840) {121246} [121319]: Using a structured text editor designed for hides most of these issues.
(892) {130692} [130765]: Using a structured text editor designed for hides most of these issues.
*****************************************************************
========================= CLASS #46 =============================
(846) {122295} [122420]: You are not required to quote attribute values if they consist of a single word or number, although it is not wrong to do so.
(895) {131025} [131077]: You are required to quote all attribute values in .
*****************************************************************
========================= CLASS #47 =============================
(847) {122422} [122658]: straight single quotes (attribute values) straight double quotes (attribute values) curly quotes (attribute values) When quoting attribute values, you can use either a straight single quote (&#39;), or a straight double quote (&quot;).
(896) {131079} [131224]: quotes attribute values When quoting attribute values, you can use either a straight single quote (&#39;), or a straight double quote (&quot;).
*****************************************************************
========================= CLASS #48 =============================
(848) {122660} [122724]: Don&#39;t use the curly quotes ( and ) in your editing tool.
(897) {131226} [131290]: Don&#39;t use the curly quotes ( and ) in your editing tool.
*****************************************************************
========================= CLASS #49 =============================
(852) {123177} [123305]: For example: &lt;para&gt; This is &lt;emphasis&gt;important&lt;/&gt;: never stick the tines of a fork in an electrical outlet.
(856) {123723} [123889]: For the record, if you encounter an empty start tag, the parser uses the element that ended last: &lt;para&gt; This is &lt;emphasis&gt;important&lt;/emphasis&gt;.
(860) {124175} [124355]: The null end tag (net) minimization feature allows constructions like this: &lt;para&gt; This is &lt;emphasis/important/: never stick the tines of a fork in an electrical outlet.
(1444) {212819} [212898]: &lt;emphasis&gt;Emphasized&lt;/emphasis&gt; words should be printed in italics.
*****************************************************************
========================= CLASS #50 =============================
(899) {131399} [131420]: XML question marks (?
(914) {133477} [133494]: question marks (?
*****************************************************************
========================= CLASS #51 =============================
(900) {131420} [131538]: ), processing instructions Processing instructions in begin and end with a question mark: &lt;?pitarget data?&gt; .
(915) {133494} [133686]: ), processing instructions (XML) processing instructions XML documents XML processing instructions Processing instructions in begin and end with a question mark: &lt;?pitarget data?&gt; .
*****************************************************************
========================= CLASS #52 =============================
(912) {133213} [133363]: empty elements start tags, XML vs. SGML start tags empty element Empty element start tags in are marked with a distinctive syntax: &lt;xref/&gt; .
(2240) {323235} [323292]: Empty elements have only a start tag and have no content.
*****************************************************************
========================= CLASS #53 =============================
(913) {133365} [133475]: In , the trailing slash is not present, so some of our examples need slight revisions to be valid elements.
(916) {133688} [133806]: In , the trailing question mark is not present, so some of our examples need slight revisions to be valid elements.
*****************************************************************
========================= CLASS #54 =============================
(917) {133808} [134159]: system identifiers XML URI requirement Uniform Resource Indicators URI public identifiers DocBook DTD examples Generally we use public identifiers in examples, but whenever system identifiers are used, don&#39;t forget that system identifiers must be Uniform Resource Indicators ( URI s), in which system identifiers are usually simple filenames.
(926) {135408} [135470]: In , it must point with a Uniform Resource Indicator ( URI ).
*****************************************************************
========================= CLASS #55 =============================
(980) {142566} [142964]: FPI ISO Latin 1 character set, examples For example, the FPI for the ISO Latin 1 character set is: -//ISO 8879-1986//ENTITIES Added Latin 1//EN A reasonable FPI for an version of this character set is: -//ISO 8879-1986//ENTITIES Added Latin 1//EN//XML System Identifiers system identifiers URI XML system identifiers System identifiers are usually filenames on the local system.
(2279) {330159} [330198]: Usually a filename on the local system.
*****************************************************************
========================= CLASS #56 =============================
(993) {144263} [144911]: PUBLIC PUBLIC keyword The PUBLIC keyword maps public identifiers to system identifiers: PUBLIC &quot;-//OASIS//DTD DocBook V3.1//EN&quot; &quot;docbook/3.1/docbook.dtd&quot; SYSTEM SYSTEM keyword The SYSTEM keyword maps system identifiers to system identifiers: SYSTEM &quot;http://nwalsh.com/docbook/xml/1.3/db3xml.dtd&quot; &quot;docbook/xml/1.3/db3xml.dtd&quot; SGMLDECL SGMLDECL keyword The SGMLDECL keyword identifies the system identifier of the Declaration that should be used: SGMLDECL &quot;docbook/3.1/docbook.dcl&quot; DTDDECL DTDDECL Like SGMLDECL , DTDDECL identifies the Declaration that should be used.
(994) {144913} [145153]: DTDDECL associates a declaration with a particular public identifier for a : DTDDECL &quot;-//OASIS//DTD DocBook V3.1//EN&quot; &quot;docbook/3.1/docbook.dcl&quot; Unfortunately, it is not supported by the free tools that are available.
*****************************************************************
========================= CLASS #57 =============================
(1061) {155802} [155927]: Section element Section element The Section element, introduced in DocBook V3.1, is an alternative to numbered sections.
(1115) {162942} [163004]: The InformalFigure element was introduced in DocBook V3.1 .
*****************************************************************
========================= CLASS #58 =============================
(1064) {156123} [156242]: It is a terminal section that can occur at any level, but it cannot have any other sectioning element nested within it.
(1069) {156807} [156851]: Unlike sections, these elements do not nest.
*****************************************************************
========================= CLASS #59 =============================
(1081) {158662} [158889]: fonts changes (inline elements) characters inline elements cross references filenames commands options subscripts and superscripts glossaries glossary terms Inline elements are generally represented without any obvious breaks.
(1084) {159140} [159285]: Inline elements are used to mark up data such as cross references, filenames, commands, options, subscripts and superscripts, and glossary terms.
(1137) {165969} [166018]: Inline elements are used to mark up running text.
*****************************************************************
========================= CLASS #60 =============================
(1216) {170662} [170684]: Symbol element Token .
(1242) {171658} [171680]: Symbol element Token .
*****************************************************************
========================= CLASS #61 =============================
(1217) {170685} [170705]: Token element Type .
(1243) {171681} [171701]: Token element Type .
*****************************************************************
========================= CLASS #62 =============================
(1285) {179494} [179756]: You put a singular index marker where the subject it refers to actually occurs in your text: &lt;para&gt; The tiger&lt;indexterm&gt; &lt;primary&gt;Big Cats&lt;/primary&gt; &lt;secondary&gt;Tigers&lt;/secondary&gt;&lt;/indexterm&gt; is a very large cat indeed.
(1293) {180495} [180929]: Here&#39;s the previous tiger example recast as starting and ending index terms: &lt;para&gt; The tiger&lt;indexterm id=&quot;tiger-desc&quot; class=&quot;startofrange&quot;&gt; &lt;primary&gt;Big Cats&lt;/primary&gt; &lt;secondary&gt;Tigers&lt;/secondary&gt;&lt;/indexterm&gt; is a very large cat indeed &lt;/para&gt; &lt;para&gt; So much for tigers&lt;indexterm startref=&quot;tiger-desc&quot; class=&quot;endofrange&quot;&gt;.
(1303) {182093} [182520]: You can put the following tag anywhere in your document to index that range of text: &lt;indexterm zone=&quot;tiger-desc&quot;&gt; &lt;primary&gt;Big Cats&lt;/primary&gt; &lt;secondary&gt;Tigers&lt;/secondary&gt;&lt;/indexterm&gt; see and see also index entries DocBook also contains markup for index hits that point to other index hits (of the same type such as &quot;See Cats, big&quot; or &quot;See also Lions&quot;).
*****************************************************************
========================= CLASS #63 =============================
(1322) {186418} [187900]: Here&#39;s an example of a raw bibliographical item, wrapped in the Biblioentry element: &lt;biblioentry xreflabel=&quot;Kites75&quot;&gt; &lt;authorgroup&gt; &lt;author&gt;&lt;firstname&gt;Andrea&lt;/firstname&gt;&lt;surname&gt;Bahadur&lt;/surname&gt;&lt;/author&gt; &lt;author&gt;&lt;firstname&gt;Mark&lt;/&gt;&lt;surname&gt;Shwarek&lt;/&gt;&lt;/author&gt; &lt;/authorgroup&gt; &lt;copyright&gt;&lt;year&gt;1974&lt;/year&gt;&lt;year&gt;1975&lt;/year&gt; &lt;holder&gt;Product Development International Holding N. V.&lt;/holder&gt; &lt;/copyright&gt; &lt;isbn&gt;0-88459-021-6&lt;/isbn&gt; &lt;publisher&gt; &lt;publishername&gt;Plenary Publications International, Inc.&lt;/publishername&gt; &lt;/publisher&gt; &lt;title&gt;Kites&lt;/title&gt; &lt;subtitle&gt;Ancient Craft to Modern Sport&lt;/subtitle&gt; &lt;pagenums&gt;988-999&lt;/pagenums&gt; &lt;seriesinfo&gt; &lt;title&gt;The Family Creative Workshop&lt;/title&gt; &lt;seriesvolnums&gt;1-22&lt;/seriesvolnums&gt; &lt;editor&gt; &lt;firstname&gt;Allen&lt;/firstname&gt; &lt;othername role=middle&gt;Davenport&lt;/othername&gt; &lt;surname&gt;Bragdon&lt;/surname&gt; &lt;contrib&gt;Editor in Chief&lt;/contrib&gt; &lt;/editor&gt; &lt;/seriesinfo&gt; &lt;/biblioentry&gt; The raw data in a Biblioentry is comprehensive to a fault there are enough fields to suit a host of different bibliographical styles, and that is the point.
(1325) {188299} [188500]: It even includes punctuation between the fields of data: &lt;bibliomixed&gt; &lt;bibliomset relation=article&gt; &lt;surname&gt;Walsh&lt;/surname&gt;, &lt;firstname&gt;Norman&lt;/firstname&gt;.
(1327) {188587} [188779]: &lt;/bibliomset&gt; &lt;bibliomset relation=journal&gt; &lt;title&gt;The World Wide Web Journal&lt;/title&gt; &lt;volumenum&gt;2&lt;/volumenum&gt;&lt;issuenum&gt;1&lt;/issuenum&gt;.
(1328) {188784} [188934]: &lt;publishername&gt;O&#39;Reilly &amp; Associates, Inc.&lt;/publishername&gt; and &lt;corpname&gt;The World Wide Web Consortium&lt;/corpname&gt;.
(1329) {188939} [189002]: &lt;pubdate&gt;Winter, 1996&lt;/pubdate&gt;&lt;/bibliomset&gt;.
*****************************************************************
========================= CLASS #64 =============================
(1367) {196196} [198070]: In this case, there&#39;s nothing wrong with the document, but the catalog that&#39;s been specified is missing the public identifiers for the ISO entity sets: [n:\dbtdg]nsgmls -sv -c examples\errs\cat2 examples\simple.sgm m:\jade\nsgmls.exe:I: SP version &quot;1.3.2&quot; m:\jade\nsgmls.exe:n:/share/sgml/docbook/3.1/dbcent.mod:53:65:W: cannot generate system identifier for public text &quot;ISO 8879:1986//ENTITIES Added Math Symbols:Arrow Relations//EN&quot; m:\jade\nsgmls.exe:n:/share/sgml/docbook/3.1/dbcent.mod:54:8:E: reference to entity &quot;ISOamsa&quot; for which no system identifier could be generated m:\jade\nsgmls.exe:n:/share/sgml/docbook/3.1/dbcent.mod:52:0: entity was defined here m:\jade\nsgmls.exe:n:/share/sgml/docbook/3.1/dbcent.mod:60:66:W: cannot generate system identifier for public text &quot;ISO 8879:1986//ENTITIES Added Math Symbols:Binary Operators//EN&quot; m:\jade\nsgmls.exe:n:/share/sgml/docbook/3.1/dbcent.mod:61:8:E: reference to entity &quot;ISOamsb&quot; for which no system identifier could be generated m:\jade\nsgmls.exe:n:/share/sgml/docbook/3.1/dbcent.mod:59:0: entity was defined here m:\jade\nsgmls.exe:n:/share/sgml/docbook/3.1/dbcent.mod:67:60:W: cannot generate system identifier for public text &quot;ISO 8879:1986//ENTITIES Added Math Symbols:Delimiters//EN&quot; m:\jade\nsgmls.exe:n:/share/sgml/docbook/3.1/dbcent.mod:68:8:E: reference to entity &quot;ISOamsc&quot; for which no system identifier could be generated m:\jade\nsgmls.exe:n:/share/sgml/docbook/3.1/dbcent.mod:66:0: entity was defined here m:\jade\nsgmls.exe:n:/share/sgml/docbook/3.1/dbcent.mod:74:67:W: cannot generate system identifier for public text &quot;ISO 8879:1986//ENTITIES Added Math Symbols:Negated Relations//EN&quot; ... entity sets locating The ISO entity sets are required by the DocBook , but they are not distributed with it.
(1371) {198515} [198832]: [n:\dbtdg] nsgmls -sv -c \share\sgml\catalog examples\errs\badpcdata.sgm m:\jade\nsgmls.exe:I: SP version &quot;1.3.2&quot; m:\jade\nsgmls.exe:examples\errs\badpcdata.sgm:9:0:E: character data is not allowed here Chapter element errors, character data Chapter s aren&#39;t allowed to contain character data directly.
(1390) {203560} [203885]: [n:\dbtdg]nsgmls -sv -c \share\sgml\catalog examples\errs\badent.sgm m:\jade\nsgmls.exe:I: SP version &quot;1.3.2&quot; m:\jade\nsgmls.exe:examples\errs\badent.sgm:10:26:E: general entity &quot;xyzzy&quot; not defined and no default entity More often than not, you&#39;ll see this when you misspell a character entity name.
*****************************************************************
========================= CLASS #65 =============================
(1377) {199835} [201000]: [n:\dbtdg]nsgmls -sv -c \share\sgml\catalog examples\errs\misspell2.sgm m:\jade\nsgmls.exe:I: SP version &quot;1.3.2&quot; m:\jade\nsgmls.exe:examples\errs\misspell2.sgm:2:35:E: end tag for element &quot;TITEL&quot; which is not open m:\jade\nsgmls.exe:examples\errs\misspell2.sgm:3:5:E: document type does not allow element &quot;PARA&quot; here; missing one of &quot;FOOTNOTE&quot;, &quot;MSGTEXT&quot; start-tag m:\jade\nsgmls.exe:examples\errs\misspell2.sgm:9:5:E: document type does not allow element &quot;PARA&quot; here; missing one of &quot;FOOTNOTE&quot;, &quot;MSGTEXT&quot; start-tag m:\jade\nsgmls.exe:examples\errs\misspell2.sgm:15:5:E: document type does not allow element &quot;PARA&quot; here; missing one of &quot;FOOTNOTE&quot;, &quot;MSGTEXT&quot; start-tag m:\jade\nsgmls.exe:examples\errs\misspell2.sgm:21:9:E: end tag for &quot;TITLE&quot; omitted, but OMITTAG NO was specified m:\jade\nsgmls.exe:examples\errs\misspell2.sgm:2:9: start tag was here m:\jade\nsgmls.exe:examples\errs\misspell2.sgm:21:9:E: end tag for &quot;CHAPTER&quot; which is not finished These are pretty easy to spot as well, but look at how confused the parser became.
(1382) {201532} [202233]: [n:\dbtdg]nsgmls -sv -c \share\sgml\catalog examples\errs\badstarttag.sgm m:\jade\nsgmls.exe:I: SP version &quot;1.3.2&quot; m:\jade\nsgmls.exe:examples\errs\badstarttag.sgm:9:12:E: document type does not allow element &quot;TITLE&quot; here; missing one of &quot;CALLOUTLIST&quot;, &quot;SEGMENTEDLIST&quot;, &quot;VARIABLELIST&quot;, &quot;CAUTION&quot;, &quot;IMPORTANT&quot;, &quot;NOTE&quot;, &quot;TIP&quot;, &quot;WARNING&quot;, &quot;BLOCKQUOTE&quot;, &quot;EQUATION&quot;, &quot;EXAMPLE&quot;, &quot;FIGURE&quot;, &quot;TABLE&quot; start-tag titles formal elements errors paragraphs titles In this example, we probably wanted a FormalPara , so that we could have a title on the paragraph.
(1388) {202707} [203446]: [n:\dbtdg]nsgmls -sv -c \share\sgml\catalog examples\errs\noendtag.sgm m:\jade\nsgmls.exe:I: SP version &quot;1.3.2&quot; m:\jade\nsgmls.exe:examples\errs\noendtag.sgm:14:5:E: document type does not allow element &quot;PARA&quot; here; missing one of &quot;FOOTNOTE&quot;, &quot;MSGTEXT&quot;, &quot;CAUTION&quot;, &quot;IMPORTANT&quot;, &quot;NOTE&quot;, &quot;TIP&quot;, &quot;WARNING&quot;, &quot;BLOCKQUOTE&quot;, &quot;INFORMALEXAMPLE&quot; start-tag m:\jade\nsgmls.exe:examples\errs\noendtag.sgm:20:9:E: end tag for &quot;PARA&quot; omitted, but OMITTAG NO was specified m:\jade\nsgmls.exe:examples\errs\noendtag.sgm:9:0: start tag was here In this case, the parser figured out that the best thing it could do is end the paragraph.
*****************************************************************
========================= CLASS #66 =============================
(1436) {211715} [212023]: DSSSL DSSSL Document Style Semantics and Specification Language DSSSL ISO standards DSSSL International Organization for Standardization ISO Entity Sets; ISO standards Next, the International Organization for Standardization ( ISO ) created DSSSL , the Document Style Semantics and Specification Language.
(1460) {214770} [214847]: The acronym stands for Document Style Semantics and Specification Language .
*****************************************************************
========================= CLASS #67 =============================
(1533) {224239} [224333]: (attribute-string &quot; attr &quot; nd ) Returns the value of the attr attribute of nd .
(1534) {224335} [224439]: (inherited-attribute-string &quot; attr &quot; nd ) Returns the value of the attr attribute of nd .
*****************************************************************
========================= CLASS #68 =============================
(1583) {230118} [230435]: A common use of let is within a define expression: (define (cals-rule-default nd) (let* ((table (ancestor &quot;table&quot; nd)) (frame (if (attribute-string &quot;frame&quot; table) (attribute-string &quot;frame&quot; table) &quot;all&quot;))) (equal?
(1584) {230436} [230527]: frame &quot;all&quot;))) This function creates two local variables table and frame .
*****************************************************************
========================= CLASS #69 =============================
(1633) {236767} [237789]: Writing Your Own Driver A basic driver file looks like this: &lt;!DOCTYPE style-sheet PUBLIC &quot;-//James Clark//DTD DSSSL Style Sheet//EN&quot; [ &lt;!ENTITY dbstyle PUBLIC &quot;-//Norman Walsh//DOCUMENT DocBook Print Stylesheet//EN&quot; CDATA DSSSL&gt; ]&gt; &lt;style-sheet&gt; &lt;style-specification use=&quot;docbook&quot;&gt; &lt;style-specification-body&gt; ;; your changes go here... &lt;/style-specification-body&gt; &lt;/style-specification&gt; &lt;external-specification id=&quot;docbook&quot; document=&quot;dbstyle&quot;&gt; &lt;/style-sheet&gt; public identifiers Modular DocBook Stylesheets Modular DocBook Stylesheets public identifiers There are two public identifiers associated with the Modular DocBook Stylesheets: -//Norman Walsh//DOCUMENT DocBook Print Stylesheet//EN -//Norman Walsh//DOCUMENT DocBook HTML Stylesheet//EN printing stylesheets HTML stylesheets selecting catalog files Open (SGML) The former selects the print stylesheet and the latter selects the stylesheet.
(1650) {240365} [241037]: The following driver makes German the default language: &lt;!DOCTYPE style-sheet PUBLIC &quot;-//James Clark//DTD DSSSL Style Sheet//EN&quot; [ &lt;!ENTITY dbstyle PUBLIC &quot;-//Norman Walsh//DOCUMENT DocBook Print Stylesheet//EN&quot; CDATA DSSSL&gt; ]&gt; &lt;style-sheet&gt; &lt;style-specification use=&quot;docbook&quot;&gt; &lt;style-specification-body&gt; (define %default-language% &quot;dege&quot;) &lt;/style-specification-body&gt; &lt;/style-specification&gt; &lt;external-specification id=&quot;docbook&quot; document=&quot;dbstyle&quot;&gt; &lt;/style-sheet&gt; %gentext-language% There are two other settings that can be changed only in a driver.
*****************************************************************
========================= CLASS #70 =============================
(1644) {239184} [239242]: summarizes the language codes for the supported languages.
(1649) {240306} [240364]: summarizes the language codes for the supported languages.
*****************************************************************
========================= CLASS #71 =============================
(1646) {239299} [240204]: French language chapter, example The following chapter uses text generated in French: &lt;chapter lang=&quot;fr&quot;&gt;&lt;title&gt;B tises&lt;/title&gt; &lt;para&gt;Pierre qui roule n&#39;amasse pas de mousse.&lt;/para&gt; &lt;/chapter&gt; DocBook Stylesheet Language Codes Language Code Language af Afrikaans ca Catalan cs Czech da Danish de German el Greek en English es Spanish et Estonian eu Basque fi Finnish fr French he Hebrew hu Hungarian id Indonesian it Italian ja Japanese ko Korean nl Dutch nn Nyorsk no Norwegian pl Polish pt Portuguese pt-br Portuguese (Brazil) ro Romanian ru Russian sk Slovak sl Slovenian sv Swedish th Thai tr Turkish uk Ukranian xh Xhosa zh-cn Chinese (Continental) zh-tw Chinese (Traditional) Changing the default language languages default, changing driver files language, changing default If no lang attribute is specified, the default language is used.
(1654) {241847} [242314]: &lt;/para&gt; &lt;/preface&gt; &lt;chapter lang=&quot;usen&quot;&gt;&lt;title&gt;English&lt;/title&gt; ... &lt;/chapter&gt; &lt;chapter lang=&quot;fr&quot;&gt;&lt;title&gt;French&lt;/title&gt; ... &lt;/chapter&gt; &lt;chapter lang=&quot;dege&quot;&gt;&lt;title&gt;Deutsch&lt;/title&gt; ... &lt;/chapter&gt; &lt;/book&gt; The standard stylesheets render the Preface as something like this: There are three chapters in this book: Chapter 1, Chapter 2, and Chapter 3.
*****************************************************************
========================= CLASS #72 =============================
(1751) {256978} [257076]: Here is an example of a simple XSL stylesheet applied to a simple file to generate HTML output.
(1843) {268051} [268074]: Generating HTML output.
*****************************************************************
========================= CLASS #73 =============================
(1764) {258336} [258634]: Fortunately, you can let other templates take care of those elements, so your XSL template for &lt;para&gt; can be quite simple: The &lt;xsl:template&gt; element starts a new template, and its match attribute indicates where to apply the template, in this case to any &lt;para&gt; elements.
(1770) {259312} [259401]: The match attribute of &lt;xsl:template&gt; provides that context for most templates.
(1785) {261291} [261393]: A mode attribute in an &lt;xsl:template&gt; definition adds a specific mode name to that template.
*****************************************************************
========================= CLASS #74 =============================
(1765) {258635} [258748]: The template says to output a literal p string and then execute the &lt;xsl:apply-templates/&gt; instruction.
(1767) {258892} [259033]: If each template in the stylesheet includes an &lt;xsl:apply-templates/&gt; instruction, then all descendents will eventually be processed.
*****************************************************************
========================= CLASS #75 =============================
(1775) {259951} [260145]: The match attribute value formalpara/title in the second template is an XPath expression indicating a &lt;title&gt; element that is an immediate child of a &lt;formalpara&gt; element.
(1776) {260146} [260229]: This distinguishes such titles from other &lt;title&gt; elements used in DocBook.
*****************************************************************
========================= CLASS #76 =============================
(1786) {261394} [261598]: When the same mode name is used in &lt;xsl:apply-templates/&gt; , it acts as a filter to narrow the selection of templates to only those selected by the match expression and that have that mode name.
(1851) {268992} [269086]: There it uses &lt;xsl:apply-templates/&gt; to recursively process the entire input document.
*****************************************************************
========================= CLASS #77 =============================
(1797) {262880} [263023]: Using variables and parameters XSL provides two elements that let you assign a value to a name: &lt;xsl:variable&gt; and &lt;xsl:param&gt; .
(1826) {266326} [266424]: Technically, the scope extends to the end tag of the parent of the &lt;xsl:variable&gt; element.
*****************************************************************
========================= CLASS #78 =============================
(1800) {263149} [263367]: The main difference between these two elements is that a param&#39;s value acts as a default value that can be overridden when a template is called using a &lt;xsl:with-param&gt; element as in the last example above.
(1835) {267004} [267105]: To pass a value to another template, you pass a parameter using the &lt;xsl:with-param&gt; element.
*****************************************************************
========================= CLASS #79 =============================
(1846) {268258} [268418]: That is the master stylesheet file that uses &lt;xsl:include&gt; to pull in the component files it needs to assemble a complete stylesheet for producing HTML.
(1875) {271535} [271709]: That is the master stylesheet file that uses &lt;xsl:include&gt; to pull in the component files it needs to assemble a complete stylesheet for producing formatting objects.
(1893) {274146} [274195]: Of the two, &lt;xsl:include&gt; is the simpler.
*****************************************************************
========================= CLASS #80 =============================
(1892) {274015} [274145]: Stylesheet inclusion vs. importing XSL actually provides two inclusion mechanisms: &lt;xsl:include&gt; and &lt;xsl:import&gt; .
(1897) {274558} [274650]: In contrast, &lt;xsl:import&gt; lets you manage the precedence of templates and variables.
(1911) {276211} [276367]: Customizing with &lt;xsl:import&gt; There is currently one example of customizing with &lt;xsl:import&gt; in the HTML version of the DocBook stylesheets.
*****************************************************************
========================= CLASS #81 =============================
(1914) {276575} [276685]: In the driver file xtchunk.xsl , the first instruction is &lt;xsl:import href=&quot;docbook.xsl&quot;/&gt; .
(1947) {280729} [280944]: Instead of using &lt;xsl:import href=&quot;docbook.xsl&quot;/&gt; , you copy that file to a new name and rewrite any of the &lt;xsl:include/&gt; instructions to assemble a custom collection of stylesheet modules.
*****************************************************************
========================= CLASS #82 =============================
(1925) {277841} [277979]: Near the end of the list of includes in the main DocBook driver file is the instruction &lt;xsl:include href=&quot;param.xsl&quot;/&gt; .
(1940) {279765} [279899]: Then your importing stylesheet can pull in your list templates with a &lt;xsl:include href=&quot;mylists.xsl&quot;/&gt; instruction.
*****************************************************************
========================= CLASS #83 =============================
(2028) {291490} [291574]: The most common reason for changing this module is to add or remove inline elements.
(2034) {292000} [292053]: Changes to this module can add or remove entity sets.
*****************************************************************
========================= CLASS #84 =============================
(2087) {300660} [300864]: Second, there is an alternate version of the book online that shows all of the element content models in terms of the parameter entities that define them, rather than the flattened versions shown here.
(2088) {300866} [301127]: elements content models (online reference) One resource that may be useful is the alternate version of this book that shows all of the element content models in terms of the parameter entities which define them, rather than the flattened versions shown here.
*****************************************************************
========================= CLASS #85 =============================
(2103) {303503} [303923]: The simplest way to use the new is to point to it with a system identifier: Java Math class absolute value (numbers), computing &lt;!DOCTYPE chapter SYSTEM &quot;/path/to/mydocbk.dtd&quot;&gt; &lt;chapter&gt;&lt;title&gt;My Chapter&lt;/title&gt; &lt;para&gt; The Java &lt;classname&gt;Math&lt;/classname&gt; class provides a &lt;methodname&gt;abs&lt;/methodname&gt; method to compute absolute value of a number.
(2104) {303924} [304813]: &lt;/para&gt; &lt;/chapter&gt; public identifiers DocBook DTD customization layer If you plan to use your customization layer in many documents, or exchange it with interchange partners, consider giving your its own public identifier, as described in catalog files public identifier, adding In order to use the new public identifier, you must add it to your catalog: PUBLIC &quot;-//Your Organization//DTD DocBook V3.1-Based Extension V1.0//EN&quot; &quot;/share/sgml/mydocbk.dtd&quot; and use that public identifier in your documents: &lt;!DOCTYPE chapter PUBLIC &quot;-//Your Organization//DTD DocBook V3.1-Based Extension V1.0//EN&quot;&gt; &lt;chapter&gt;&lt;title&gt;My Chapter&lt;/title&gt; &lt;para&gt; The Java &lt;classname&gt;Math&lt;/classname&gt; class provides a &lt;methodname&gt;abs&lt;/methodname&gt; method to compute absolute value of a number.
*****************************************************************
========================= CLASS #86 =============================
(2248) {324563} [324980]: external subset external subset document type declaration external subset public identifiers external subset system identifiers external subset declarations document type declaration Element, attribute, and other declarations that compose (part of) a document type definition that are stored in an external entity, and referenced from a document&#39;s document type declaration using a public or system identifier.
(2262) {327174} [327450]: internal subset internal subset document type declaration internal subset declarations document type declaration Element, attribute, and other declarations that compose (part of) a document type definition that are stored in a document, within the document type declaration.
*****************************************************************
========================= CLASS #87 =============================
(2298) {332841} [333054]: DocBook The Definitive Guide Norman Walsh Leonard Muellner Bob Stayton Frank Willison David Futato O&#39;Reilly Media, Inc. Beijing Cambridge Farnham Köln Paris Sebastopol Taipei Tokyo October 1999: First Edition.
(2300) {333188} [333243]: Portions Copyright © 1999-2003 O&#39;Reilly Media, Inc.
(2303) {333485} [333611]: Nutshell Handbook, the Nutshell Handbook logo, and the O&#39;Reilly logo are registered trademarks of O&#39;Reilly Media, Inc.
(2305) {333878} [333938]: O&#39;Reilly Media, Inc. is independent of Sun Microsystems.
*****************************************************************
