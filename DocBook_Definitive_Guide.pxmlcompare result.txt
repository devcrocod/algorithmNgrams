========================= CLASS #1 =============================
(0) {0} [313]: <?xml version="1.0" encoding="utf-8" ?> <plainxml>$Date: 2001-08-02 14:27:50 +0400 (Чт, 02 авг 2001) $ $Revision: 546 $ Installation Installing the DocBook DTD DocBook DTD installation This appendix describes how to install the DocBook DTD on your system so that popular command-line tools like SP can use it.
(2) {440} [497]: This appendix describes the installation of DocBook V3.1.
*****************************************************************
========================= CLASS #2 =============================
(7) {913} [1378]: files DocBook DTD distribution The distribution consists of 14 files: 31chg.txt Describes the changes in DocBook V3.1 from the preceding version (3.0) 40issues.txt Summarizes backwards-incompatible changes planned for DocBook V4.0 50issues.txt Summarizes backwards-incompatible changes planned for DocBook V5.0 cals-tbl.dtd The CALS Table Model DTD ChangeLog A GNU-style ChangeLog summarizing the individual edits made on each file in the distribution since V3.0.
(174) {26668} [26724]: This appendix describes the changes planned for DocBook.
*****************************************************************
========================= CLASS #3 =============================
(12) {2021} [2289]: Getting the ISO Entity Sets entity sets ISO standard, obtaining entities entity sets entity sets ISO standards entity sets obtaining OASIS entity sets (ISO standard), obtaining DocBook refers to a number of standard entity sets that are not distributed with DocBook.
(2046) {293524} [293652]: *.gml *.gml (ISO standard character entity sets) ISO standards entity sets characters The ISO standard character entity sets.
*****************************************************************
========================= CLASS #4 =============================
(13) {2290} [2385]: (They aren&#39;t distributed with DocBook because they aren&#39;t maintained by the DocBook TC.
(14) {2386} [2417]: They&#39;re maintained by ISO.)
(106) {15578} [15602]: They&#39;re all illegal.
(935) {136823} [136866]: They&#39;re simply a method of indirection.
*****************************************************************
========================= CLASS #5 =============================
(16) {2504} [2642]: If you are missing some of them, they are available from Robin Cover&#39;s pages at OASIS: http://www.oasis-open.org/cover/ISOEnts.zip .
(262) {39658} [39775]: For a list of recent of tools, check out Robin Cover&#39;s / page at OASIS : http://www.oasis-open.org/cover .
*****************************************************************
========================= CLASS #6 =============================
(25) {3642} [3860]: This mapping won&#39;t work out of the box for two reasons: first, your tools won&#39;t be able to find it, and second, the mappings for the ISO entity sets probably don&#39;t point to the right place on your system.
(472) {72344} [72396]: That&#39;s the difference between 2.0.13 and 2.0.14.
(475) {72616} [72668]: That&#39;s the difference between 2.0.11 and 2.0.12.
(534) {77472} [77495]: What&#39;s on the CD ?
(560) {80298} [80337]: It&#39;s a better book because of them.
(567) {81614} [81638]: That&#39;s covered here.
(569) {81725} [81764]: That&#39;s covered in the next chapter.
(842) {121532} [121584]: There&#39;s no difference between Para and pArA .
(1490) {218459} [218527]: In this introduction, we&#39;ll cover only a few of the most common.
*****************************************************************
========================= CLASS #7 =============================
(36) {5735} [6327]: To continue with the example above, let&#39;s say that you&#39;ve got: DocBook in /share/sgml/docbk30/ , The ISO entities in /share/sgml/entities/8879/ , and Your catalog in /share/sgml/catalog Then you would change the catalog entry for the DTD to be: PUBLIC &quot;-//OASIS//DTD DocBook V3.1//EN&quot; &quot;docbk30/docbook.dtd&quot; You would change the catalog entry for the general technical character entities to: PUBLIC &quot;ISO 8879:1986//ENTITIES General Technical//EN&quot; &quot;entities/8879/iso-tech.gml&quot; And similarly for the other public identifiers used by DocBook.
(383) {54576} [54656]: Any member of the public is a licensee, and is addressed as &quot;you&quot;.
*****************************************************************
========================= CLASS #8 =============================
(46) {7997} [8228]: &lt;/para&gt; &lt;/chapter&gt; and run the following command: nsgmls -sv test.sgm declarations passing explicitly DTDDECL warnings (unsupported) If the nsgmls command produces errors, review your catalog and resolve the errors.
(858) {123928} [123988]: &lt;/para&gt; Both important and this are emphasized.
*****************************************************************
========================= CLASS #9 =============================
(80) {11949} [12040]: If not, and the preceding test succeeded, something has gone wrong contact the maintainer .
(82) {12213} [12304]: If not, and the preceding test succeeded, something has gone wrong contact the maintainer .
*****************************************************************
========================= CLASS #10 =============================
(89) {13080} [13228]: If your goal is to author DocBook documents with one of this new generation of tools, you will only be able to achieve validity with an DocBook .
(878) {127262} [127311]: Realistically, DocBook documents will have one.
*****************************************************************
========================= CLASS #11 =============================
(102) {15082} [15296]: Minimization markup minimization SGML/XML conversion problems minimization markup SGML/XML conversion problems If you have used minimization features in your instances: they will not be well-formed instances.
(859) {123990} [124172]: markup minimization SGML/XML conversion problems minimization markup SGML/XML conversion problems If you are interested in future compatibility, don&#39;t use any of these tricks.
*****************************************************************
========================= CLASS #12 =============================
(108) {15754} [16000]: The result will be something like this: Attribute Default Values attributes default values Correct processing of this document may require access to the default attributes: Address expresses that its content is line-specific with an attribute.
(167) {25459} [25499]: Attribute default values must be quoted.
*****************************************************************
========================= CLASS #13 =============================
(128) {18808} [19175]: Para element PARA vs. (XML) The result will be something like this: No #CONREF Attributes #CONREF attributes Startref attribute IndexTerm element OtherTerm attribute GlossSee element GlossSeeAlso element empty tags #CONREF attributes The StartRef attribute on indexterm and the OtherTerm attribute on GlossSee and GlossSeeAlso are #CONREF attributes.
(164) {25092} [25124]: No #CONREF attributes allowed.
*****************************************************************
========================= CLASS #14 =============================
(140) {20877} [21000]: The result will be something like this: No Data Attributes on Notations They&#39;re not allowed in , so don&#39;t add any.
(759) {109546} [109586]: In , they&#39;re only allowed in the .
*****************************************************************
========================= CLASS #15 =============================
(169) {25601} [25940]: $Date: 2009-01-05 12:25:13 +0300 (Пн, 05 янв 2009) $ $Revision: 8201 $ DocBook Versions DocBook DTD versions versions DocBook DTD OASIS DocBook Technical Committee DocBook Technical Committee (OASIS) TC DocBook Technical Committee (OASIS) The OASIS DocBook Technical Committee ( TC ) is committed to the continued evolution of DocBook.
(799) {114819} [114935]: An OASIS DocBook Technical Committee was formed in July, 1998, with Eduardo Gutentag of Sun Microsystems as chair.
*****************************************************************
========================= CLASS #16 =============================
(204) {30776} [31441]: smallcptr.char.mix parameter entity, changes V4.0 Action element changes, V4.0 Command element changes, V4.0 Database element changes, V4.0 Filename element changes, V4.0 Hardware element changes, V4.0 Interface element changes, V4.0 KeyCap element changes, V4.0 Literal element changes, V4.0 Option element changes, V4.0 Parameter element changes, V4.0 Property element changes, V4.0 SystemItem element changes, V4.0 The following elements will have their content constrained to the smallcptr.char.mix mixture: Action , Command , Database , Filename , Hardware , Interface , KeyCap , Literal , Option , Parameter , Property , and SystemItem .
(206) {31781} [31893]: Epigraph element changes, V4.0 BlockQuote element changes, V4.0 Epigraph will not be appearing in BlockQuote .
(207) {31895} [32024]: Comment element, changes V4.0 Remark element, changes V4.0 Comment will be renamed to Remark and will be excluded from itself.
(210) {32402} [32525]: SetTitle elements (V4.0) SegmentedList element changes, V4.0 Two SegTitle elements will be required in SegmentedList .
*****************************************************************
========================= CLASS #17 =============================
(236) {36578} [36705]: References and Technical Notes on the Web Entity Management OASIS Technical Resolution 9401:1997 (Amendment 2 to TR 9401) .
(938) {137100} [137170]: See OASIS Technical Resolution 9401:1997 (Amendment 2 to TR 9401).
(990) {143964} [144044]: The formal specification is contained in OASIS Technical Resolution 9401:1997.
*****************************************************************
========================= CLASS #18 =============================
(241) {37001} [37172]: Table Model Document Type Definition OASIS Technical Memorandum TM 9502:1995 XML Exchange Table Model Document Type Definition OASIS Technical Memorandum TM 9901:1999 .
(479) {73297} [73339]: DocBook is a document type definition ( ).
*****************************************************************
========================= CLASS #19 =============================
(248) {37637} [37712]: The Specification The W3C technical recommendation that defines 1.0.
(249) {37713} [37789]: Namespaces in The W3C technical recommendation that defines namespaces.
*****************************************************************
========================= CLASS #20 =============================
(444) {66698} [66993]: In the combination, you must combine any sections entitled &quot;History&quot; in the various original documents, forming one section entitled &quot;History&quot;; likewise combine any sections entitled &quot;Acknowledgements&quot;, and any sections entitled &quot;Dedications&quot;.
(466) {71439} [71546]: A copy of the license is included in the section entitled &quot;GNU Free Documentation License&quot;.
(2302) {333445} [333484]: A copy of the license is included in .
*****************************************************************
========================= CLASS #21 =============================
(465) {71074} [71432]: Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.1 or any later version published by the Free Software Foundation; with the Invariant Sections being LIST THEIR TITLES, with the Front-Cover Texts being LIST, and with the Back-Cover Texts being LIST.
(2301) {333244} [333444]: Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.1 or any later version published by the Free Software Foundation.
*****************************************************************
========================= CLASS #22 =============================
(473) {72397} [72502]: This change log is slightly abbreviated; there were hundreds of uninteresting changes to generated files.
(476) {72669} [72774]: This change log is slightly abbreviated; there were hundreds of uninteresting changes to generated files.
*****************************************************************
========================= CLASS #23 =============================
(494) {74474} [74567]: After you&#39;ve written a document, how can you tell if it really conforms to the DocBook ?
(496) {74602} [74655]: After you&#39;ve written one, what do you do with it?
*****************************************************************
========================= CLASS #24 =============================
(495) {74568} [74601]: How to publish DocBook documents.
(522) {76670} [76703]: How to publish DocBook documents.
*****************************************************************
========================= CLASS #25 =============================
(527) {77085} [77127]: A reference guide to the DocBook elements.
(528) {77128} [77180]: A reference guide to the DocBook parameter entities.
*****************************************************************
========================= CLASS #26 =============================
(577) {82559} [82657]: , on the other hand, is an international standard that describes how markup languages are defined.
(579) {82728} [82776]: is an example of a markup language defined in .
(771) {111171} [111237]: Like , DocBook is an example of a markup language defined in / .
*****************************************************************
========================= CLASS #27 =============================
(590) {84081} [84184]: Nevertheless, it&#39;s not unreasonable to do your authoring in and your online publishing in or .
(591) {84185} [84256]: By the same token, it&#39;s not unreasonable to do your authoring in .
*****************************************************************
========================= CLASS #28 =============================
(599) {85705} [85865]: That&#39;s because the markup does not specify many aspects of a document&#39;s appearance, although it does specify many aspects of a document&#39;s structure.
(648) {93935} [93957]: And we don&#39;t care.
(729) {105722} [105749]: Don&#39;t do this, however.
*****************************************************************
========================= CLASS #29 =============================
(606) {86773} [87088]: elements SGML/XML, using titles top-level sections top-level sections characters character sets SGML documents ASCII character set XML Unicode character set Unicode character set XML documents, using and use named elements, delimited by angle brackets ( &lt; and &gt; ) to identify the markup in a document.
(612) {87808} [87848]: documents use the Unicode character set.
*****************************************************************
========================= CLASS #30 =============================
(608) {87398} [87505]: The sect1 also has an ending sect1 , but we haven&#39;t shown the whole section so it&#39;s not visible.
(699) {100996} [101062]: Come back to this section when you&#39;re looking for more detail.
(2076) {299445} [299510]: In this section, we&#39;ll go through the process in some detail.
*****************************************************************
========================= CLASS #31 =============================
(632) {90789} [91444]: This is valid: &lt;sect1&gt;&lt;title&gt;...&lt;/title&gt; &lt;sect2&gt;&lt;title&gt;...&lt;/title&gt; &lt;sect3&gt;&lt;title&gt;...&lt;/title&gt; ... &lt;/sect3&gt; &lt;/sect2&gt; &lt;/sect1&gt; This is not: &lt;sect1&gt;&lt;title&gt;...&lt;/title&gt; &lt;sect3&gt;&lt;title&gt;...&lt;/title&gt; ... &lt;/sect3&gt; &lt;/sect1&gt; parsers validating validation SGML documents DTDs validating SGML documents against instance (DocBook document) Because an / document has an associated that describes the valid, logical structures of the document, you can test the logical structure of any particular document against the .
(679) {98031} [98107]: In , this is written as &lt;xref/&gt; , as we&#39;ll see in the section .
(857) {123891} [123927]: So is &lt;&gt;this&lt;/emphasis&gt;.
*****************************************************************
========================= CLASS #32 =============================
(708) {102132} [102465]: For example, if your document frequently refers to, say, O&#39;Reilly &amp; Associates, you might declare it as an entity: &lt;!ENTITY ora &quot;O&#39;Reilly &amp;amp; Associates&quot;&gt; Then, instead of typing it out each time, you can insert it as needed in your document with the entity reference ora , simply to save time.
(728) {105568} [105721]: It is, in fact, valid in an (but not an ) document to write O&#39;Reilly &amp; Associates because the ampersand is not followed by a name character.
(773) {111296} [111373]: It began in 1991 as a joint project of HaL Computer Systems and O&#39;Reilly.
(2300) {333188} [333243]: Portions Copyright © 1999-2003 O&#39;Reilly Media, Inc.
*****************************************************************
========================= CLASS #33 =============================
(717) {103555} [104125]: At the top of your document, you would include entity declarations to reference the four files: &lt;!ENTITY ch01 SYSTEM &quot;ch01.sgm&quot;&gt; &lt;!ENTITY ch02 SYSTEM &quot;ch02.sgm&quot;&gt; &lt;!ENTITY ch03 SYSTEM &quot;ch03.sgm&quot;&gt; &lt;!ENTITY ch04 SYSTEM &quot;ch04.sgm&quot;&gt; Your Book now consists simply of references to the entities: &lt;book&gt; &amp;ch01; &amp;ch02; &amp;ch03; &amp;ch04; &lt;/book&gt; unparsed entities notations (unparsed entities) Sometimes it&#39;s useful to reference external files that don&#39;t contain document text.
(721) {104595} [104817]: Instead, they must be used as entity attributes to elements: &lt;graphic entityref=&quot;tree&quot;&gt;&lt;/graphic&gt; Conversely, you cannot use entities declared without a notation as the value of an entity attribute.
*****************************************************************
========================= CLASS #34 =============================
(819) {116849} [116910]: The following sections describe the features of the prologue.
(872) {126298} [126361]: The following sections describe the features of the prologue.
*****************************************************************
========================= CLASS #35 =============================
(827) {118292} [118537]: A Document Type Declaration SGML document type declaration document type declaration SGML documents declarations document type declaration declarations document type declaration SGML All documents must begin with a document type declaration.
(1033) {151559} [151633]: Note that these files do not and must not have document type declarations.
*****************************************************************
========================= CLASS #36 =============================
(831) {119127} [119695]: An Internal Subset internal subset SGML document declarations It&#39;s also possible to provide additional declarations in a document by placing them in the document type declaration: &lt;!DOCTYPE book PUBLIC &quot;-//OASIS//DTD DocBook V3.1//EN&quot; [ &lt;!ENTITY nwalsh &quot;Norman Walsh&quot;&gt; &lt;!ENTITY chap1 SYSTEM &quot;chap1.sgm&quot;&gt; &lt;!ENTITY chap2 SYSTEM &quot;chap2.sgm&quot;&gt; ]&gt; external subset SGML document declarations public identifiers SGML system identifiers SGML These declarations form what is known as the internal subset .
(836) {120237} [120856]: The Document (or Root) Element elements root element root element placement Although comments and processing instructions may occur between the document type declaration and the root element, the root element usually immediately follows the document type declaration: &lt;!DOCTYPE book PUBLIC &quot;-//OASIS//DTD DocBook V3.1//EN&quot; [ &lt;!ENTITY nwalsh &quot;Norman Walsh&quot;&gt; &lt;!ENTITY chap1 SYSTEM &quot;chap1.sgm&quot;&gt; &lt;!ENTITY chap2 SYSTEM &quot;chap2.sgm&quot;&gt; ]&gt; &lt;book&gt; &amp;chap1; &amp;chap2; &lt;/book&gt; You cannot place the root element of the document in an external entity.
(879) {127313} [127506]: elements root element root element document type declaration The document type declaration identifies the that will be used by the document and what the root element of the document will be.
(890) {130476} [130548]: You cannot place the root element of the document in an external entity.
*****************************************************************
========================= CLASS #37 =============================
(832) {119696} [119871]: The declarations stored in the file referenced by the public or system identifier in the DOCTYPE declaration is called the external subset and it is technically optional.
(885) {129138} [129310]: The declarations stored in the file referenced by the public or system identifier in the DOCTYPE declaration is called the external subset, which is technically optional.
*****************************************************************
========================= CLASS #38 =============================
(833) {119872} [120018]: It is legal to put the in the internal subset and to have no external subset, but for a as large as DocBook that wouldn&#39;t make much sense.
(886) {129312} [129459]: It is legal to put the in the internal subset and to have no external subset, but for a as large as DocBook, that would make very little sense.
*****************************************************************
========================= CLASS #39 =============================
(834) {120020} [120154]: parsing order The internal subset is parsed first and, if multiple declarations for an entity occur, the first declaration is used.
(887) {129461} [129627]: parsing order XML document declarations The internal subset is parsed first in and, if multiple declarations for an entity occur, the first declaration is used.
*****************************************************************
========================= CLASS #40 =============================
(835) {120155} [120236]: Declarations in the internal subset override declarations in the external subset.
(888) {129628} [129709]: Declarations in the internal subset override declarations in the external subset.
*****************************************************************
========================= CLASS #41 =============================
(837) {120857} [121083]: Typing an Document Emacs text editor vi text editor SGML text editors, entering through text editors SGML, entering If you are entering using a text editor such as Emacs or vi , there are a few things to keep in mind.
(891) {130549} [130691]: Typing an Document text editors If you are entering using a text editor such as Emacs or vi , there are a few things to keep in mind.
*****************************************************************
========================= CLASS #42 =============================
(840) {121246} [121319]: Using a structured text editor designed for hides most of these issues.
(892) {130692} [130765]: Using a structured text editor designed for hides most of these issues.
*****************************************************************
========================= CLASS #43 =============================
(845) {121936} [122294]: SGML XML/SGML compatibility quotes, attribute values XML SGML/XML compatibility quotes, attribute values quotes attribute values spaces and punctuation characters attributes values quoting spaces, quoting (attribute values) punctuation characters, quoting (attribue values) If attribute values contain spaces or punctuation characters, you must quote them.
(849) {122726} [122871]: compatibility, SGML/XML conversion attribute values, quoting If you are interested in future compatibility, always quote all attribute values.
*****************************************************************
========================= CLASS #44 =============================
(847) {122422} [122658]: straight single quotes (attribute values) straight double quotes (attribute values) curly quotes (attribute values) When quoting attribute values, you can use either a straight single quote (&#39;), or a straight double quote (&quot;).
(895) {131025} [131077]: You are required to quote all attribute values in .
(896) {131079} [131224]: quotes attribute values When quoting attribute values, you can use either a straight single quote (&#39;), or a straight double quote (&quot;).
*****************************************************************
========================= CLASS #45 =============================
(848) {122660} [122724]: Don&#39;t use the curly quotes ( and ) in your editing tool.
(897) {131226} [131290]: Don&#39;t use the curly quotes ( and ) in your editing tool.
*****************************************************************
========================= CLASS #46 =============================
(856) {123723} [123889]: For the record, if you encounter an empty start tag, the parser uses the element that ended last: &lt;para&gt; This is &lt;emphasis&gt;important&lt;/emphasis&gt;.
(1444) {212819} [212898]: &lt;emphasis&gt;Emphasized&lt;/emphasis&gt; words should be printed in italics.
*****************************************************************
========================= CLASS #47 =============================
(864) {124924} [125174]: Removing Minimizations markup minimization removing minimization removing Although we&#39;ve made a point of reminding you about which of these minimization features are not valid in , that&#39;s not really a sufficient reason to avoid using them.
(1386) {202515} [202558]: In fact, they&#39;re really the same error.
*****************************************************************
========================= CLASS #48 =============================
(877) {127024} [127261]: A Document Type Declaration declarations document type declaration XML XML document type declaration document type declaration XML documents DocBook DTD XML document type declaration Strictly speaking, documents don&#39;t require a .
(2235) {322559} [322803]: Raw document type declaration ( ) document type declaration declarations document type declaration A set of declarations that defines the names of the elements and their attributes, and that specifies rules for their combination or sequence.
*****************************************************************
========================= CLASS #49 =============================
(884) {128397} [129137]: An Internal Subset declarations document type declaration XML document type declaration internal subset internal subset XML document type declarations XML document type declarations internal subset It&#39;s also possible to provide additional declarations in a document by placing them in the document type declaration: &lt;?xml version=&#39;1.0&#39;?&gt; &lt;!DOCTYPE book PUBLIC &quot;-//Norman Walsh//DTD DocBk XML V3.1.4/EN&quot; &quot;http://nwalsh.com/docbook/xml/3.1.4/db3xml.dtd&quot; [ &lt;!ENTITY nwalsh &quot;Norman Walsh&quot;&gt; &lt;!ENTITY chap1 SYSTEM &quot;chap1.sgm&quot;&gt; &lt;!ENTITY chap2 SYSTEM &quot;chap2.sgm&quot;&gt; ]&gt; These declarations form what is known as the internal subset.
(889) {129710} [130475]: The Document (or Root) Element root element elements root element Although comments and processing instructions may occur between the document type declaration and the root element, the root element usually immediately follows the document type declaration: &lt;?xml version=&#39;1.0&#39;?&gt; &lt;!DOCTYPE book PUBLIC &quot;-//Norman Walsh//DTD DocBk XML V3.1.4//EN&quot; &quot;http://nwalsh.com/docbook/xml/3.1.4/db3xml.dtd&quot; [ &lt;!ENTITY nwalsh &quot;Norman Walsh&quot;&gt; &lt;!ENTITY chap1 SYSTEM &quot;chap1.sgm&quot;&gt; &lt;!ENTITY chap2 SYSTEM &quot;chap2.sgm&quot;&gt; ]&gt; &lt;book&gt;...&lt;/book&gt; The important point is that the root element must be physically present immediately after the document type declaration.
(981) {142965} [143017]: In , there&#39;s no constraint on what they can be.
(1030) {150410} [150460]: Actually, we&#39;ve already told you how to do it.
(1119) {163575} [163616]: Informal equations don&#39;t have titles.
(1294) {180930} [180960]: Let&#39;s talk about leopards.
*****************************************************************
========================= CLASS #50 =============================
(900) {131420} [131538]: ), processing instructions Processing instructions in begin and end with a question mark: &lt;?pitarget data?&gt; .
(915) {133494} [133686]: ), processing instructions (XML) processing instructions XML documents XML processing instructions Processing instructions in begin and end with a question mark: &lt;?pitarget data?&gt; .
*****************************************************************
========================= CLASS #51 =============================
(912) {133213} [133363]: empty elements start tags, XML vs. SGML start tags empty element Empty element start tags in are marked with a distinctive syntax: &lt;xref/&gt; .
(2240) {323235} [323292]: Empty elements have only a start tag and have no content.
*****************************************************************
========================= CLASS #52 =============================
(913) {133365} [133475]: In , the trailing slash is not present, so some of our examples need slight revisions to be valid elements.
(916) {133688} [133806]: In , the trailing question mark is not present, so some of our examples need slight revisions to be valid elements.
*****************************************************************
========================= CLASS #53 =============================
(917) {133808} [134159]: system identifiers XML URI requirement Uniform Resource Indicators URI public identifiers DocBook DTD examples Generally we use public identifiers in examples, but whenever system identifiers are used, don&#39;t forget that system identifiers must be Uniform Resource Indicators ( URI s), in which system identifiers are usually simple filenames.
(926) {135408} [135470]: In , it must point with a Uniform Resource Indicator ( URI ).
*****************************************************************
========================= CLASS #54 =============================
(980) {142566} [142964]: FPI ISO Latin 1 character set, examples For example, the FPI for the ISO Latin 1 character set is: -//ISO 8879-1986//ENTITIES Added Latin 1//EN A reasonable FPI for an version of this character set is: -//ISO 8879-1986//ENTITIES Added Latin 1//EN//XML System Identifiers system identifiers URI XML system identifiers System identifiers are usually filenames on the local system.
(2279) {330159} [330198]: Usually a filename on the local system.
*****************************************************************
========================= CLASS #55 =============================
(993) {144263} [144911]: PUBLIC PUBLIC keyword The PUBLIC keyword maps public identifiers to system identifiers: PUBLIC &quot;-//OASIS//DTD DocBook V3.1//EN&quot; &quot;docbook/3.1/docbook.dtd&quot; SYSTEM SYSTEM keyword The SYSTEM keyword maps system identifiers to system identifiers: SYSTEM &quot;http://nwalsh.com/docbook/xml/1.3/db3xml.dtd&quot; &quot;docbook/xml/1.3/db3xml.dtd&quot; SGMLDECL SGMLDECL keyword The SGMLDECL keyword identifies the system identifier of the Declaration that should be used: SGMLDECL &quot;docbook/3.1/docbook.dcl&quot; DTDDECL DTDDECL Like SGMLDECL , DTDDECL identifies the Declaration that should be used.
(994) {144913} [145153]: DTDDECL associates a declaration with a particular public identifier for a : DTDDECL &quot;-//OASIS//DTD DocBook V3.1//EN&quot; &quot;docbook/3.1/docbook.dcl&quot; Unfortunately, it is not supported by the free tools that are available.
*****************************************************************
========================= CLASS #56 =============================
(1032) {150788} [151557]: So, if you&#39;ve got a book that consists of three chapters and two appendixes, you might create a file called book.sgm , which looks like this: &lt;!DOCTYPE book PUBLIC &quot;-//OASIS//DTD DocBook V3.1//EN&quot; [ &lt;!ENTITY chap1 SYSTEM &quot;chap1.sgm&quot;&gt; &lt;!ENTITY chap2 SYSTEM &quot;chap2.sgm&quot;&gt; &lt;!ENTITY chap3 SYSTEM &quot;chap3.sgm&quot;&gt; &lt;!ENTITY appa SYSTEM &quot;appa.sgm&quot;&gt; &lt;!ENTITY appb SYSTEM &quot;appb.sgm&quot;&gt; ]&gt; &lt;book&gt;&lt;title&gt;My First Book&lt;/title&gt; &amp;chap1; &amp;chap2; &amp;chap3; &amp;appa; &amp;appb; &lt;/book&gt; declarations document type declaration document type declaration divisions of documents You can then write the chapters and appendixes conveniently in separate files.
(1034) {151636} [151810]: For example, Chapter 1 might begin like this: &lt;chapter id=&quot;ch1&quot;&gt;&lt;title&gt;My First Chapter&lt;/title&gt; &lt;para&gt;My first paragraph.&lt;/para&gt; ...
(1035) {151814} [152081]: But it should not begin with its own document type declaration: &lt;!DOCTYPE chapter PUBLIC &quot;-//OASIS//DTD DocBook V3.1//EN&quot;&gt; &lt;chapter id=&quot;ch1&quot;&gt;&lt;title&gt;My First Chapter&lt;/title&gt; &lt;para&gt;My first paragraph.&lt;/para&gt; ...
(1653) {241582} [241846]: Consider the following book: &lt;book&gt;&lt;title&gt;A Test Book&lt;/title&gt; &lt;preface&gt; &lt;para&gt;There are three chapters in this book: &lt;xref linkend=&quot;c1&quot;&gt;, &lt;xref linkend=&quot;c2&quot;&gt;, and &lt;xref linkend=&quot;c3&quot;&gt;.
(1761) {258072} [258136]: Take the DocBook &lt;para&gt; paragraph element as an example.
*****************************************************************
========================= CLASS #57 =============================
(1061) {155802} [155927]: Section element Section element The Section element, introduced in DocBook V3.1, is an alternative to numbered sections.
(1115) {162942} [163004]: The InformalFigure element was introduced in DocBook V3.1 .
*****************************************************************
========================= CLASS #58 =============================
(1064) {156123} [156242]: It is a terminal section that can occur at any level, but it cannot have any other sectioning element nested within it.
(1069) {156807} [156851]: Unlike sections, these elements do not nest.
*****************************************************************
========================= CLASS #59 =============================
(1081) {158662} [158889]: fonts changes (inline elements) characters inline elements cross references filenames commands options subscripts and superscripts glossaries glossary terms Inline elements are generally represented without any obvious breaks.
(1084) {159140} [159285]: Inline elements are used to mark up data such as cross references, filenames, commands, options, subscripts and superscripts, and glossary terms.
(1137) {165969} [166018]: Inline elements are used to mark up running text.
*****************************************************************
========================= CLASS #60 =============================
(1216) {170662} [170684]: Symbol element Token .
(1242) {171658} [171680]: Symbol element Token .
*****************************************************************
========================= CLASS #61 =============================
(1217) {170685} [170705]: Token element Type .
(1243) {171681} [171701]: Token element Type .
*****************************************************************
========================= CLASS #62 =============================
(1293) {180495} [180929]: Here&#39;s the previous tiger example recast as starting and ending index terms: &lt;para&gt; The tiger&lt;indexterm id=&quot;tiger-desc&quot; class=&quot;startofrange&quot;&gt; &lt;primary&gt;Big Cats&lt;/primary&gt; &lt;secondary&gt;Tigers&lt;/secondary&gt;&lt;/indexterm&gt; is a very large cat indeed &lt;/para&gt; &lt;para&gt; So much for tigers&lt;indexterm startref=&quot;tiger-desc&quot; class=&quot;endofrange&quot;&gt;.
(1303) {182093} [182520]: You can put the following tag anywhere in your document to index that range of text: &lt;indexterm zone=&quot;tiger-desc&quot;&gt; &lt;primary&gt;Big Cats&lt;/primary&gt; &lt;secondary&gt;Tigers&lt;/secondary&gt;&lt;/indexterm&gt; see and see also index entries DocBook also contains markup for index hits that point to other index hits (of the same type such as &quot;See Cats, big&quot; or &quot;See also Lions&quot;).
*****************************************************************
========================= CLASS #63 =============================
(1310) {183081} [184099]: The following example includes some one- and two-level IndexEntry elements (which correspond to the primary and secondary levels in the indexterm s themselves) that begin with the letter D: &lt;!DOCTYPE index PUBLIC &quot;-//OASIS//DTD DocBook V3.1//EN&quot;&gt; &lt;index&gt;&lt;title&gt;Index&lt;/title&gt; &lt;indexdiv&gt;&lt;title&gt;D&lt;/title&gt; &lt;indexentry&gt; &lt;primaryie&gt;database (bibliographic), 253, 255&lt;/primaryie&gt; &lt;secondaryie&gt;structure, 255&lt;/secondaryie&gt; &lt;secondaryie&gt;tools, 259&lt;/secondaryie&gt; &lt;/indexentry&gt; &lt;indexentry&gt; &lt;primaryie&gt;dates (language specific), 179&lt;/primaryie&gt; &lt;/indexentry&gt; &lt;indexentry&gt; &lt;primaryie&gt;DC fonts, &lt;emphasis&gt;172&lt;/emphasis&gt;, 177&lt;/primaryie&gt; &lt;secondaryie&gt;Math fonts, 177&lt;/secondaryie&gt; &lt;/indexentry&gt; &lt;/indexdiv&gt; &lt;/index&gt; Making a Glossary glossaries creating Glossary s, like Bibliography s, are often constructed by hand.
(1326) {188505} [188584]: &lt;title role=article&gt;Introduction to Cascading Style Sheets&lt;/title&gt;.
(1858) {269768} [269836]: Thus a single template can generate &lt;h1&gt; , &lt;h2&gt; , etc.
*****************************************************************
========================= CLASS #64 =============================
(1318) {185046} [185916]: For instance, if you have this markup in your document: &lt;glossterm linkend=&quot;xml&quot;&gt;Extensible Markup Language&lt;/glossterm&gt; is a new standard glossaries example your glossary might look like this: &lt;!DOCTYPE glossary PUBLIC &quot;-//OASIS//DTD DocBook V3.1//EN&quot;&gt; &lt;glossary&gt;&lt;title&gt;Example Glossary&lt;/title&gt; &lt;glossdiv&gt;&lt;title&gt;E&lt;/title&gt; &lt;glossentry id=&quot;xml&quot;&gt;&lt;glossterm&gt;Extensible Markup Language&lt;/glossterm&gt; &lt;acronym&gt;XML&lt;/acronym&gt; &lt;glossdef&gt; &lt;para&gt;Some reasonable definition here.&lt;/para&gt; &lt;glossseealso otherterm=&quot;sgml&quot;&gt; &lt;/glossdef&gt; &lt;/glossentry&gt; &lt;/glossdiv&gt; Note that the GlossTerm tag reappears in the glossary to mark up the term and distinguish it from its definition within the GlossEntry .
(1427) {210023} [210243]: We used jade to produce this book and to produce the online versions on the CD-ROM ; it is also being deployed in other projects such as &lt;SGML&gt;&amp;tools; , which originated with the Linux Documentation Project.
*****************************************************************
========================= CLASS #65 =============================
(1322) {186418} [187900]: Here&#39;s an example of a raw bibliographical item, wrapped in the Biblioentry element: &lt;biblioentry xreflabel=&quot;Kites75&quot;&gt; &lt;authorgroup&gt; &lt;author&gt;&lt;firstname&gt;Andrea&lt;/firstname&gt;&lt;surname&gt;Bahadur&lt;/surname&gt;&lt;/author&gt; &lt;author&gt;&lt;firstname&gt;Mark&lt;/&gt;&lt;surname&gt;Shwarek&lt;/&gt;&lt;/author&gt; &lt;/authorgroup&gt; &lt;copyright&gt;&lt;year&gt;1974&lt;/year&gt;&lt;year&gt;1975&lt;/year&gt; &lt;holder&gt;Product Development International Holding N. V.&lt;/holder&gt; &lt;/copyright&gt; &lt;isbn&gt;0-88459-021-6&lt;/isbn&gt; &lt;publisher&gt; &lt;publishername&gt;Plenary Publications International, Inc.&lt;/publishername&gt; &lt;/publisher&gt; &lt;title&gt;Kites&lt;/title&gt; &lt;subtitle&gt;Ancient Craft to Modern Sport&lt;/subtitle&gt; &lt;pagenums&gt;988-999&lt;/pagenums&gt; &lt;seriesinfo&gt; &lt;title&gt;The Family Creative Workshop&lt;/title&gt; &lt;seriesvolnums&gt;1-22&lt;/seriesvolnums&gt; &lt;editor&gt; &lt;firstname&gt;Allen&lt;/firstname&gt; &lt;othername role=middle&gt;Davenport&lt;/othername&gt; &lt;surname&gt;Bragdon&lt;/surname&gt; &lt;contrib&gt;Editor in Chief&lt;/contrib&gt; &lt;/editor&gt; &lt;/seriesinfo&gt; &lt;/biblioentry&gt; The raw data in a Biblioentry is comprehensive to a fault there are enough fields to suit a host of different bibliographical styles, and that is the point.
(1325) {188299} [188500]: It even includes punctuation between the fields of data: &lt;bibliomixed&gt; &lt;bibliomset relation=article&gt; &lt;surname&gt;Walsh&lt;/surname&gt;, &lt;firstname&gt;Norman&lt;/firstname&gt;.
(1327) {188587} [188779]: &lt;/bibliomset&gt; &lt;bibliomset relation=journal&gt; &lt;title&gt;The World Wide Web Journal&lt;/title&gt; &lt;volumenum&gt;2&lt;/volumenum&gt;&lt;issuenum&gt;1&lt;/issuenum&gt;.
(1328) {188784} [188934]: &lt;publishername&gt;O&#39;Reilly &amp; Associates, Inc.&lt;/publishername&gt; and &lt;corpname&gt;The World Wide Web Consortium&lt;/corpname&gt;.
(1329) {188939} [189002]: &lt;pubdate&gt;Winter, 1996&lt;/pubdate&gt;&lt;/bibliomset&gt;.
(1849) {268720} [268837]: It first defines a variable named doc and then outputs two literal HTML elements &lt;html&gt; and &lt;head&gt; .
(2105) {304814} [305062]: &lt;/para&gt; &lt;/chapter&gt; XML system identifiers URI requirements URI XML system identifiers If you&#39;re using , remember that you must provide a system identifier that satisfies the requirements of a Uniform Resource Identifier ( URI ).
*****************************************************************
========================= CLASS #66 =============================
(1348) {191833} [192017]: If you&#39;re working with a document that you discover has many errors, the -f option offers a handy way to direct the errors to a file so they don&#39;t all scroll off your screen.
(2128) {308094} [308167]: If you&#39;re working in another domain, many of them may be unnecessary.
*****************************************************************
========================= CLASS #67 =============================
(1365) {194543} [196025]: Careful examination of the following document will show that we&#39;ve introduced a simple typographic error into the public identifier (the word DocBook is misspelled with a lowercase b ): SP responds dramatically to this error: hermes:/documents/books/tdg/examples/errs$ nsgmls -sv -c cat1 /usr/lib/sgml/declaration/xml.dcl nodtd.sgm nsgmls:I: SP version &quot;1.3.4&quot; nsgmls:nodtd.sgm:2:76:E: could not resolve host &quot;www.oasis-open.org&quot; (try again later) nsgmls:nodtd.sgm:2:76:E: DTD did not contain element declaration for document type name nsgmls:nodtd.sgm:3:8:E: element &quot;chapter&quot; undefined nsgmls:nodtd.sgm:3:15:E: element &quot;title&quot; undefined nsgmls:nodtd.sgm:4:5:E: element &quot;para&quot; undefined nsgmls:nodtd.sgm:10:5:E: element &quot;para&quot; undefined nsgmls:nodtd.sgm:11:15:E: there is no attribute &quot;role&quot; nsgmls:nodtd.sgm:11:21:E: element &quot;emphasis&quot; undefined nsgmls:nodtd.sgm:12:9:E: element &quot;emphasis&quot; undefined nsgmls:nodtd.sgm:12:24:E: element &quot;emphasis&quot; undefined nsgmls:nodtd.sgm:13:18:E: element &quot;superscript&quot; undefined nsgmls:nodtd.sgm:14:16:E: element &quot;subscript&quot; undefined nsgmls:nodtd.sgm:16:5:E: element &quot;para&quot; undefined catalog files errors Other things to look for, if you haven&#39;t misspelled the public identifier, are typos in the catalog or failure to specify a catalog that resolves the public identifier that can&#39;t be found.
(1374) {199044} [199671]: [n:\documents\books\dbtdg]nsgmls -sv -c \share\sgml\catalog examples\errs\misspe ll.sgm m:\jade\nsgmls.exe:I: SP version &quot;1.3.2&quot; m:\jade\nsgmls.exe:examples\errs\misspell.sgm:9:5:E: element &quot;PAAR&quot; undefined m:\jade\nsgmls.exe:examples\errs\misspell.sgm:14:6:E: end tag for element &quot;PARA&quot; which is not open m:\jade\nsgmls.exe:examples\errs\misspell.sgm:21:9:E: end tag for &quot;PAAR&quot; omitted, but OMITTAG NO was specified m:\jade\nsgmls.exe:examples\errs\misspell.sgm:9:0: start tag was here Luckily, these are pretty easy to spot, unless you accidentally spell the name of another element.
*****************************************************************
========================= CLASS #68 =============================
(1367) {196196} [198070]: In this case, there&#39;s nothing wrong with the document, but the catalog that&#39;s been specified is missing the public identifiers for the ISO entity sets: [n:\dbtdg]nsgmls -sv -c examples\errs\cat2 examples\simple.sgm m:\jade\nsgmls.exe:I: SP version &quot;1.3.2&quot; m:\jade\nsgmls.exe:n:/share/sgml/docbook/3.1/dbcent.mod:53:65:W: cannot generate system identifier for public text &quot;ISO 8879:1986//ENTITIES Added Math Symbols:Arrow Relations//EN&quot; m:\jade\nsgmls.exe:n:/share/sgml/docbook/3.1/dbcent.mod:54:8:E: reference to entity &quot;ISOamsa&quot; for which no system identifier could be generated m:\jade\nsgmls.exe:n:/share/sgml/docbook/3.1/dbcent.mod:52:0: entity was defined here m:\jade\nsgmls.exe:n:/share/sgml/docbook/3.1/dbcent.mod:60:66:W: cannot generate system identifier for public text &quot;ISO 8879:1986//ENTITIES Added Math Symbols:Binary Operators//EN&quot; m:\jade\nsgmls.exe:n:/share/sgml/docbook/3.1/dbcent.mod:61:8:E: reference to entity &quot;ISOamsb&quot; for which no system identifier could be generated m:\jade\nsgmls.exe:n:/share/sgml/docbook/3.1/dbcent.mod:59:0: entity was defined here m:\jade\nsgmls.exe:n:/share/sgml/docbook/3.1/dbcent.mod:67:60:W: cannot generate system identifier for public text &quot;ISO 8879:1986//ENTITIES Added Math Symbols:Delimiters//EN&quot; m:\jade\nsgmls.exe:n:/share/sgml/docbook/3.1/dbcent.mod:68:8:E: reference to entity &quot;ISOamsc&quot; for which no system identifier could be generated m:\jade\nsgmls.exe:n:/share/sgml/docbook/3.1/dbcent.mod:66:0: entity was defined here m:\jade\nsgmls.exe:n:/share/sgml/docbook/3.1/dbcent.mod:74:67:W: cannot generate system identifier for public text &quot;ISO 8879:1986//ENTITIES Added Math Symbols:Negated Relations//EN&quot; ... entity sets locating The ISO entity sets are required by the DocBook , but they are not distributed with it.
(1390) {203560} [203885]: [n:\dbtdg]nsgmls -sv -c \share\sgml\catalog examples\errs\badent.sgm m:\jade\nsgmls.exe:I: SP version &quot;1.3.2&quot; m:\jade\nsgmls.exe:examples\errs\badent.sgm:10:26:E: general entity &quot;xyzzy&quot; not defined and no default entity More often than not, you&#39;ll see this when you misspell a character entity name.
*****************************************************************
========================= CLASS #69 =============================
(1377) {199835} [201000]: [n:\dbtdg]nsgmls -sv -c \share\sgml\catalog examples\errs\misspell2.sgm m:\jade\nsgmls.exe:I: SP version &quot;1.3.2&quot; m:\jade\nsgmls.exe:examples\errs\misspell2.sgm:2:35:E: end tag for element &quot;TITEL&quot; which is not open m:\jade\nsgmls.exe:examples\errs\misspell2.sgm:3:5:E: document type does not allow element &quot;PARA&quot; here; missing one of &quot;FOOTNOTE&quot;, &quot;MSGTEXT&quot; start-tag m:\jade\nsgmls.exe:examples\errs\misspell2.sgm:9:5:E: document type does not allow element &quot;PARA&quot; here; missing one of &quot;FOOTNOTE&quot;, &quot;MSGTEXT&quot; start-tag m:\jade\nsgmls.exe:examples\errs\misspell2.sgm:15:5:E: document type does not allow element &quot;PARA&quot; here; missing one of &quot;FOOTNOTE&quot;, &quot;MSGTEXT&quot; start-tag m:\jade\nsgmls.exe:examples\errs\misspell2.sgm:21:9:E: end tag for &quot;TITLE&quot; omitted, but OMITTAG NO was specified m:\jade\nsgmls.exe:examples\errs\misspell2.sgm:2:9: start tag was here m:\jade\nsgmls.exe:examples\errs\misspell2.sgm:21:9:E: end tag for &quot;CHAPTER&quot; which is not finished These are pretty easy to spot as well, but look at how confused the parser became.
(1388) {202707} [203446]: [n:\dbtdg]nsgmls -sv -c \share\sgml\catalog examples\errs\noendtag.sgm m:\jade\nsgmls.exe:I: SP version &quot;1.3.2&quot; m:\jade\nsgmls.exe:examples\errs\noendtag.sgm:14:5:E: document type does not allow element &quot;PARA&quot; here; missing one of &quot;FOOTNOTE&quot;, &quot;MSGTEXT&quot;, &quot;CAUTION&quot;, &quot;IMPORTANT&quot;, &quot;NOTE&quot;, &quot;TIP&quot;, &quot;WARNING&quot;, &quot;BLOCKQUOTE&quot;, &quot;INFORMALEXAMPLE&quot; start-tag m:\jade\nsgmls.exe:examples\errs\noendtag.sgm:20:9:E: end tag for &quot;PARA&quot; omitted, but OMITTAG NO was specified m:\jade\nsgmls.exe:examples\errs\noendtag.sgm:9:0: start tag was here In this case, the parser figured out that the best thing it could do is end the paragraph.
(1547) {225605} [225762]: For example, (select-elements (descendants (current-node)) &quot;para&quot;) returns a list of all the paragraphs that are descendants of the current node.
*****************************************************************
========================= CLASS #70 =============================
(1382) {201532} [202233]: [n:\dbtdg]nsgmls -sv -c \share\sgml\catalog examples\errs\badstarttag.sgm m:\jade\nsgmls.exe:I: SP version &quot;1.3.2&quot; m:\jade\nsgmls.exe:examples\errs\badstarttag.sgm:9:12:E: document type does not allow element &quot;TITLE&quot; here; missing one of &quot;CALLOUTLIST&quot;, &quot;SEGMENTEDLIST&quot;, &quot;VARIABLELIST&quot;, &quot;CAUTION&quot;, &quot;IMPORTANT&quot;, &quot;NOTE&quot;, &quot;TIP&quot;, &quot;WARNING&quot;, &quot;BLOCKQUOTE&quot;, &quot;EQUATION&quot;, &quot;EXAMPLE&quot;, &quot;FIGURE&quot;, &quot;TABLE&quot; start-tag titles formal elements errors paragraphs titles In this example, we probably wanted a FormalPara , so that we could have a title on the paragraph.
(2092) {301395} [302194]: Searching for classname in dbpool.mod reveals: &lt;!ENTITY % local.tech.char.class &quot;&quot;&gt; &lt;!ENTITY % tech.char.class &quot;Action|Application| ClassName |Command|ComputerOutput |Database|Email|EnVar|ErrorCode|ErrorName|ErrorType|Filename |Function|GUIButton|GUIIcon|GUILabel|GUIMenu|GUIMenuItem |GUISubmenu|Hardware|Interface|InterfaceDefinition|KeyCap |KeyCode|KeyCombo|KeySym|Literal|Constant|Markup|MediaLabel |MenuChoice|MouseButton|MsgText|Option|Optional|Parameter |Prompt|Property|Replaceable|ReturnValue|SGMLTag|StructField |StructName|Symbol|SystemItem|Token|Type|UserInput|VarName %local.tech.char.class;&quot;&gt; Searching further reveals the element and attribute declarations for ClassName .
(2130) {308314} [309113]: The initial definition of tech.char.class is: &lt;!ENTITY % tech.char.class &quot;Action|Application|ClassName|Command|ComputerOutput |Database|Email|EnVar|ErrorCode|ErrorName|ErrorType|Filename |Function|GUIButton|GUIIcon|GUILabel|GUIMenu|GUIMenuItem |GUISubmenu|Hardware|Interface|InterfaceDefinition|KeyCap |KeyCode|KeyCombo|KeySym|Literal|Markup|MediaLabel|MenuChoice |MouseButton|MsgText|Option|Optional|Parameter|Prompt|Property |Replaceable|ReturnValue|SGMLTag|StructField|StructName |Symbol|SystemItem|Token|Type|UserInput %local.tech.char.class;&quot;&gt; When examining this list, it seems that you can delete all of the inlines except, perhaps, Application , Command , Email , Filename , Literal , Replaceable , Symbol , and SystemItem .
*****************************************************************
========================= CLASS #71 =============================
(1407) {206424} [207307]: What I mean by that is that an parser reads a stream of bytes: &quot;&lt;&quot; &quot;?&quot; &quot;x&quot; &quot;m&quot; &quot;l&quot; &quot; &quot; &quot;v&quot; &quot;e&quot; ... &quot;&lt;&quot; &quot;!&quot; &quot;D&quot; &quot;O&quot; &quot;C&quot; &quot;T&quot; &quot;Y&quot; &quot;P&quot; &quot;E&quot; &quot; &quot; &quot;b&quot; &quot;o&quot; &quot;o&quot; &quot;k&quot; ... &quot;&lt;&quot; &quot;b&quot; &quot;o&quot; &quot;o&quot; &quot;k&quot; &quot; &quot; &quot;i&quot; &quot;d&quot; &quot;=&quot; &quot;&#39;&quot; &quot;f&quot; &quot;o&quot; &quot;o&quot; &quot;&#39;&quot; &quot;&gt;&quot; ... &quot;&lt;&quot; &quot;/&quot; &quot;b&quot; &quot;o&quot; &quot;o&quot; &quot;k&quot; &quot;&gt;&quot; interprets them as a stream of characters (which may change the interpretation of some sequences of bytes) and constructs some representation of the document.
(1527) {223233} [223395]: The expression: (make empty-element gi: &quot;BR&quot; attributes: &#39;((&quot;CLEAR&quot; &quot;ALL&quot;))) produces &lt;BR CLEAR=&quot;ALL&quot;&gt; .
(1583) {230118} [230435]: A common use of let is within a define expression: (define (cals-rule-default nd) (let* ((table (ancestor &quot;table&quot; nd)) (frame (if (attribute-string &quot;frame&quot; table) (attribute-string &quot;frame&quot; table) &quot;all&quot;))) (equal?
(1584) {230436} [230527]: frame &quot;all&quot;))) This function creates two local variables table and frame .
(1789) {261909} [262077]: The second template is called with &lt;xsl:apply-templates select=&quot;$target&quot; mode=&quot;xref&quot;/&gt; in the context of processing &lt;xref&gt; elements.
(1914) {276575} [276685]: In the driver file xtchunk.xsl , the first instruction is &lt;xsl:import href=&quot;docbook.xsl&quot;/&gt; .
(1925) {277841} [277979]: Near the end of the list of includes in the main DocBook driver file is the instruction &lt;xsl:include href=&quot;param.xsl&quot;/&gt; .
(1940) {279765} [279899]: Then your importing stylesheet can pull in your list templates with a &lt;xsl:include href=&quot;mylists.xsl&quot;/&gt; instruction.
(1947) {280729} [280944]: Instead of using &lt;xsl:import href=&quot;docbook.xsl&quot;/&gt; , you copy that file to a new name and rewrite any of the &lt;xsl:include/&gt; instructions to assemble a custom collection of stylesheet modules.
(2269) {328659} [328809]: pitarget param1=&quot;value1&quot; param2=&quot;value2&quot;?&gt; The pitarget should be a name that the processing application will recognize.
*****************************************************************
========================= CLASS #72 =============================
(1436) {211715} [212023]: DSSSL DSSSL Document Style Semantics and Specification Language DSSSL ISO standards DSSSL International Organization for Standardization ISO Entity Sets; ISO standards Next, the International Organization for Standardization ( ISO ) created DSSSL , the Document Style Semantics and Specification Language.
(1460) {214770} [214847]: The acronym stands for Document Style Semantics and Specification Language .
(2236) {322805} [322924]: DSSSL DSSSL stylesheets languages DSSSL Document Style Semantics and Specification Language ( ISO / IEC 10179:1996).
*****************************************************************
========================= CLASS #73 =============================
(1533) {224239} [224333]: (attribute-string &quot; attr &quot; nd ) Returns the value of the attr attribute of nd .
(1534) {224335} [224439]: (inherited-attribute-string &quot; attr &quot; nd ) Returns the value of the attr attribute of nd .
*****************************************************************
========================= CLASS #74 =============================
(1609) {233199} [233383]: It&#39;s unlikely that you&#39;d want all of these titles to be presented in the same way, so a more robust stylesheet would have to arrange the processing of titles with more context.
(1682) {246402} [246443]: It&#39;s easy to envision how this works.
*****************************************************************
========================= CLASS #75 =============================
(1633) {236767} [237789]: Writing Your Own Driver A basic driver file looks like this: &lt;!DOCTYPE style-sheet PUBLIC &quot;-//James Clark//DTD DSSSL Style Sheet//EN&quot; [ &lt;!ENTITY dbstyle PUBLIC &quot;-//Norman Walsh//DOCUMENT DocBook Print Stylesheet//EN&quot; CDATA DSSSL&gt; ]&gt; &lt;style-sheet&gt; &lt;style-specification use=&quot;docbook&quot;&gt; &lt;style-specification-body&gt; ;; your changes go here... &lt;/style-specification-body&gt; &lt;/style-specification&gt; &lt;external-specification id=&quot;docbook&quot; document=&quot;dbstyle&quot;&gt; &lt;/style-sheet&gt; public identifiers Modular DocBook Stylesheets Modular DocBook Stylesheets public identifiers There are two public identifiers associated with the Modular DocBook Stylesheets: -//Norman Walsh//DOCUMENT DocBook Print Stylesheet//EN -//Norman Walsh//DOCUMENT DocBook HTML Stylesheet//EN printing stylesheets HTML stylesheets selecting catalog files Open (SGML) The former selects the print stylesheet and the latter selects the stylesheet.
(1650) {240365} [241037]: The following driver makes German the default language: &lt;!DOCTYPE style-sheet PUBLIC &quot;-//James Clark//DTD DSSSL Style Sheet//EN&quot; [ &lt;!ENTITY dbstyle PUBLIC &quot;-//Norman Walsh//DOCUMENT DocBook Print Stylesheet//EN&quot; CDATA DSSSL&gt; ]&gt; &lt;style-sheet&gt; &lt;style-specification use=&quot;docbook&quot;&gt; &lt;style-specification-body&gt; (define %default-language% &quot;dege&quot;) &lt;/style-specification-body&gt; &lt;/style-specification&gt; &lt;external-specification id=&quot;docbook&quot; document=&quot;dbstyle&quot;&gt; &lt;/style-sheet&gt; %gentext-language% There are two other settings that can be changed only in a driver.
(1855) {269355} [269569]: Here is a fragment from sections.xsl that shows how a heading tag is generated using the &lt;xsl:element&gt; and &lt;xsl:attribute&gt; elements: This whole example is generating a single HTML heading element.
(1998) {287990} [288317]: Consider the following fragment: &lt;!ENTITY % dbpool SYSTEM &quot;dbpool.mod&quot;&gt; &lt;!ENTITY % dbhier SYSTEM &quot;dbhier.mod&quot;&gt; %dbpool; %dbhier; This line declares the parameter entity dbpool and associates it with the file dbpool.mod .
(2004) {288761} [288902]: Given this fragment: &lt;!ENTITY foo &quot;Lenny&quot;&gt; &lt;!ENTITY foo &quot;Norm&quot;&gt; The replacement text for foo is Lenny.
*****************************************************************
========================= CLASS #76 =============================
(1644) {239184} [239242]: summarizes the language codes for the supported languages.
(1649) {240306} [240364]: summarizes the language codes for the supported languages.
*****************************************************************
========================= CLASS #77 =============================
(1654) {241847} [242314]: &lt;/para&gt; &lt;/preface&gt; &lt;chapter lang=&quot;usen&quot;&gt;&lt;title&gt;English&lt;/title&gt; ... &lt;/chapter&gt; &lt;chapter lang=&quot;fr&quot;&gt;&lt;title&gt;French&lt;/title&gt; ... &lt;/chapter&gt; &lt;chapter lang=&quot;dege&quot;&gt;&lt;title&gt;Deutsch&lt;/title&gt; ... &lt;/chapter&gt; &lt;/book&gt; The standard stylesheets render the Preface as something like this: There are three chapters in this book: Chapter 1, Chapter 2, and Chapter 3.
(1776) {260146} [260229]: This distinguishes such titles from other &lt;title&gt; elements used in DocBook.
*****************************************************************
========================= CLASS #78 =============================
(1683) {246445} [247330]: The application reads the content of the letter, extracts the address and return address elements from the source, and uses them to generate an envelope: &lt;?xml version=&#39;1.0&#39;&gt; &lt;!DOCTYPE letter &quot;/share/sgml/letter/letter.dtd&quot; [ &lt;!ENTITY myaddress &quot;/share/sgml/entities/myaddress.xml&quot;&gt; ]&gt; &lt;letter&gt; &lt;returnaddress&gt;&amp;myaddress;&lt;/returnaddress&gt; &lt;address&gt; &lt;name&gt;Leonard Muellner&lt;/name&gt; &lt;company&gt;O&#39;Reilly &amp;amp; Associates&lt;/company&gt; &lt;street&gt;90 Sherman Street&lt;/street&gt; &lt;city&gt;Cambridge&lt;/city&gt;&lt;state&gt;MA&lt;/state&gt;&lt;zip&gt;02140&lt;/zip&gt; &lt;/address&gt; &lt;body&gt; &lt;salutation&gt;Hi Lenny&lt;/salutation&gt; ... &lt;/body&gt; The processor extracts the Returnaddress and Address elements and their children and prints the envelope accordingly.
(1797) {262880} [263023]: Using variables and parameters XSL provides two elements that let you assign a value to a name: &lt;xsl:variable&gt; and &lt;xsl:param&gt; .
(1892) {274015} [274145]: Stylesheet inclusion vs. importing XSL actually provides two inclusion mechanisms: &lt;xsl:include&gt; and &lt;xsl:import&gt; .
*****************************************************************
========================= CLASS #79 =============================
(1751) {256978} [257076]: Here is an example of a simple XSL stylesheet applied to a simple file to generate HTML output.
(1843) {268051} [268074]: Generating HTML output.
*****************************************************************
========================= CLASS #80 =============================
(1764) {258336} [258634]: Fortunately, you can let other templates take care of those elements, so your XSL template for &lt;para&gt; can be quite simple: The &lt;xsl:template&gt; element starts a new template, and its match attribute indicates where to apply the template, in this case to any &lt;para&gt; elements.
(1770) {259312} [259401]: The match attribute of &lt;xsl:template&gt; provides that context for most templates.
(1785) {261291} [261393]: A mode attribute in an &lt;xsl:template&gt; definition adds a specific mode name to that template.
*****************************************************************
========================= CLASS #81 =============================
(1846) {268258} [268418]: That is the master stylesheet file that uses &lt;xsl:include&gt; to pull in the component files it needs to assemble a complete stylesheet for producing HTML.
(1875) {271535} [271709]: That is the master stylesheet file that uses &lt;xsl:include&gt; to pull in the component files it needs to assemble a complete stylesheet for producing formatting objects.
(1893) {274146} [274195]: Of the two, &lt;xsl:include&gt; is the simpler.
*****************************************************************
========================= CLASS #82 =============================
(1883) {272683} [272780]: Customizing DocBook XSL stylesheets The DocBook XSL stylesheets are written in a modular fashion.
(1904) {275430} [275512]: Customizing a DocBook XSL stylesheet is the opposite of customizing a DocBook DTD.
(1926) {277980} [278071]: The param.xsl file is the most important module for customizing a DocBook XSL stylesheet.
*****************************************************************
========================= CLASS #83 =============================
(2028) {291490} [291574]: The most common reason for changing this module is to add or remove inline elements.
(2034) {292000} [292053]: Changes to this module can add or remove entity sets.
*****************************************************************
========================= CLASS #84 =============================
(2075) {297909} [299444]: In these cases, rather than including the whole at once, you include each of the modules separately, perhaps with entity or element declarations between them: Overrides of Most Entity Declarations Here &lt;!ENTITY % orig-pool &quot;-//OASIS//ELEMENTS DocBook Information Pool V3.1//EN&quot;&gt; %orig-pool; Overrides of Document Hierarchy Entities Here &lt;!ENTITY % orig-hier &quot;-//OASIS//ELEMENTS DocBook Document Hierarchy V3.1//EN&quot;&gt; %orig-hier; New/Modified Element and Attribute Declarations Here &lt;!ENTITY % orig-notn &quot;-//OASIS//ENTITIES DocBook Notations V3.1//EN&quot;&gt; %orig-notn; &lt;!ENTITY % orig-cent &quot;-//OASIS//ENTITIES DocBook Character Entities V3.1//EN&quot;&gt; %orig-cent; &lt;!ENTITY % orig-gen &quot;-//OASIS//ENTITIES DocBook Additional General Entities V3.1//EN&quot;&gt; %orig-gen; one-off customizations Finally, it&#39;s worth noting that in the rare case in which you need certain kinds of very simple, one-off customizations, you can do them in the document subset: &lt;!DOCTYPE book PUBLIC &quot;-//OASIS//DTD DocBook V3.1//EN&quot; [ Overrides of Entity Declarations Here New/Modified Element and Attribute Declarations Here ]&gt; &lt;book&gt;...&lt;/book&gt; Writing, Testing, and Using a Customization Layer DocBook DTD customizing customization layers, writing, testing, and using customizing DocBook DTD writing, testing and using customization layers The procedure for creating, testing, and using a customization layer is always about the same.
(2102) {303195} [303500]: Using Your Customization Layer customizing DocBook DTD writing, testing, and using customization layers DocBook DTD customizing using customization layer In order to use the new customization layer, you must save it in a file, for example mydocbk.dtd , and then you must use the new in your document.
(2106) {305064} [305297]: Testing Your Work customizing DocBook DTD writing, testing, and using customization layers testing customization layers (DocBook DTD) validation customization layers s, by their nature, contain many complex, interrelated elements.
*****************************************************************
========================= CLASS #85 =============================
(2087) {300660} [300864]: Second, there is an alternate version of the book online that shows all of the element content models in terms of the parameter entities that define them, rather than the flattened versions shown here.
(2088) {300866} [301127]: elements content models (online reference) One resource that may be useful is the alternate version of this book that shows all of the element content models in terms of the parameter entities which define them, rather than the flattened versions shown here.
*****************************************************************
========================= CLASS #86 =============================
(2248) {324563} [324980]: external subset external subset document type declaration external subset public identifiers external subset system identifiers external subset declarations document type declaration Element, attribute, and other declarations that compose (part of) a document type definition that are stored in an external entity, and referenced from a document&#39;s document type declaration using a public or system identifier.
(2262) {327174} [327450]: internal subset internal subset document type declaration internal subset declarations document type declaration Element, attribute, and other declarations that compose (part of) a document type definition that are stored in a document, within the document type declaration.
*****************************************************************
========================= CLASS #87 =============================
(2303) {333485} [333611]: Nutshell Handbook, the Nutshell Handbook logo, and the O&#39;Reilly logo are registered trademarks of O&#39;Reilly Media, Inc.
(2305) {333878} [333938]: O&#39;Reilly Media, Inc. is independent of Sun Microsystems.
(2307) {334056} [334222]: Where those designations appear in this book, and O&#39;Reilly Media, Inc. was aware of a trademark claim, the designations have been printed in caps or initial caps.
(2309) {334435} [334505]: 1999 2000 2001 2002 2003 O&#39;Reilly Media, Inc. All rights reserved.
*****************************************************************
